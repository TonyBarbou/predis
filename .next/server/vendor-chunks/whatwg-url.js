"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/whatwg-url";
exports.ids = ["vendor-chunks/whatwg-url"];
exports.modules = {

/***/ "(ssr)/../../../../../node_modules/whatwg-url/index.js":
/*!*******************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst { URL, URLSearchParams } = __webpack_require__(/*! ./webidl2js-wrapper */ \"(ssr)/../../../../../node_modules/whatwg-url/webidl2js-wrapper.js\");\nconst urlStateMachine = __webpack_require__(/*! ./lib/url-state-machine */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/url-state-machine.js\");\nconst percentEncoding = __webpack_require__(/*! ./lib/percent-encoding */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/percent-encoding.js\");\n\nconst sharedGlobalObject = { Array, Object, Promise, String, TypeError };\nURL.install(sharedGlobalObject, [\"Window\"]);\nURLSearchParams.install(sharedGlobalObject, [\"Window\"]);\n\nexports.URL = sharedGlobalObject.URL;\nexports.URLSearchParams = sharedGlobalObject.URLSearchParams;\n\nexports.parseURL = urlStateMachine.parseURL;\nexports.basicURLParse = urlStateMachine.basicURLParse;\nexports.serializeURL = urlStateMachine.serializeURL;\nexports.serializePath = urlStateMachine.serializePath;\nexports.serializeHost = urlStateMachine.serializeHost;\nexports.serializeInteger = urlStateMachine.serializeInteger;\nexports.serializeURLOrigin = urlStateMachine.serializeURLOrigin;\nexports.setTheUsername = urlStateMachine.setTheUsername;\nexports.setThePassword = urlStateMachine.setThePassword;\nexports.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;\nexports.hasAnOpaquePath = urlStateMachine.hasAnOpaquePath;\n\nexports.percentDecodeString = percentEncoding.percentDecodeString;\nexports.percentDecodeBytes = percentEncoding.percentDecodeBytes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsUUFBUSx1QkFBdUIsRUFBRSxtQkFBTyxDQUFDLDhGQUFxQjtBQUM5RCx3QkFBd0IsbUJBQU8sQ0FBQyxzR0FBeUI7QUFDekQsd0JBQXdCLG1CQUFPLENBQUMsb0dBQXdCOztBQUV4RCw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQSxXQUFXO0FBQ1gsdUJBQXVCOztBQUV2QixnQkFBZ0I7QUFDaEIscUJBQXFCO0FBQ3JCLG9CQUFvQjtBQUNwQixxQkFBcUI7QUFDckIscUJBQXFCO0FBQ3JCLHdCQUF3QjtBQUN4QiwwQkFBMEI7QUFDMUIsc0JBQXNCO0FBQ3RCLHNCQUFzQjtBQUN0Qix1Q0FBdUM7QUFDdkMsdUJBQXVCOztBQUV2QiwyQkFBMkI7QUFDM0IsMEJBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvaW5kZXguanM/MWFmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBVUkwsIFVSTFNlYXJjaFBhcmFtcyB9ID0gcmVxdWlyZShcIi4vd2ViaWRsMmpzLXdyYXBwZXJcIik7XG5jb25zdCB1cmxTdGF0ZU1hY2hpbmUgPSByZXF1aXJlKFwiLi9saWIvdXJsLXN0YXRlLW1hY2hpbmVcIik7XG5jb25zdCBwZXJjZW50RW5jb2RpbmcgPSByZXF1aXJlKFwiLi9saWIvcGVyY2VudC1lbmNvZGluZ1wiKTtcblxuY29uc3Qgc2hhcmVkR2xvYmFsT2JqZWN0ID0geyBBcnJheSwgT2JqZWN0LCBQcm9taXNlLCBTdHJpbmcsIFR5cGVFcnJvciB9O1xuVVJMLmluc3RhbGwoc2hhcmVkR2xvYmFsT2JqZWN0LCBbXCJXaW5kb3dcIl0pO1xuVVJMU2VhcmNoUGFyYW1zLmluc3RhbGwoc2hhcmVkR2xvYmFsT2JqZWN0LCBbXCJXaW5kb3dcIl0pO1xuXG5leHBvcnRzLlVSTCA9IHNoYXJlZEdsb2JhbE9iamVjdC5VUkw7XG5leHBvcnRzLlVSTFNlYXJjaFBhcmFtcyA9IHNoYXJlZEdsb2JhbE9iamVjdC5VUkxTZWFyY2hQYXJhbXM7XG5cbmV4cG9ydHMucGFyc2VVUkwgPSB1cmxTdGF0ZU1hY2hpbmUucGFyc2VVUkw7XG5leHBvcnRzLmJhc2ljVVJMUGFyc2UgPSB1cmxTdGF0ZU1hY2hpbmUuYmFzaWNVUkxQYXJzZTtcbmV4cG9ydHMuc2VyaWFsaXplVVJMID0gdXJsU3RhdGVNYWNoaW5lLnNlcmlhbGl6ZVVSTDtcbmV4cG9ydHMuc2VyaWFsaXplUGF0aCA9IHVybFN0YXRlTWFjaGluZS5zZXJpYWxpemVQYXRoO1xuZXhwb3J0cy5zZXJpYWxpemVIb3N0ID0gdXJsU3RhdGVNYWNoaW5lLnNlcmlhbGl6ZUhvc3Q7XG5leHBvcnRzLnNlcmlhbGl6ZUludGVnZXIgPSB1cmxTdGF0ZU1hY2hpbmUuc2VyaWFsaXplSW50ZWdlcjtcbmV4cG9ydHMuc2VyaWFsaXplVVJMT3JpZ2luID0gdXJsU3RhdGVNYWNoaW5lLnNlcmlhbGl6ZVVSTE9yaWdpbjtcbmV4cG9ydHMuc2V0VGhlVXNlcm5hbWUgPSB1cmxTdGF0ZU1hY2hpbmUuc2V0VGhlVXNlcm5hbWU7XG5leHBvcnRzLnNldFRoZVBhc3N3b3JkID0gdXJsU3RhdGVNYWNoaW5lLnNldFRoZVBhc3N3b3JkO1xuZXhwb3J0cy5jYW5ub3RIYXZlQVVzZXJuYW1lUGFzc3dvcmRQb3J0ID0gdXJsU3RhdGVNYWNoaW5lLmNhbm5vdEhhdmVBVXNlcm5hbWVQYXNzd29yZFBvcnQ7XG5leHBvcnRzLmhhc0FuT3BhcXVlUGF0aCA9IHVybFN0YXRlTWFjaGluZS5oYXNBbk9wYXF1ZVBhdGg7XG5cbmV4cG9ydHMucGVyY2VudERlY29kZVN0cmluZyA9IHBlcmNlbnRFbmNvZGluZy5wZXJjZW50RGVjb2RlU3RyaW5nO1xuZXhwb3J0cy5wZXJjZW50RGVjb2RlQnl0ZXMgPSBwZXJjZW50RW5jb2RpbmcucGVyY2VudERlY29kZUJ5dGVzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/Function.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/Function.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/../../../../../node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/utils.js\");\n\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (typeof value !== \"function\") {\n    throw new globalObject.TypeError(context + \" is not a function\");\n  }\n\n  function invokeTheCallbackFunction(...args) {\n    const thisArg = utils.tryWrapperForImpl(this);\n    let callResult;\n\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    callResult = Reflect.apply(value, thisArg, args);\n\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\n\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = (...args) => {\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    let callResult = Reflect.construct(value, args);\n\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\n\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n\n  return invokeTheCallbackFunction;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL0Z1bmN0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLG9CQUFvQixtQkFBTyxDQUFDLDZGQUFvQjtBQUNoRCxjQUFjLG1CQUFPLENBQUMsNkVBQVk7O0FBRWxDLGVBQWUsMkJBQTJCLGlDQUFpQyxJQUFJO0FBQy9FO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBOztBQUVBOztBQUVBLGtEQUFrRCx5Q0FBeUM7O0FBRTNGO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7O0FBRUE7O0FBRUEsa0RBQWtELHlDQUF5Qzs7QUFFM0Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvRnVuY3Rpb24uanM/N2YzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29udmVyc2lvbnMgPSByZXF1aXJlKFwid2ViaWRsLWNvbnZlcnNpb25zXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcblxuZXhwb3J0cy5jb252ZXJ0ID0gKGdsb2JhbE9iamVjdCwgdmFsdWUsIHsgY29udGV4dCA9IFwiVGhlIHByb3ZpZGVkIHZhbHVlXCIgfSA9IHt9KSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKGNvbnRleHQgKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZVRoZUNhbGxiYWNrRnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IHRoaXNBcmcgPSB1dGlscy50cnlXcmFwcGVyRm9ySW1wbCh0aGlzKTtcbiAgICBsZXQgY2FsbFJlc3VsdDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IHV0aWxzLnRyeVdyYXBwZXJGb3JJbXBsKGFyZ3NbaV0pO1xuICAgIH1cblxuICAgIGNhbGxSZXN1bHQgPSBSZWZsZWN0LmFwcGx5KHZhbHVlLCB0aGlzQXJnLCBhcmdzKTtcblxuICAgIGNhbGxSZXN1bHQgPSBjb252ZXJzaW9uc1tcImFueVwiXShjYWxsUmVzdWx0LCB7IGNvbnRleHQ6IGNvbnRleHQsIGdsb2JhbHM6IGdsb2JhbE9iamVjdCB9KTtcblxuICAgIHJldHVybiBjYWxsUmVzdWx0O1xuICB9XG5cbiAgaW52b2tlVGhlQ2FsbGJhY2tGdW5jdGlvbi5jb25zdHJ1Y3QgPSAoLi4uYXJncykgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IHV0aWxzLnRyeVdyYXBwZXJGb3JJbXBsKGFyZ3NbaV0pO1xuICAgIH1cblxuICAgIGxldCBjYWxsUmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QodmFsdWUsIGFyZ3MpO1xuXG4gICAgY2FsbFJlc3VsdCA9IGNvbnZlcnNpb25zW1wiYW55XCJdKGNhbGxSZXN1bHQsIHsgY29udGV4dDogY29udGV4dCwgZ2xvYmFsczogZ2xvYmFsT2JqZWN0IH0pO1xuXG4gICAgcmV0dXJuIGNhbGxSZXN1bHQ7XG4gIH07XG5cbiAgaW52b2tlVGhlQ2FsbGJhY2tGdW5jdGlvblt1dGlscy53cmFwcGVyU3ltYm9sXSA9IHZhbHVlO1xuICBpbnZva2VUaGVDYWxsYmFja0Z1bmN0aW9uLm9iamVjdFJlZmVyZW5jZSA9IHZhbHVlO1xuXG4gIHJldHVybiBpbnZva2VUaGVDYWxsYmFja0Z1bmN0aW9uO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/Function.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/URL-impl.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/URL-impl.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst usm = __webpack_require__(/*! ./url-state-machine */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/url-state-machine.js\");\nconst urlencoded = __webpack_require__(/*! ./urlencoded */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/urlencoded.js\");\nconst URLSearchParams = __webpack_require__(/*! ./URLSearchParams */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/URLSearchParams.js\");\n\nexports.implementation = class URLImpl {\n  constructor(globalObject, constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl(globalObject, [query], { doNotStripQMark: true });\n    this._query._url = this;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n    const { query } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencodedString(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return `${this._url.scheme}:`;\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(`${v}:`, { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n  }\n\n  set host(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    return usm.serializePath(this._url);\n  }\n\n  set pathname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return `?${this._url.query}`;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n    this._query._list = urlencoded.parseUrlencodedString(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return `#${this._url.fragment}`;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/URL-impl.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/URL.js":
/*!*********************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/URL.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/../../../../../node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/utils.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"URL\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'URL'.`);\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"URL\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports[\"new\"] = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class URL {\n    constructor(url) {\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to construct 'URL': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to construct 'URL': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to construct 'URL': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    toJSON() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'toJSON' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol].toJSON();\n    }\n\n    get href() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get href' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"href\"];\n    }\n\n    set href(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set href' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'href' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"href\"] = V;\n    }\n\n    toString() {\n      const esValue = this;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'toString' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"href\"];\n    }\n\n    get origin() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get origin' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"origin\"];\n    }\n\n    get protocol() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get protocol' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"protocol\"];\n    }\n\n    set protocol(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set protocol' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'protocol' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"protocol\"] = V;\n    }\n\n    get username() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get username' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"username\"];\n    }\n\n    set username(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set username' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'username' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"username\"] = V;\n    }\n\n    get password() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get password' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"password\"];\n    }\n\n    set password(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set password' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'password' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"password\"] = V;\n    }\n\n    get host() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get host' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"host\"];\n    }\n\n    set host(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set host' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'host' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"host\"] = V;\n    }\n\n    get hostname() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get hostname' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"hostname\"];\n    }\n\n    set hostname(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set hostname' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'hostname' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"hostname\"] = V;\n    }\n\n    get port() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get port' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"port\"];\n    }\n\n    set port(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set port' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'port' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"port\"] = V;\n    }\n\n    get pathname() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get pathname' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"pathname\"];\n    }\n\n    set pathname(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set pathname' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'pathname' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"pathname\"] = V;\n    }\n\n    get search() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get search' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"search\"];\n    }\n\n    set search(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set search' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'search' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"search\"] = V;\n    }\n\n    get searchParams() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get searchParams' called on an object that is not a valid instance of URL.\");\n      }\n\n      return utils.getSameObject(this, \"searchParams\", () => {\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"searchParams\"]);\n      });\n    }\n\n    get hash() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get hash' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"hash\"];\n    }\n\n    set hash(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set hash' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'hash' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"hash\"] = V;\n    }\n  }\n  Object.defineProperties(URL.prototype, {\n    toJSON: { enumerable: true },\n    href: { enumerable: true },\n    toString: { enumerable: true },\n    origin: { enumerable: true },\n    protocol: { enumerable: true },\n    username: { enumerable: true },\n    password: { enumerable: true },\n    host: { enumerable: true },\n    hostname: { enumerable: true },\n    port: { enumerable: true },\n    pathname: { enumerable: true },\n    search: { enumerable: true },\n    searchParams: { enumerable: true },\n    hash: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"URL\", configurable: true }\n  });\n  ctorRegistry[interfaceName] = URL;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: URL\n  });\n\n  if (globalNames.includes(\"Window\")) {\n    Object.defineProperty(globalObject, \"webkitURL\", {\n      configurable: true,\n      writable: true,\n      value: URL\n    });\n  }\n};\n\nconst Impl = __webpack_require__(/*! ./URL-impl.js */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/URL-impl.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL1VSTC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQkFBb0IsbUJBQU8sQ0FBQyw2RkFBb0I7QUFDaEQsY0FBYyxtQkFBTyxDQUFDLDZFQUFZOztBQUVsQztBQUNBOztBQUVBOztBQUVBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxlQUFlLDJCQUEyQixpQ0FBaUMsSUFBSTtBQUMvRTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUztBQUMvQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTs7QUFFQSxzQkFBc0I7O0FBRXRCLGFBQWEsaUVBQWlFO0FBQzlFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLGtCQUFrQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGtCQUFrQjtBQUNoQyxZQUFZLGtCQUFrQjtBQUM5QixnQkFBZ0Isa0JBQWtCO0FBQ2xDLGNBQWMsa0JBQWtCO0FBQ2hDLGdCQUFnQixrQkFBa0I7QUFDbEMsZ0JBQWdCLGtCQUFrQjtBQUNsQyxnQkFBZ0Isa0JBQWtCO0FBQ2xDLFlBQVksa0JBQWtCO0FBQzlCLGdCQUFnQixrQkFBa0I7QUFDbEMsWUFBWSxrQkFBa0I7QUFDOUIsZ0JBQWdCLGtCQUFrQjtBQUNsQyxjQUFjLGtCQUFrQjtBQUNoQyxvQkFBb0Isa0JBQWtCO0FBQ3RDLFlBQVksa0JBQWtCO0FBQzlCLDRCQUE0QjtBQUM1QixHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsbUZBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvVVJMLmpzP2FlZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGNvbnZlcnNpb25zID0gcmVxdWlyZShcIndlYmlkbC1jb252ZXJzaW9uc1wiKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5cbmNvbnN0IGltcGxTeW1ib2wgPSB1dGlscy5pbXBsU3ltYm9sO1xuY29uc3QgY3RvclJlZ2lzdHJ5U3ltYm9sID0gdXRpbHMuY3RvclJlZ2lzdHJ5U3ltYm9sO1xuXG5jb25zdCBpbnRlcmZhY2VOYW1lID0gXCJVUkxcIjtcblxuZXhwb3J0cy5pcyA9IHZhbHVlID0+IHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHZhbHVlKSAmJiB1dGlscy5oYXNPd24odmFsdWUsIGltcGxTeW1ib2wpICYmIHZhbHVlW2ltcGxTeW1ib2xdIGluc3RhbmNlb2YgSW1wbC5pbXBsZW1lbnRhdGlvbjtcbn07XG5leHBvcnRzLmlzSW1wbCA9IHZhbHVlID0+IHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHZhbHVlKSAmJiB2YWx1ZSBpbnN0YW5jZW9mIEltcGwuaW1wbGVtZW50YXRpb247XG59O1xuZXhwb3J0cy5jb252ZXJ0ID0gKGdsb2JhbE9iamVjdCwgdmFsdWUsIHsgY29udGV4dCA9IFwiVGhlIHByb3ZpZGVkIHZhbHVlXCIgfSA9IHt9KSA9PiB7XG4gIGlmIChleHBvcnRzLmlzKHZhbHVlKSkge1xuICAgIHJldHVybiB1dGlscy5pbXBsRm9yV3JhcHBlcih2YWx1ZSk7XG4gIH1cbiAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoYCR7Y29udGV4dH0gaXMgbm90IG9mIHR5cGUgJ1VSTCcuYCk7XG59O1xuXG5mdW5jdGlvbiBtYWtlV3JhcHBlcihnbG9iYWxPYmplY3QsIG5ld1RhcmdldCkge1xuICBsZXQgcHJvdG87XG4gIGlmIChuZXdUYXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3QocHJvdG8pKSB7XG4gICAgcHJvdG8gPSBnbG9iYWxPYmplY3RbY3RvclJlZ2lzdHJ5U3ltYm9sXVtcIlVSTFwiXS5wcm90b3R5cGU7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShwcm90byk7XG59XG5cbmV4cG9ydHMuY3JlYXRlID0gKGdsb2JhbE9iamVjdCwgY29uc3RydWN0b3JBcmdzLCBwcml2YXRlRGF0YSkgPT4ge1xuICBjb25zdCB3cmFwcGVyID0gbWFrZVdyYXBwZXIoZ2xvYmFsT2JqZWN0KTtcbiAgcmV0dXJuIGV4cG9ydHMuc2V0dXAod3JhcHBlciwgZ2xvYmFsT2JqZWN0LCBjb25zdHJ1Y3RvckFyZ3MsIHByaXZhdGVEYXRhKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlSW1wbCA9IChnbG9iYWxPYmplY3QsIGNvbnN0cnVjdG9yQXJncywgcHJpdmF0ZURhdGEpID0+IHtcbiAgY29uc3Qgd3JhcHBlciA9IGV4cG9ydHMuY3JlYXRlKGdsb2JhbE9iamVjdCwgY29uc3RydWN0b3JBcmdzLCBwcml2YXRlRGF0YSk7XG4gIHJldHVybiB1dGlscy5pbXBsRm9yV3JhcHBlcih3cmFwcGVyKTtcbn07XG5cbmV4cG9ydHMuX2ludGVybmFsU2V0dXAgPSAod3JhcHBlciwgZ2xvYmFsT2JqZWN0KSA9PiB7fTtcblxuZXhwb3J0cy5zZXR1cCA9ICh3cmFwcGVyLCBnbG9iYWxPYmplY3QsIGNvbnN0cnVjdG9yQXJncyA9IFtdLCBwcml2YXRlRGF0YSA9IHt9KSA9PiB7XG4gIHByaXZhdGVEYXRhLndyYXBwZXIgPSB3cmFwcGVyO1xuXG4gIGV4cG9ydHMuX2ludGVybmFsU2V0dXAod3JhcHBlciwgZ2xvYmFsT2JqZWN0KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBwZXIsIGltcGxTeW1ib2wsIHtcbiAgICB2YWx1ZTogbmV3IEltcGwuaW1wbGVtZW50YXRpb24oZ2xvYmFsT2JqZWN0LCBjb25zdHJ1Y3RvckFyZ3MsIHByaXZhdGVEYXRhKSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG5cbiAgd3JhcHBlcltpbXBsU3ltYm9sXVt1dGlscy53cmFwcGVyU3ltYm9sXSA9IHdyYXBwZXI7XG4gIGlmIChJbXBsLmluaXQpIHtcbiAgICBJbXBsLmluaXQod3JhcHBlcltpbXBsU3ltYm9sXSk7XG4gIH1cbiAgcmV0dXJuIHdyYXBwZXI7XG59O1xuXG5leHBvcnRzLm5ldyA9IChnbG9iYWxPYmplY3QsIG5ld1RhcmdldCkgPT4ge1xuICBjb25zdCB3cmFwcGVyID0gbWFrZVdyYXBwZXIoZ2xvYmFsT2JqZWN0LCBuZXdUYXJnZXQpO1xuXG4gIGV4cG9ydHMuX2ludGVybmFsU2V0dXAod3JhcHBlciwgZ2xvYmFsT2JqZWN0KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBwZXIsIGltcGxTeW1ib2wsIHtcbiAgICB2YWx1ZTogT2JqZWN0LmNyZWF0ZShJbXBsLmltcGxlbWVudGF0aW9uLnByb3RvdHlwZSksXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuXG4gIHdyYXBwZXJbaW1wbFN5bWJvbF1bdXRpbHMud3JhcHBlclN5bWJvbF0gPSB3cmFwcGVyO1xuICBpZiAoSW1wbC5pbml0KSB7XG4gICAgSW1wbC5pbml0KHdyYXBwZXJbaW1wbFN5bWJvbF0pO1xuICB9XG4gIHJldHVybiB3cmFwcGVyW2ltcGxTeW1ib2xdO1xufTtcblxuY29uc3QgZXhwb3NlZCA9IG5ldyBTZXQoW1wiV2luZG93XCIsIFwiV29ya2VyXCJdKTtcblxuZXhwb3J0cy5pbnN0YWxsID0gKGdsb2JhbE9iamVjdCwgZ2xvYmFsTmFtZXMpID0+IHtcbiAgaWYgKCFnbG9iYWxOYW1lcy5zb21lKGdsb2JhbE5hbWUgPT4gZXhwb3NlZC5oYXMoZ2xvYmFsTmFtZSkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY3RvclJlZ2lzdHJ5ID0gdXRpbHMuaW5pdEN0b3JSZWdpc3RyeShnbG9iYWxPYmplY3QpO1xuICBjbGFzcyBVUkwge1xuICAgIGNvbnN0cnVjdG9yKHVybCkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gY29uc3RydWN0ICdVUkwnOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAke2FyZ3VtZW50cy5sZW5ndGh9IHByZXNlbnQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgYXJncyA9IFtdO1xuICAgICAge1xuICAgICAgICBsZXQgY3VyQXJnID0gYXJndW1lbnRzWzBdO1xuICAgICAgICBjdXJBcmcgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShjdXJBcmcsIHtcbiAgICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1VSTCc6IHBhcmFtZXRlciAxXCIsXG4gICAgICAgICAgZ2xvYmFsczogZ2xvYmFsT2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBhcmdzLnB1c2goY3VyQXJnKTtcbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgbGV0IGN1ckFyZyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgaWYgKGN1ckFyZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY3VyQXJnID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oY3VyQXJnLCB7XG4gICAgICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1VSTCc6IHBhcmFtZXRlciAyXCIsXG4gICAgICAgICAgICBnbG9iYWxzOiBnbG9iYWxPYmplY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnB1c2goY3VyQXJnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBleHBvcnRzLnNldHVwKE9iamVjdC5jcmVhdGUobmV3LnRhcmdldC5wcm90b3R5cGUpLCBnbG9iYWxPYmplY3QsIGFyZ3MpO1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCIndG9KU09OJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVzVmFsdWVbaW1wbFN5bWJvbF0udG9KU09OKCk7XG4gICAgfVxuXG4gICAgZ2V0IGhyZWYoKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuXG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInZ2V0IGhyZWYnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXNWYWx1ZVtpbXBsU3ltYm9sXVtcImhyZWZcIl07XG4gICAgfVxuXG4gICAgc2V0IGhyZWYoVikge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcblxuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ3NldCBocmVmJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMLlwiKTtcbiAgICAgIH1cblxuICAgICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYsIHtcbiAgICAgICAgY29udGV4dDogXCJGYWlsZWQgdG8gc2V0IHRoZSAnaHJlZicgcHJvcGVydHkgb24gJ1VSTCc6IFRoZSBwcm92aWRlZCB2YWx1ZVwiLFxuICAgICAgICBnbG9iYWxzOiBnbG9iYWxPYmplY3RcbiAgICAgIH0pO1xuXG4gICAgICBlc1ZhbHVlW2ltcGxTeW1ib2xdW1wiaHJlZlwiXSA9IFY7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcztcbiAgICAgIGlmICghZXhwb3J0cy5pcyhlc1ZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcIid0b1N0cmluZycgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTC5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlc1ZhbHVlW2ltcGxTeW1ib2xdW1wiaHJlZlwiXTtcbiAgICB9XG5cbiAgICBnZXQgb3JpZ2luKCkge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcblxuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ2dldCBvcmlnaW4nIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXNWYWx1ZVtpbXBsU3ltYm9sXVtcIm9yaWdpblwiXTtcbiAgICB9XG5cbiAgICBnZXQgcHJvdG9jb2woKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuXG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInZ2V0IHByb3RvY29sJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVzVmFsdWVbaW1wbFN5bWJvbF1bXCJwcm90b2NvbFwiXTtcbiAgICB9XG5cbiAgICBzZXQgcHJvdG9jb2woVikge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcblxuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ3NldCBwcm90b2NvbCcgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTC5cIik7XG4gICAgICB9XG5cbiAgICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWLCB7XG4gICAgICAgIGNvbnRleHQ6IFwiRmFpbGVkIHRvIHNldCB0aGUgJ3Byb3RvY29sJyBwcm9wZXJ0eSBvbiAnVVJMJzogVGhlIHByb3ZpZGVkIHZhbHVlXCIsXG4gICAgICAgIGdsb2JhbHM6IGdsb2JhbE9iamVjdFxuICAgICAgfSk7XG5cbiAgICAgIGVzVmFsdWVbaW1wbFN5bWJvbF1bXCJwcm90b2NvbFwiXSA9IFY7XG4gICAgfVxuXG4gICAgZ2V0IHVzZXJuYW1lKCkge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcblxuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ2dldCB1c2VybmFtZScgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTC5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlc1ZhbHVlW2ltcGxTeW1ib2xdW1widXNlcm5hbWVcIl07XG4gICAgfVxuXG4gICAgc2V0IHVzZXJuYW1lKFYpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG5cbiAgICAgIGlmICghZXhwb3J0cy5pcyhlc1ZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcIidzZXQgdXNlcm5hbWUnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oViwge1xuICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBzZXQgdGhlICd1c2VybmFtZScgcHJvcGVydHkgb24gJ1VSTCc6IFRoZSBwcm92aWRlZCB2YWx1ZVwiLFxuICAgICAgICBnbG9iYWxzOiBnbG9iYWxPYmplY3RcbiAgICAgIH0pO1xuXG4gICAgICBlc1ZhbHVlW2ltcGxTeW1ib2xdW1widXNlcm5hbWVcIl0gPSBWO1xuICAgIH1cblxuICAgIGdldCBwYXNzd29yZCgpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG5cbiAgICAgIGlmICghZXhwb3J0cy5pcyhlc1ZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcIidnZXQgcGFzc3dvcmQnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXNWYWx1ZVtpbXBsU3ltYm9sXVtcInBhc3N3b3JkXCJdO1xuICAgIH1cblxuICAgIHNldCBwYXNzd29yZChWKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuXG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInc2V0IHBhc3N3b3JkJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMLlwiKTtcbiAgICAgIH1cblxuICAgICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYsIHtcbiAgICAgICAgY29udGV4dDogXCJGYWlsZWQgdG8gc2V0IHRoZSAncGFzc3dvcmQnIHByb3BlcnR5IG9uICdVUkwnOiBUaGUgcHJvdmlkZWQgdmFsdWVcIixcbiAgICAgICAgZ2xvYmFsczogZ2xvYmFsT2JqZWN0XG4gICAgICB9KTtcblxuICAgICAgZXNWYWx1ZVtpbXBsU3ltYm9sXVtcInBhc3N3b3JkXCJdID0gVjtcbiAgICB9XG5cbiAgICBnZXQgaG9zdCgpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG5cbiAgICAgIGlmICghZXhwb3J0cy5pcyhlc1ZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcIidnZXQgaG9zdCcgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTC5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlc1ZhbHVlW2ltcGxTeW1ib2xdW1wiaG9zdFwiXTtcbiAgICB9XG5cbiAgICBzZXQgaG9zdChWKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuXG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInc2V0IGhvc3QnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oViwge1xuICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBzZXQgdGhlICdob3N0JyBwcm9wZXJ0eSBvbiAnVVJMJzogVGhlIHByb3ZpZGVkIHZhbHVlXCIsXG4gICAgICAgIGdsb2JhbHM6IGdsb2JhbE9iamVjdFxuICAgICAgfSk7XG5cbiAgICAgIGVzVmFsdWVbaW1wbFN5bWJvbF1bXCJob3N0XCJdID0gVjtcbiAgICB9XG5cbiAgICBnZXQgaG9zdG5hbWUoKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuXG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInZ2V0IGhvc3RuYW1lJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVzVmFsdWVbaW1wbFN5bWJvbF1bXCJob3N0bmFtZVwiXTtcbiAgICB9XG5cbiAgICBzZXQgaG9zdG5hbWUoVikge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcblxuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ3NldCBob3N0bmFtZScgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTC5cIik7XG4gICAgICB9XG5cbiAgICAgIFYgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShWLCB7XG4gICAgICAgIGNvbnRleHQ6IFwiRmFpbGVkIHRvIHNldCB0aGUgJ2hvc3RuYW1lJyBwcm9wZXJ0eSBvbiAnVVJMJzogVGhlIHByb3ZpZGVkIHZhbHVlXCIsXG4gICAgICAgIGdsb2JhbHM6IGdsb2JhbE9iamVjdFxuICAgICAgfSk7XG5cbiAgICAgIGVzVmFsdWVbaW1wbFN5bWJvbF1bXCJob3N0bmFtZVwiXSA9IFY7XG4gICAgfVxuXG4gICAgZ2V0IHBvcnQoKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuXG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInZ2V0IHBvcnQnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXNWYWx1ZVtpbXBsU3ltYm9sXVtcInBvcnRcIl07XG4gICAgfVxuXG4gICAgc2V0IHBvcnQoVikge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcblxuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ3NldCBwb3J0JyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMLlwiKTtcbiAgICAgIH1cblxuICAgICAgViA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKFYsIHtcbiAgICAgICAgY29udGV4dDogXCJGYWlsZWQgdG8gc2V0IHRoZSAncG9ydCcgcHJvcGVydHkgb24gJ1VSTCc6IFRoZSBwcm92aWRlZCB2YWx1ZVwiLFxuICAgICAgICBnbG9iYWxzOiBnbG9iYWxPYmplY3RcbiAgICAgIH0pO1xuXG4gICAgICBlc1ZhbHVlW2ltcGxTeW1ib2xdW1wicG9ydFwiXSA9IFY7XG4gICAgfVxuXG4gICAgZ2V0IHBhdGhuYW1lKCkge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcblxuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ2dldCBwYXRobmFtZScgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTC5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlc1ZhbHVlW2ltcGxTeW1ib2xdW1wicGF0aG5hbWVcIl07XG4gICAgfVxuXG4gICAgc2V0IHBhdGhuYW1lKFYpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG5cbiAgICAgIGlmICghZXhwb3J0cy5pcyhlc1ZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcIidzZXQgcGF0aG5hbWUnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oViwge1xuICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBzZXQgdGhlICdwYXRobmFtZScgcHJvcGVydHkgb24gJ1VSTCc6IFRoZSBwcm92aWRlZCB2YWx1ZVwiLFxuICAgICAgICBnbG9iYWxzOiBnbG9iYWxPYmplY3RcbiAgICAgIH0pO1xuXG4gICAgICBlc1ZhbHVlW2ltcGxTeW1ib2xdW1wicGF0aG5hbWVcIl0gPSBWO1xuICAgIH1cblxuICAgIGdldCBzZWFyY2goKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuXG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInZ2V0IHNlYXJjaCcgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTC5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlc1ZhbHVlW2ltcGxTeW1ib2xdW1wic2VhcmNoXCJdO1xuICAgIH1cblxuICAgIHNldCBzZWFyY2goVikge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcblxuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ3NldCBzZWFyY2gnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oViwge1xuICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBzZXQgdGhlICdzZWFyY2gnIHByb3BlcnR5IG9uICdVUkwnOiBUaGUgcHJvdmlkZWQgdmFsdWVcIixcbiAgICAgICAgZ2xvYmFsczogZ2xvYmFsT2JqZWN0XG4gICAgICB9KTtcblxuICAgICAgZXNWYWx1ZVtpbXBsU3ltYm9sXVtcInNlYXJjaFwiXSA9IFY7XG4gICAgfVxuXG4gICAgZ2V0IHNlYXJjaFBhcmFtcygpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG5cbiAgICAgIGlmICghZXhwb3J0cy5pcyhlc1ZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcIidnZXQgc2VhcmNoUGFyYW1zJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHV0aWxzLmdldFNhbWVPYmplY3QodGhpcywgXCJzZWFyY2hQYXJhbXNcIiwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdXRpbHMudHJ5V3JhcHBlckZvckltcGwoZXNWYWx1ZVtpbXBsU3ltYm9sXVtcInNlYXJjaFBhcmFtc1wiXSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXQgaGFzaCgpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG5cbiAgICAgIGlmICghZXhwb3J0cy5pcyhlc1ZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcIidnZXQgaGFzaCcgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTC5cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlc1ZhbHVlW2ltcGxTeW1ib2xdW1wiaGFzaFwiXTtcbiAgICB9XG5cbiAgICBzZXQgaGFzaChWKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuXG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInc2V0IGhhc2gnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkwuXCIpO1xuICAgICAgfVxuXG4gICAgICBWID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oViwge1xuICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBzZXQgdGhlICdoYXNoJyBwcm9wZXJ0eSBvbiAnVVJMJzogVGhlIHByb3ZpZGVkIHZhbHVlXCIsXG4gICAgICAgIGdsb2JhbHM6IGdsb2JhbE9iamVjdFxuICAgICAgfSk7XG5cbiAgICAgIGVzVmFsdWVbaW1wbFN5bWJvbF1bXCJoYXNoXCJdID0gVjtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVVJMLnByb3RvdHlwZSwge1xuICAgIHRvSlNPTjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgaHJlZjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgdG9TdHJpbmc6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIG9yaWdpbjogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgcHJvdG9jb2w6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIHVzZXJuYW1lOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgICBwYXNzd29yZDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgaG9zdDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgaG9zdG5hbWU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIHBvcnQ6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIHBhdGhuYW1lOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgICBzZWFyY2g6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIHNlYXJjaFBhcmFtczogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgaGFzaDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiVVJMXCIsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9XG4gIH0pO1xuICBjdG9yUmVnaXN0cnlbaW50ZXJmYWNlTmFtZV0gPSBVUkw7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbE9iamVjdCwgaW50ZXJmYWNlTmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogVVJMXG4gIH0pO1xuXG4gIGlmIChnbG9iYWxOYW1lcy5pbmNsdWRlcyhcIldpbmRvd1wiKSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxPYmplY3QsIFwid2Via2l0VVJMXCIsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IFVSTFxuICAgIH0pO1xuICB9XG59O1xuXG5jb25zdCBJbXBsID0gcmVxdWlyZShcIi4vVVJMLWltcGwuanNcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/URL.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/URLSearchParams-impl.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/URLSearchParams-impl.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst urlencoded = __webpack_require__(/*! ./urlencoded */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/urlencoded.js\");\n\nexports.implementation = class URLSearchParamsImpl {\n  constructor(globalObject, constructorArgs, { doNotStripQMark = false }) {\n    let init = constructorArgs[0];\n    this._list = [];\n    this._url = null;\n\n    if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n      init = init.slice(1);\n    }\n\n    if (Array.isArray(init)) {\n      for (const pair of init) {\n        if (pair.length !== 2) {\n          throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" +\n                              \"contain exactly two elements.\");\n        }\n        this._list.push([pair[0], pair[1]]);\n      }\n    } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n      for (const name of Object.keys(init)) {\n        const value = init[name];\n        this._list.push([name, value]);\n      }\n    } else {\n      this._list = urlencoded.parseUrlencodedString(init);\n    }\n  }\n\n  _updateSteps() {\n    if (this._url !== null) {\n      let query = urlencoded.serializeUrlencoded(this._list);\n      if (query === \"\") {\n        query = null;\n      }\n      this._url._url.query = query;\n    }\n  }\n\n  append(name, value) {\n    this._list.push([name, value]);\n    this._updateSteps();\n  }\n\n  delete(name) {\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        this._list.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n    this._updateSteps();\n  }\n\n  get(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return tuple[1];\n      }\n    }\n    return null;\n  }\n\n  getAll(name) {\n    const output = [];\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        output.push(tuple[1]);\n      }\n    }\n    return output;\n  }\n\n  has(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  set(name, value) {\n    let found = false;\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        if (found) {\n          this._list.splice(i, 1);\n        } else {\n          found = true;\n          this._list[i][1] = value;\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n    if (!found) {\n      this._list.push([name, value]);\n    }\n    this._updateSteps();\n  }\n\n  sort() {\n    this._list.sort((a, b) => {\n      if (a[0] < b[0]) {\n        return -1;\n      }\n      if (a[0] > b[0]) {\n        return 1;\n      }\n      return 0;\n    });\n\n    this._updateSteps();\n  }\n\n  [Symbol.iterator]() {\n    return this._list[Symbol.iterator]();\n  }\n\n  toString() {\n    return urlencoded.serializeUrlencoded(this._list);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL1VSTFNlYXJjaFBhcmFtcy1pbXBsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsbUJBQW1CLG1CQUFPLENBQUMsb0ZBQWM7O0FBRXpDLHNCQUFzQjtBQUN0QiwrQ0FBK0MseUJBQXlCO0FBQ3hFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi9VUkxTZWFyY2hQYXJhbXMtaW1wbC5qcz81ZDg4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgdXJsZW5jb2RlZCA9IHJlcXVpcmUoXCIuL3VybGVuY29kZWRcIik7XG5cbmV4cG9ydHMuaW1wbGVtZW50YXRpb24gPSBjbGFzcyBVUkxTZWFyY2hQYXJhbXNJbXBsIHtcbiAgY29uc3RydWN0b3IoZ2xvYmFsT2JqZWN0LCBjb25zdHJ1Y3RvckFyZ3MsIHsgZG9Ob3RTdHJpcFFNYXJrID0gZmFsc2UgfSkge1xuICAgIGxldCBpbml0ID0gY29uc3RydWN0b3JBcmdzWzBdO1xuICAgIHRoaXMuX2xpc3QgPSBbXTtcbiAgICB0aGlzLl91cmwgPSBudWxsO1xuXG4gICAgaWYgKCFkb05vdFN0cmlwUU1hcmsgJiYgdHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgJiYgaW5pdFswXSA9PT0gXCI/XCIpIHtcbiAgICAgIGluaXQgPSBpbml0LnNsaWNlKDEpO1xuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KGluaXQpKSB7XG4gICAgICBmb3IgKGNvbnN0IHBhaXIgb2YgaW5pdCkge1xuICAgICAgICBpZiAocGFpci5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnVVJMU2VhcmNoUGFyYW1zJzogcGFyYW1ldGVyIDEgc2VxdWVuY2UncyBlbGVtZW50IGRvZXMgbm90IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY29udGFpbiBleGFjdGx5IHR3byBlbGVtZW50cy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlzdC5wdXNoKFtwYWlyWzBdLCBwYWlyWzFdXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5pdCA9PT0gXCJvYmplY3RcIiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5pdCkgPT09IG51bGwpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhpbml0KSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGluaXRbbmFtZV07XG4gICAgICAgIHRoaXMuX2xpc3QucHVzaChbbmFtZSwgdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdCA9IHVybGVuY29kZWQucGFyc2VVcmxlbmNvZGVkU3RyaW5nKGluaXQpO1xuICAgIH1cbiAgfVxuXG4gIF91cGRhdGVTdGVwcygpIHtcbiAgICBpZiAodGhpcy5fdXJsICE9PSBudWxsKSB7XG4gICAgICBsZXQgcXVlcnkgPSB1cmxlbmNvZGVkLnNlcmlhbGl6ZVVybGVuY29kZWQodGhpcy5fbGlzdCk7XG4gICAgICBpZiAocXVlcnkgPT09IFwiXCIpIHtcbiAgICAgICAgcXVlcnkgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcy5fdXJsLl91cmwucXVlcnkgPSBxdWVyeTtcbiAgICB9XG4gIH1cblxuICBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLl9saXN0LnB1c2goW25hbWUsIHZhbHVlXSk7XG4gICAgdGhpcy5fdXBkYXRlU3RlcHMoKTtcbiAgfVxuXG4gIGRlbGV0ZShuYW1lKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgdGhpcy5fbGlzdC5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLl9saXN0W2ldWzBdID09PSBuYW1lKSB7XG4gICAgICAgIHRoaXMuX2xpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl91cGRhdGVTdGVwcygpO1xuICB9XG5cbiAgZ2V0KG5hbWUpIHtcbiAgICBmb3IgKGNvbnN0IHR1cGxlIG9mIHRoaXMuX2xpc3QpIHtcbiAgICAgIGlmICh0dXBsZVswXSA9PT0gbmFtZSkge1xuICAgICAgICByZXR1cm4gdHVwbGVbMV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0QWxsKG5hbWUpIHtcbiAgICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHR1cGxlIG9mIHRoaXMuX2xpc3QpIHtcbiAgICAgIGlmICh0dXBsZVswXSA9PT0gbmFtZSkge1xuICAgICAgICBvdXRwdXQucHVzaCh0dXBsZVsxXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cblxuICBoYXMobmFtZSkge1xuICAgIGZvciAoY29uc3QgdHVwbGUgb2YgdGhpcy5fbGlzdCkge1xuICAgICAgaWYgKHR1cGxlWzBdID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCB0aGlzLl9saXN0Lmxlbmd0aCkge1xuICAgICAgaWYgKHRoaXMuX2xpc3RbaV1bMF0gPT09IG5hbWUpIHtcbiAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuX2xpc3RbaV1bMV0gPSB2YWx1ZTtcbiAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3VuZCkge1xuICAgICAgdGhpcy5fbGlzdC5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xuICAgIH1cbiAgICB0aGlzLl91cGRhdGVTdGVwcygpO1xuICB9XG5cbiAgc29ydCgpIHtcbiAgICB0aGlzLl9saXN0LnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGlmIChhWzBdIDwgYlswXSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICBpZiAoYVswXSA+IGJbMF0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcblxuICAgIHRoaXMuX3VwZGF0ZVN0ZXBzKCk7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGlzdFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdXJsZW5jb2RlZC5zZXJpYWxpemVVcmxlbmNvZGVkKHRoaXMuX2xpc3QpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/URLSearchParams-impl.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/URLSearchParams.js":
/*!*********************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/URLSearchParams.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst conversions = __webpack_require__(/*! webidl-conversions */ \"(ssr)/../../../../../node_modules/webidl-conversions/lib/index.js\");\nconst utils = __webpack_require__(/*! ./utils.js */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/utils.js\");\n\nconst Function = __webpack_require__(/*! ./Function.js */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"URLSearchParams\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'URLSearchParams'.`);\n};\n\nexports.createDefaultIterator = (globalObject, target, kind) => {\n  const ctorRegistry = globalObject[ctorRegistrySymbol];\n  const iteratorPrototype = ctorRegistry[\"URLSearchParams Iterator\"];\n  const iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: { target, kind, index: 0 },\n    configurable: true\n  });\n  return iterator;\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"URLSearchParams\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports[\"new\"] = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class URLSearchParams {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          if (utils.isObject(curArg)) {\n            if (curArg[Symbol.iterator] !== undefined) {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\n                  \"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \" is not an iterable object.\"\n                );\n              } else {\n                const V = [];\n                const tmp = curArg;\n                for (let nextItem of tmp) {\n                  if (!utils.isObject(nextItem)) {\n                    throw new globalObject.TypeError(\n                      \"Failed to construct 'URLSearchParams': parameter 1\" +\n                        \" sequence\" +\n                        \"'s element\" +\n                        \" is not an iterable object.\"\n                    );\n                  } else {\n                    const V = [];\n                    const tmp = nextItem;\n                    for (let nextItem of tmp) {\n                      nextItem = conversions[\"USVString\"](nextItem, {\n                        context:\n                          \"Failed to construct 'URLSearchParams': parameter 1\" +\n                          \" sequence\" +\n                          \"'s element\" +\n                          \"'s element\",\n                        globals: globalObject\n                      });\n\n                      V.push(nextItem);\n                    }\n                    nextItem = V;\n                  }\n\n                  V.push(nextItem);\n                }\n                curArg = V;\n              }\n            } else {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\n                  \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \" is not an object.\"\n                );\n              } else {\n                const result = Object.create(null);\n                for (const key of Reflect.ownKeys(curArg)) {\n                  const desc = Object.getOwnPropertyDescriptor(curArg, key);\n                  if (desc && desc.enumerable) {\n                    let typedKey = key;\n\n                    typedKey = conversions[\"USVString\"](typedKey, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s key\",\n                      globals: globalObject\n                    });\n\n                    let typedValue = curArg[key];\n\n                    typedValue = conversions[\"USVString\"](typedValue, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s value\",\n                      globals: globalObject\n                    });\n\n                    result[typedKey] = typedValue;\n                  }\n                }\n                curArg = result;\n              }\n            }\n          } else {\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to construct 'URLSearchParams': parameter 1\",\n              globals: globalObject\n            });\n          }\n        } else {\n          curArg = \"\";\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    append(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'append' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'URLSearchParams': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].append(...args));\n    }\n\n    delete(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'delete' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].delete(...args));\n    }\n\n    get(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'get' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].get(...args);\n    }\n\n    getAll(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'getAll' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));\n    }\n\n    has(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'has' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].has(...args);\n    }\n\n    set(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'URLSearchParams': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].set(...args));\n    }\n\n    sort() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'sort' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      return utils.tryWrapperForImpl(esValue[implSymbol].sort());\n    }\n\n    toString() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'toString' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      return esValue[implSymbol].toString();\n    }\n\n    keys() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key\");\n    }\n\n    values() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'values' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      return exports.createDefaultIterator(globalObject, this, \"value\");\n    }\n\n    entries() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'entries' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key+value\");\n    }\n\n    forEach(callback) {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'forEach' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          \"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\"\n        );\n      }\n      callback = Function.convert(globalObject, callback, {\n        context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n      });\n      const thisArg = arguments[1];\n      let pairs = Array.from(this[implSymbol]);\n      let i = 0;\n      while (i < pairs.length) {\n        const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n        callback.call(thisArg, value, key, this);\n        pairs = Array.from(this[implSymbol]);\n        i++;\n      }\n    }\n  }\n  Object.defineProperties(URLSearchParams.prototype, {\n    append: { enumerable: true },\n    delete: { enumerable: true },\n    get: { enumerable: true },\n    getAll: { enumerable: true },\n    has: { enumerable: true },\n    set: { enumerable: true },\n    sort: { enumerable: true },\n    toString: { enumerable: true },\n    keys: { enumerable: true },\n    values: { enumerable: true },\n    entries: { enumerable: true },\n    forEach: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"URLSearchParams\", configurable: true },\n    [Symbol.iterator]: { value: URLSearchParams.prototype.entries, configurable: true, writable: true }\n  });\n  ctorRegistry[interfaceName] = URLSearchParams;\n\n  ctorRegistry[\"URLSearchParams Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n    [Symbol.toStringTag]: {\n      configurable: true,\n      value: \"URLSearchParams Iterator\"\n    }\n  });\n  utils.define(ctorRegistry[\"URLSearchParams Iterator\"], {\n    next() {\n      const internal = this && this[utils.iterInternalSymbol];\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a URLSearchParams iterator object\");\n      }\n\n      const { target, kind, index } = internal;\n      const values = Array.from(target[implSymbol]);\n      const len = values.length;\n      if (index >= len) {\n        return newObjectInRealm(globalObject, { value: undefined, done: true });\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: URLSearchParams\n  });\n};\n\nconst Impl = __webpack_require__(/*! ./URLSearchParams-impl.js */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/URLSearchParams-impl.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL1VSTFNlYXJjaFBhcmFtcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvQkFBb0IsbUJBQU8sQ0FBQyw2RkFBb0I7QUFDaEQsY0FBYyxtQkFBTyxDQUFDLDZFQUFZOztBQUVsQyxpQkFBaUIsbUJBQU8sQ0FBQyxtRkFBZTtBQUN4QztBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsVUFBVTtBQUNWO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGVBQWUsMkJBQTJCLGlDQUFpQyxJQUFJO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxTQUFTO0FBQy9DOztBQUVBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0JBQXdCO0FBQ3JDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCOztBQUV0QixhQUFhLGlFQUFpRTtBQUM5RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGNBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7O0FBRXZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCOztBQUVyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2RkFBNkYsa0JBQWtCO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRGQUE0RixrQkFBa0I7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5RkFBeUYsa0JBQWtCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRGQUE0RixrQkFBa0I7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5RkFBeUYsa0JBQWtCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEZBQTBGLGtCQUFrQjtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxrQkFBa0I7QUFDaEMsY0FBYyxrQkFBa0I7QUFDaEMsV0FBVyxrQkFBa0I7QUFDN0IsY0FBYyxrQkFBa0I7QUFDaEMsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxrQkFBa0I7QUFDN0IsWUFBWSxrQkFBa0I7QUFDOUIsZ0JBQWdCLGtCQUFrQjtBQUNsQyxZQUFZLGtCQUFrQjtBQUM5QixjQUFjLGtCQUFrQjtBQUNoQyxlQUFlLGtCQUFrQjtBQUNqQyxlQUFlLGtCQUFrQjtBQUNqQyw0QkFBNEIsOENBQThDO0FBQzFFLHlCQUF5QjtBQUN6QixHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYyxzQkFBc0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELDhCQUE4QjtBQUM5RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLDJHQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL2xpYi9VUkxTZWFyY2hQYXJhbXMuanM/MzRhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgY29udmVyc2lvbnMgPSByZXF1aXJlKFwid2ViaWRsLWNvbnZlcnNpb25zXCIpO1xuY29uc3QgdXRpbHMgPSByZXF1aXJlKFwiLi91dGlscy5qc1wiKTtcblxuY29uc3QgRnVuY3Rpb24gPSByZXF1aXJlKFwiLi9GdW5jdGlvbi5qc1wiKTtcbmNvbnN0IG5ld09iamVjdEluUmVhbG0gPSB1dGlscy5uZXdPYmplY3RJblJlYWxtO1xuY29uc3QgaW1wbFN5bWJvbCA9IHV0aWxzLmltcGxTeW1ib2w7XG5jb25zdCBjdG9yUmVnaXN0cnlTeW1ib2wgPSB1dGlscy5jdG9yUmVnaXN0cnlTeW1ib2w7XG5cbmNvbnN0IGludGVyZmFjZU5hbWUgPSBcIlVSTFNlYXJjaFBhcmFtc1wiO1xuXG5leHBvcnRzLmlzID0gdmFsdWUgPT4ge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QodmFsdWUpICYmIHV0aWxzLmhhc093bih2YWx1ZSwgaW1wbFN5bWJvbCkgJiYgdmFsdWVbaW1wbFN5bWJvbF0gaW5zdGFuY2VvZiBJbXBsLmltcGxlbWVudGF0aW9uO1xufTtcbmV4cG9ydHMuaXNJbXBsID0gdmFsdWUgPT4ge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QodmFsdWUpICYmIHZhbHVlIGluc3RhbmNlb2YgSW1wbC5pbXBsZW1lbnRhdGlvbjtcbn07XG5leHBvcnRzLmNvbnZlcnQgPSAoZ2xvYmFsT2JqZWN0LCB2YWx1ZSwgeyBjb250ZXh0ID0gXCJUaGUgcHJvdmlkZWQgdmFsdWVcIiB9ID0ge30pID0+IHtcbiAgaWYgKGV4cG9ydHMuaXModmFsdWUpKSB7XG4gICAgcmV0dXJuIHV0aWxzLmltcGxGb3JXcmFwcGVyKHZhbHVlKTtcbiAgfVxuICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihgJHtjb250ZXh0fSBpcyBub3Qgb2YgdHlwZSAnVVJMU2VhcmNoUGFyYW1zJy5gKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlRGVmYXVsdEl0ZXJhdG9yID0gKGdsb2JhbE9iamVjdCwgdGFyZ2V0LCBraW5kKSA9PiB7XG4gIGNvbnN0IGN0b3JSZWdpc3RyeSA9IGdsb2JhbE9iamVjdFtjdG9yUmVnaXN0cnlTeW1ib2xdO1xuICBjb25zdCBpdGVyYXRvclByb3RvdHlwZSA9IGN0b3JSZWdpc3RyeVtcIlVSTFNlYXJjaFBhcmFtcyBJdGVyYXRvclwiXTtcbiAgY29uc3QgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKGl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0ZXJhdG9yLCB1dGlscy5pdGVySW50ZXJuYWxTeW1ib2wsIHtcbiAgICB2YWx1ZTogeyB0YXJnZXQsIGtpbmQsIGluZGV4OiAwIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gaXRlcmF0b3I7XG59O1xuXG5mdW5jdGlvbiBtYWtlV3JhcHBlcihnbG9iYWxPYmplY3QsIG5ld1RhcmdldCkge1xuICBsZXQgcHJvdG87XG4gIGlmIChuZXdUYXJnZXQgIT09IHVuZGVmaW5lZCkge1xuICAgIHByb3RvID0gbmV3VGFyZ2V0LnByb3RvdHlwZTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3QocHJvdG8pKSB7XG4gICAgcHJvdG8gPSBnbG9iYWxPYmplY3RbY3RvclJlZ2lzdHJ5U3ltYm9sXVtcIlVSTFNlYXJjaFBhcmFtc1wiXS5wcm90b3R5cGU7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShwcm90byk7XG59XG5cbmV4cG9ydHMuY3JlYXRlID0gKGdsb2JhbE9iamVjdCwgY29uc3RydWN0b3JBcmdzLCBwcml2YXRlRGF0YSkgPT4ge1xuICBjb25zdCB3cmFwcGVyID0gbWFrZVdyYXBwZXIoZ2xvYmFsT2JqZWN0KTtcbiAgcmV0dXJuIGV4cG9ydHMuc2V0dXAod3JhcHBlciwgZ2xvYmFsT2JqZWN0LCBjb25zdHJ1Y3RvckFyZ3MsIHByaXZhdGVEYXRhKTtcbn07XG5cbmV4cG9ydHMuY3JlYXRlSW1wbCA9IChnbG9iYWxPYmplY3QsIGNvbnN0cnVjdG9yQXJncywgcHJpdmF0ZURhdGEpID0+IHtcbiAgY29uc3Qgd3JhcHBlciA9IGV4cG9ydHMuY3JlYXRlKGdsb2JhbE9iamVjdCwgY29uc3RydWN0b3JBcmdzLCBwcml2YXRlRGF0YSk7XG4gIHJldHVybiB1dGlscy5pbXBsRm9yV3JhcHBlcih3cmFwcGVyKTtcbn07XG5cbmV4cG9ydHMuX2ludGVybmFsU2V0dXAgPSAod3JhcHBlciwgZ2xvYmFsT2JqZWN0KSA9PiB7fTtcblxuZXhwb3J0cy5zZXR1cCA9ICh3cmFwcGVyLCBnbG9iYWxPYmplY3QsIGNvbnN0cnVjdG9yQXJncyA9IFtdLCBwcml2YXRlRGF0YSA9IHt9KSA9PiB7XG4gIHByaXZhdGVEYXRhLndyYXBwZXIgPSB3cmFwcGVyO1xuXG4gIGV4cG9ydHMuX2ludGVybmFsU2V0dXAod3JhcHBlciwgZ2xvYmFsT2JqZWN0KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBwZXIsIGltcGxTeW1ib2wsIHtcbiAgICB2YWx1ZTogbmV3IEltcGwuaW1wbGVtZW50YXRpb24oZ2xvYmFsT2JqZWN0LCBjb25zdHJ1Y3RvckFyZ3MsIHByaXZhdGVEYXRhKSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG5cbiAgd3JhcHBlcltpbXBsU3ltYm9sXVt1dGlscy53cmFwcGVyU3ltYm9sXSA9IHdyYXBwZXI7XG4gIGlmIChJbXBsLmluaXQpIHtcbiAgICBJbXBsLmluaXQod3JhcHBlcltpbXBsU3ltYm9sXSk7XG4gIH1cbiAgcmV0dXJuIHdyYXBwZXI7XG59O1xuXG5leHBvcnRzLm5ldyA9IChnbG9iYWxPYmplY3QsIG5ld1RhcmdldCkgPT4ge1xuICBjb25zdCB3cmFwcGVyID0gbWFrZVdyYXBwZXIoZ2xvYmFsT2JqZWN0LCBuZXdUYXJnZXQpO1xuXG4gIGV4cG9ydHMuX2ludGVybmFsU2V0dXAod3JhcHBlciwgZ2xvYmFsT2JqZWN0KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdyYXBwZXIsIGltcGxTeW1ib2wsIHtcbiAgICB2YWx1ZTogT2JqZWN0LmNyZWF0ZShJbXBsLmltcGxlbWVudGF0aW9uLnByb3RvdHlwZSksXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuXG4gIHdyYXBwZXJbaW1wbFN5bWJvbF1bdXRpbHMud3JhcHBlclN5bWJvbF0gPSB3cmFwcGVyO1xuICBpZiAoSW1wbC5pbml0KSB7XG4gICAgSW1wbC5pbml0KHdyYXBwZXJbaW1wbFN5bWJvbF0pO1xuICB9XG4gIHJldHVybiB3cmFwcGVyW2ltcGxTeW1ib2xdO1xufTtcblxuY29uc3QgZXhwb3NlZCA9IG5ldyBTZXQoW1wiV2luZG93XCIsIFwiV29ya2VyXCJdKTtcblxuZXhwb3J0cy5pbnN0YWxsID0gKGdsb2JhbE9iamVjdCwgZ2xvYmFsTmFtZXMpID0+IHtcbiAgaWYgKCFnbG9iYWxOYW1lcy5zb21lKGdsb2JhbE5hbWUgPT4gZXhwb3NlZC5oYXMoZ2xvYmFsTmFtZSkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY3RvclJlZ2lzdHJ5ID0gdXRpbHMuaW5pdEN0b3JSZWdpc3RyeShnbG9iYWxPYmplY3QpO1xuICBjbGFzcyBVUkxTZWFyY2hQYXJhbXMge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgY29uc3QgYXJncyA9IFtdO1xuICAgICAge1xuICAgICAgICBsZXQgY3VyQXJnID0gYXJndW1lbnRzWzBdO1xuICAgICAgICBpZiAoY3VyQXJnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAodXRpbHMuaXNPYmplY3QoY3VyQXJnKSkge1xuICAgICAgICAgICAgaWYgKGN1ckFyZ1tTeW1ib2wuaXRlcmF0b3JdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgaWYgKCF1dGlscy5pc09iamVjdChjdXJBcmcpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgICBcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1VSTFNlYXJjaFBhcmFtcyc6IHBhcmFtZXRlciAxXCIgKyBcIiBzZXF1ZW5jZVwiICsgXCIgaXMgbm90IGFuIGl0ZXJhYmxlIG9iamVjdC5cIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgViA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRtcCA9IGN1ckFyZztcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBuZXh0SXRlbSBvZiB0bXApIHtcbiAgICAgICAgICAgICAgICAgIGlmICghdXRpbHMuaXNPYmplY3QobmV4dEl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnVVJMU2VhcmNoUGFyYW1zJzogcGFyYW1ldGVyIDFcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBzZXF1ZW5jZVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiJ3MgZWxlbWVudFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiIGlzIG5vdCBhbiBpdGVyYWJsZSBvYmplY3QuXCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFYgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wID0gbmV4dEl0ZW07XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IG5leHRJdGVtIG9mIHRtcCkge1xuICAgICAgICAgICAgICAgICAgICAgIG5leHRJdGVtID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0obmV4dEl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnVVJMU2VhcmNoUGFyYW1zJzogcGFyYW1ldGVyIDFcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiIHNlcXVlbmNlXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIidzIGVsZW1lbnRcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiJ3MgZWxlbWVudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsczogZ2xvYmFsT2JqZWN0XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBWLnB1c2gobmV4dEl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtID0gVjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgVi5wdXNoKG5leHRJdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VyQXJnID0gVjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCF1dGlscy5pc09iamVjdChjdXJBcmcpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgICBcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1VSTFNlYXJjaFBhcmFtcyc6IHBhcmFtZXRlciAxXCIgKyBcIiByZWNvcmRcIiArIFwiIGlzIG5vdCBhbiBvYmplY3QuXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgUmVmbGVjdC5vd25LZXlzKGN1ckFyZykpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN1ckFyZywga2V5KTtcbiAgICAgICAgICAgICAgICAgIGlmIChkZXNjICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdHlwZWRLZXkgPSBrZXk7XG5cbiAgICAgICAgICAgICAgICAgICAgdHlwZWRLZXkgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXSh0eXBlZEtleSwge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnVVJMU2VhcmNoUGFyYW1zJzogcGFyYW1ldGVyIDFcIiArIFwiIHJlY29yZFwiICsgXCIncyBrZXlcIixcbiAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxzOiBnbG9iYWxPYmplY3RcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGVkVmFsdWUgPSBjdXJBcmdba2V5XTtcblxuICAgICAgICAgICAgICAgICAgICB0eXBlZFZhbHVlID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0odHlwZWRWYWx1ZSwge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnVVJMU2VhcmNoUGFyYW1zJzogcGFyYW1ldGVyIDFcIiArIFwiIHJlY29yZFwiICsgXCIncyB2YWx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbHM6IGdsb2JhbE9iamVjdFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXN1bHRbdHlwZWRLZXldID0gdHlwZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VyQXJnID0gcmVzdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1ckFyZyA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKGN1ckFyZywge1xuICAgICAgICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBjb25zdHJ1Y3QgJ1VSTFNlYXJjaFBhcmFtcyc6IHBhcmFtZXRlciAxXCIsXG4gICAgICAgICAgICAgIGdsb2JhbHM6IGdsb2JhbE9iamVjdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1ckFyZyA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgYXJncy5wdXNoKGN1ckFyZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXhwb3J0cy5zZXR1cChPYmplY3QuY3JlYXRlKG5ldy50YXJnZXQucHJvdG90eXBlKSwgZ2xvYmFsT2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXG4gICAgICAgICAgXCInYXBwZW5kJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMU2VhcmNoUGFyYW1zLlwiXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcbiAgICAgICAgICBgRmFpbGVkIHRvIGV4ZWN1dGUgJ2FwcGVuZCcgb24gJ1VSTFNlYXJjaFBhcmFtcyc6IDIgYXJndW1lbnRzIHJlcXVpcmVkLCBidXQgb25seSAke2FyZ3VtZW50cy5sZW5ndGh9IHByZXNlbnQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgYXJncyA9IFtdO1xuICAgICAge1xuICAgICAgICBsZXQgY3VyQXJnID0gYXJndW1lbnRzWzBdO1xuICAgICAgICBjdXJBcmcgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShjdXJBcmcsIHtcbiAgICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBleGVjdXRlICdhcHBlbmQnIG9uICdVUkxTZWFyY2hQYXJhbXMnOiBwYXJhbWV0ZXIgMVwiLFxuICAgICAgICAgIGdsb2JhbHM6IGdsb2JhbE9iamVjdFxuICAgICAgICB9KTtcbiAgICAgICAgYXJncy5wdXNoKGN1ckFyZyk7XG4gICAgICB9XG4gICAgICB7XG4gICAgICAgIGxldCBjdXJBcmcgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGN1ckFyZyA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKGN1ckFyZywge1xuICAgICAgICAgIGNvbnRleHQ6IFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ2FwcGVuZCcgb24gJ1VSTFNlYXJjaFBhcmFtcyc6IHBhcmFtZXRlciAyXCIsXG4gICAgICAgICAgZ2xvYmFsczogZ2xvYmFsT2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBhcmdzLnB1c2goY3VyQXJnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1dGlscy50cnlXcmFwcGVyRm9ySW1wbChlc1ZhbHVlW2ltcGxTeW1ib2xdLmFwcGVuZCguLi5hcmdzKSk7XG4gICAgfVxuXG4gICAgZGVsZXRlKG5hbWUpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXG4gICAgICAgICAgXCInZGVsZXRlJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMU2VhcmNoUGFyYW1zLlwiXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcbiAgICAgICAgICBgRmFpbGVkIHRvIGV4ZWN1dGUgJ2RlbGV0ZScgb24gJ1VSTFNlYXJjaFBhcmFtcyc6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5ICR7YXJndW1lbnRzLmxlbmd0aH0gcHJlc2VudC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBhcmdzID0gW107XG4gICAgICB7XG4gICAgICAgIGxldCBjdXJBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIGN1ckFyZyA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKGN1ckFyZywge1xuICAgICAgICAgIGNvbnRleHQ6IFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ2RlbGV0ZScgb24gJ1VSTFNlYXJjaFBhcmFtcyc6IHBhcmFtZXRlciAxXCIsXG4gICAgICAgICAgZ2xvYmFsczogZ2xvYmFsT2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBhcmdzLnB1c2goY3VyQXJnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1dGlscy50cnlXcmFwcGVyRm9ySW1wbChlc1ZhbHVlW2ltcGxTeW1ib2xdLmRlbGV0ZSguLi5hcmdzKSk7XG4gICAgfVxuXG4gICAgZ2V0KG5hbWUpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInZ2V0JyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMU2VhcmNoUGFyYW1zLlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gZXhlY3V0ZSAnZ2V0JyBvbiAnVVJMU2VhcmNoUGFyYW1zJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgJHthcmd1bWVudHMubGVuZ3RofSBwcmVzZW50LmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGFyZ3MgPSBbXTtcbiAgICAgIHtcbiAgICAgICAgbGV0IGN1ckFyZyA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgY3VyQXJnID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oY3VyQXJnLCB7XG4gICAgICAgICAgY29udGV4dDogXCJGYWlsZWQgdG8gZXhlY3V0ZSAnZ2V0JyBvbiAnVVJMU2VhcmNoUGFyYW1zJzogcGFyYW1ldGVyIDFcIixcbiAgICAgICAgICBnbG9iYWxzOiBnbG9iYWxPYmplY3RcbiAgICAgICAgfSk7XG4gICAgICAgIGFyZ3MucHVzaChjdXJBcmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVzVmFsdWVbaW1wbFN5bWJvbF0uZ2V0KC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIGdldEFsbChuYW1lKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFxuICAgICAgICAgIFwiJ2dldEFsbCcgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTFNlYXJjaFBhcmFtcy5cIlxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXG4gICAgICAgICAgYEZhaWxlZCB0byBleGVjdXRlICdnZXRBbGwnIG9uICdVUkxTZWFyY2hQYXJhbXMnOiAxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAke2FyZ3VtZW50cy5sZW5ndGh9IHByZXNlbnQuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgYXJncyA9IFtdO1xuICAgICAge1xuICAgICAgICBsZXQgY3VyQXJnID0gYXJndW1lbnRzWzBdO1xuICAgICAgICBjdXJBcmcgPSBjb252ZXJzaW9uc1tcIlVTVlN0cmluZ1wiXShjdXJBcmcsIHtcbiAgICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBleGVjdXRlICdnZXRBbGwnIG9uICdVUkxTZWFyY2hQYXJhbXMnOiBwYXJhbWV0ZXIgMVwiLFxuICAgICAgICAgIGdsb2JhbHM6IGdsb2JhbE9iamVjdFxuICAgICAgICB9KTtcbiAgICAgICAgYXJncy5wdXNoKGN1ckFyZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXRpbHMudHJ5V3JhcHBlckZvckltcGwoZXNWYWx1ZVtpbXBsU3ltYm9sXS5nZXRBbGwoLi4uYXJncykpO1xuICAgIH1cblxuICAgIGhhcyhuYW1lKSB7XG4gICAgICBjb25zdCBlc1ZhbHVlID0gdGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB1bmRlZmluZWQgPyB0aGlzIDogZ2xvYmFsT2JqZWN0O1xuICAgICAgaWYgKCFleHBvcnRzLmlzKGVzVmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ2hhcycgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTFNlYXJjaFBhcmFtcy5cIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcbiAgICAgICAgICBgRmFpbGVkIHRvIGV4ZWN1dGUgJ2hhcycgb24gJ1VSTFNlYXJjaFBhcmFtcyc6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5ICR7YXJndW1lbnRzLmxlbmd0aH0gcHJlc2VudC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBhcmdzID0gW107XG4gICAgICB7XG4gICAgICAgIGxldCBjdXJBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIGN1ckFyZyA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKGN1ckFyZywge1xuICAgICAgICAgIGNvbnRleHQ6IFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ2hhcycgb24gJ1VSTFNlYXJjaFBhcmFtcyc6IHBhcmFtZXRlciAxXCIsXG4gICAgICAgICAgZ2xvYmFsczogZ2xvYmFsT2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBhcmdzLnB1c2goY3VyQXJnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlc1ZhbHVlW2ltcGxTeW1ib2xdLmhhcyguLi5hcmdzKTtcbiAgICB9XG5cbiAgICBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCInc2V0JyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMU2VhcmNoUGFyYW1zLlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gZXhlY3V0ZSAnc2V0JyBvbiAnVVJMU2VhcmNoUGFyYW1zJzogMiBhcmd1bWVudHMgcmVxdWlyZWQsIGJ1dCBvbmx5ICR7YXJndW1lbnRzLmxlbmd0aH0gcHJlc2VudC5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBhcmdzID0gW107XG4gICAgICB7XG4gICAgICAgIGxldCBjdXJBcmcgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIGN1ckFyZyA9IGNvbnZlcnNpb25zW1wiVVNWU3RyaW5nXCJdKGN1ckFyZywge1xuICAgICAgICAgIGNvbnRleHQ6IFwiRmFpbGVkIHRvIGV4ZWN1dGUgJ3NldCcgb24gJ1VSTFNlYXJjaFBhcmFtcyc6IHBhcmFtZXRlciAxXCIsXG4gICAgICAgICAgZ2xvYmFsczogZ2xvYmFsT2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBhcmdzLnB1c2goY3VyQXJnKTtcbiAgICAgIH1cbiAgICAgIHtcbiAgICAgICAgbGV0IGN1ckFyZyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgY3VyQXJnID0gY29udmVyc2lvbnNbXCJVU1ZTdHJpbmdcIl0oY3VyQXJnLCB7XG4gICAgICAgICAgY29udGV4dDogXCJGYWlsZWQgdG8gZXhlY3V0ZSAnc2V0JyBvbiAnVVJMU2VhcmNoUGFyYW1zJzogcGFyYW1ldGVyIDJcIixcbiAgICAgICAgICBnbG9iYWxzOiBnbG9iYWxPYmplY3RcbiAgICAgICAgfSk7XG4gICAgICAgIGFyZ3MucHVzaChjdXJBcmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHV0aWxzLnRyeVdyYXBwZXJGb3JJbXBsKGVzVmFsdWVbaW1wbFN5bWJvbF0uc2V0KC4uLmFyZ3MpKTtcbiAgICB9XG5cbiAgICBzb3J0KCkge1xuICAgICAgY29uc3QgZXNWYWx1ZSA9IHRoaXMgIT09IG51bGwgJiYgdGhpcyAhPT0gdW5kZWZpbmVkID8gdGhpcyA6IGdsb2JhbE9iamVjdDtcbiAgICAgIGlmICghZXhwb3J0cy5pcyhlc1ZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcIidzb3J0JyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMU2VhcmNoUGFyYW1zLlwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHV0aWxzLnRyeVdyYXBwZXJGb3JJbXBsKGVzVmFsdWVbaW1wbFN5bWJvbF0uc29ydCgpKTtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgIGNvbnN0IGVzVmFsdWUgPSB0aGlzICE9PSBudWxsICYmIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBnbG9iYWxPYmplY3Q7XG4gICAgICBpZiAoIWV4cG9ydHMuaXMoZXNWYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXG4gICAgICAgICAgXCIndG9TdHJpbmcnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkxTZWFyY2hQYXJhbXMuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVzVmFsdWVbaW1wbFN5bWJvbF0udG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBrZXlzKCkge1xuICAgICAgaWYgKCFleHBvcnRzLmlzKHRoaXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFwiJ2tleXMnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkxTZWFyY2hQYXJhbXMuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV4cG9ydHMuY3JlYXRlRGVmYXVsdEl0ZXJhdG9yKGdsb2JhbE9iamVjdCwgdGhpcywgXCJrZXlcIik7XG4gICAgfVxuXG4gICAgdmFsdWVzKCkge1xuICAgICAgaWYgKCFleHBvcnRzLmlzKHRoaXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFxuICAgICAgICAgIFwiJ3ZhbHVlcycgY2FsbGVkIG9uIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhIHZhbGlkIGluc3RhbmNlIG9mIFVSTFNlYXJjaFBhcmFtcy5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV4cG9ydHMuY3JlYXRlRGVmYXVsdEl0ZXJhdG9yKGdsb2JhbE9iamVjdCwgdGhpcywgXCJ2YWx1ZVwiKTtcbiAgICB9XG5cbiAgICBlbnRyaWVzKCkge1xuICAgICAgaWYgKCFleHBvcnRzLmlzKHRoaXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBnbG9iYWxPYmplY3QuVHlwZUVycm9yKFxuICAgICAgICAgIFwiJ2VudHJpZXMnIGNhbGxlZCBvbiBhbiBvYmplY3QgdGhhdCBpcyBub3QgYSB2YWxpZCBpbnN0YW5jZSBvZiBVUkxTZWFyY2hQYXJhbXMuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBleHBvcnRzLmNyZWF0ZURlZmF1bHRJdGVyYXRvcihnbG9iYWxPYmplY3QsIHRoaXMsIFwia2V5K3ZhbHVlXCIpO1xuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2spIHtcbiAgICAgIGlmICghZXhwb3J0cy5pcyh0aGlzKSkge1xuICAgICAgICB0aHJvdyBuZXcgZ2xvYmFsT2JqZWN0LlR5cGVFcnJvcihcbiAgICAgICAgICBcIidmb3JFYWNoJyBjYWxsZWQgb24gYW4gb2JqZWN0IHRoYXQgaXMgbm90IGEgdmFsaWQgaW5zdGFuY2Ugb2YgVVJMU2VhcmNoUGFyYW1zLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXG4gICAgICAgICAgXCJGYWlsZWQgdG8gZXhlY3V0ZSAnZm9yRWFjaCcgb24gJ2l0ZXJhYmxlJzogMSBhcmd1bWVudCByZXF1aXJlZCwgYnV0IG9ubHkgMCBwcmVzZW50LlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjYWxsYmFjayA9IEZ1bmN0aW9uLmNvbnZlcnQoZ2xvYmFsT2JqZWN0LCBjYWxsYmFjaywge1xuICAgICAgICBjb250ZXh0OiBcIkZhaWxlZCB0byBleGVjdXRlICdmb3JFYWNoJyBvbiAnaXRlcmFibGUnOiBUaGUgY2FsbGJhY2sgcHJvdmlkZWQgYXMgcGFyYW1ldGVyIDFcIlxuICAgICAgfSk7XG4gICAgICBjb25zdCB0aGlzQXJnID0gYXJndW1lbnRzWzFdO1xuICAgICAgbGV0IHBhaXJzID0gQXJyYXkuZnJvbSh0aGlzW2ltcGxTeW1ib2xdKTtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgcGFpcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHBhaXJzW2ldLm1hcCh1dGlscy50cnlXcmFwcGVyRm9ySW1wbCk7XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdmFsdWUsIGtleSwgdGhpcyk7XG4gICAgICAgIHBhaXJzID0gQXJyYXkuZnJvbSh0aGlzW2ltcGxTeW1ib2xdKTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLCB7XG4gICAgYXBwZW5kOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgICBkZWxldGU6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIGdldDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgZ2V0QWxsOiB7IGVudW1lcmFibGU6IHRydWUgfSxcbiAgICBoYXM6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIHNldDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgc29ydDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgdG9TdHJpbmc6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIGtleXM6IHsgZW51bWVyYWJsZTogdHJ1ZSB9LFxuICAgIHZhbHVlczogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgZW50cmllczogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgZm9yRWFjaDogeyBlbnVtZXJhYmxlOiB0cnVlIH0sXG4gICAgW1N5bWJvbC50b1N0cmluZ1RhZ106IHsgdmFsdWU6IFwiVVJMU2VhcmNoUGFyYW1zXCIsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LFxuICAgIFtTeW1ib2wuaXRlcmF0b3JdOiB7IHZhbHVlOiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmVudHJpZXMsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfVxuICB9KTtcbiAgY3RvclJlZ2lzdHJ5W2ludGVyZmFjZU5hbWVdID0gVVJMU2VhcmNoUGFyYW1zO1xuXG4gIGN0b3JSZWdpc3RyeVtcIlVSTFNlYXJjaFBhcmFtcyBJdGVyYXRvclwiXSA9IE9iamVjdC5jcmVhdGUoY3RvclJlZ2lzdHJ5W1wiJUl0ZXJhdG9yUHJvdG90eXBlJVwiXSwge1xuICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB2YWx1ZTogXCJVUkxTZWFyY2hQYXJhbXMgSXRlcmF0b3JcIlxuICAgIH1cbiAgfSk7XG4gIHV0aWxzLmRlZmluZShjdG9yUmVnaXN0cnlbXCJVUkxTZWFyY2hQYXJhbXMgSXRlcmF0b3JcIl0sIHtcbiAgICBuZXh0KCkge1xuICAgICAgY29uc3QgaW50ZXJuYWwgPSB0aGlzICYmIHRoaXNbdXRpbHMuaXRlckludGVybmFsU3ltYm9sXTtcbiAgICAgIGlmICghaW50ZXJuYWwpIHtcbiAgICAgICAgdGhyb3cgbmV3IGdsb2JhbE9iamVjdC5UeXBlRXJyb3IoXCJuZXh0KCkgY2FsbGVkIG9uIGEgdmFsdWUgdGhhdCBpcyBub3QgYSBVUkxTZWFyY2hQYXJhbXMgaXRlcmF0b3Igb2JqZWN0XCIpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IHRhcmdldCwga2luZCwgaW5kZXggfSA9IGludGVybmFsO1xuICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuZnJvbSh0YXJnZXRbaW1wbFN5bWJvbF0pO1xuICAgICAgY29uc3QgbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgIGlmIChpbmRleCA+PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIG5ld09iamVjdEluUmVhbG0oZ2xvYmFsT2JqZWN0LCB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhaXIgPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgaW50ZXJuYWwuaW5kZXggPSBpbmRleCArIDE7XG4gICAgICByZXR1cm4gbmV3T2JqZWN0SW5SZWFsbShnbG9iYWxPYmplY3QsIHV0aWxzLml0ZXJhdG9yUmVzdWx0KHBhaXIubWFwKHV0aWxzLnRyeVdyYXBwZXJGb3JJbXBsKSwga2luZCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdsb2JhbE9iamVjdCwgaW50ZXJmYWNlTmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogVVJMU2VhcmNoUGFyYW1zXG4gIH0pO1xufTtcblxuY29uc3QgSW1wbCA9IHJlcXVpcmUoXCIuL1VSTFNlYXJjaFBhcmFtcy1pbXBsLmpzXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/URLSearchParams.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/encoding.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/encoding.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\nconst utf8Encoder = new TextEncoder();\nconst utf8Decoder = new TextDecoder(\"utf-8\", { ignoreBOM: true });\n\nfunction utf8Encode(string) {\n  return utf8Encoder.encode(string);\n}\n\nfunction utf8DecodeWithoutBOM(bytes) {\n  return utf8Decoder.decode(bytes);\n}\n\nmodule.exports = {\n  utf8Encode,\n  utf8DecodeWithoutBOM\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL2VuY29kaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSwrQ0FBK0MsaUJBQWlCOztBQUVoRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL2VuY29kaW5nLmpzPzRiNWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCB1dGY4RW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuY29uc3QgdXRmOERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoXCJ1dGYtOFwiLCB7IGlnbm9yZUJPTTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gdXRmOEVuY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHV0ZjhFbmNvZGVyLmVuY29kZShzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiB1dGY4RGVjb2RlV2l0aG91dEJPTShieXRlcykge1xuICByZXR1cm4gdXRmOERlY29kZXIuZGVjb2RlKGJ5dGVzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHV0ZjhFbmNvZGUsXG4gIHV0ZjhEZWNvZGVXaXRob3V0Qk9NXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/encoding.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/infra.js":
/*!***********************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/infra.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n\n// Note that we take code points as JS numbers, not JS strings.\n\nfunction isASCIIDigit(c) {\n  return c >= 0x30 && c <= 0x39;\n}\n\nfunction isASCIIAlpha(c) {\n  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);\n}\n\nfunction isASCIIAlphanumeric(c) {\n  return isASCIIAlpha(c) || isASCIIDigit(c);\n}\n\nfunction isASCIIHex(c) {\n  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);\n}\n\nmodule.exports = {\n  isASCIIDigit,\n  isASCIIAlpha,\n  isASCIIAlphanumeric,\n  isASCIIHex\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL2luZnJhLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvaW5mcmEuanM/M2I3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLy8gTm90ZSB0aGF0IHdlIHRha2UgY29kZSBwb2ludHMgYXMgSlMgbnVtYmVycywgbm90IEpTIHN0cmluZ3MuXG5cbmZ1bmN0aW9uIGlzQVNDSUlEaWdpdChjKSB7XG4gIHJldHVybiBjID49IDB4MzAgJiYgYyA8PSAweDM5O1xufVxuXG5mdW5jdGlvbiBpc0FTQ0lJQWxwaGEoYykge1xuICByZXR1cm4gKGMgPj0gMHg0MSAmJiBjIDw9IDB4NUEpIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKTtcbn1cblxuZnVuY3Rpb24gaXNBU0NJSUFscGhhbnVtZXJpYyhjKSB7XG4gIHJldHVybiBpc0FTQ0lJQWxwaGEoYykgfHwgaXNBU0NJSURpZ2l0KGMpO1xufVxuXG5mdW5jdGlvbiBpc0FTQ0lJSGV4KGMpIHtcbiAgcmV0dXJuIGlzQVNDSUlEaWdpdChjKSB8fCAoYyA+PSAweDQxICYmIGMgPD0gMHg0NikgfHwgKGMgPj0gMHg2MSAmJiBjIDw9IDB4NjYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBU0NJSURpZ2l0LFxuICBpc0FTQ0lJQWxwaGEsXG4gIGlzQVNDSUlBbHBoYW51bWVyaWMsXG4gIGlzQVNDSUlIZXhcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/infra.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/percent-encoding.js":
/*!**********************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/percent-encoding.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { isASCIIHex } = __webpack_require__(/*! ./infra */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/infra.js\");\nconst { utf8Encode } = __webpack_require__(/*! ./encoding */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/encoding.js\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#percent-encode\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = `0${hex}`;\n  }\n\n  return `%${hex}`;\n}\n\n// https://url.spec.whatwg.org/#percent-decode\nfunction percentDecodeBytes(input) {\n  const output = new Uint8Array(input.byteLength);\n  let outputIndex = 0;\n  for (let i = 0; i < input.byteLength; ++i) {\n    const byte = input[i];\n    if (byte !== 0x25) {\n      output[outputIndex++] = byte;\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n      output[outputIndex++] = byte;\n    } else {\n      const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n      output[outputIndex++] = bytePoint;\n      i += 2;\n    }\n  }\n\n  return output.slice(0, outputIndex);\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\nfunction percentDecodeString(input) {\n  const bytes = utf8Encode(input);\n  return percentDecodeBytes(bytes);\n}\n\n// https://url.spec.whatwg.org/#c0-control-percent-encode-set\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n}\n\n// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst extraFragmentPercentEncodeSet = new Set([p(\" \"), p(\"\\\"\"), p(\"<\"), p(\">\"), p(\"`\")]);\nfunction isFragmentPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#query-percent-encode-set\nconst extraQueryPercentEncodeSet = new Set([p(\" \"), p(\"\\\"\"), p(\"#\"), p(\"<\"), p(\">\")]);\nfunction isQueryPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#special-query-percent-encode-set\nfunction isSpecialQueryPercentEncode(c) {\n  return isQueryPercentEncode(c) || c === p(\"'\");\n}\n\n// https://url.spec.whatwg.org/#path-percent-encode-set\nconst extraPathPercentEncodeSet = new Set([p(\"?\"), p(\"`\"), p(\"{\"), p(\"}\")]);\nfunction isPathPercentEncode(c) {\n  return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#userinfo-percent-encode-set\nconst extraUserinfoPercentEncodeSet =\n  new Set([p(\"/\"), p(\":\"), p(\";\"), p(\"=\"), p(\"@\"), p(\"[\"), p(\"\\\\\"), p(\"]\"), p(\"^\"), p(\"|\")]);\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#component-percent-encode-set\nconst extraComponentPercentEncodeSet = new Set([p(\"$\"), p(\"%\"), p(\"&\"), p(\"+\"), p(\",\")]);\nfunction isComponentPercentEncode(c) {\n  return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\nconst extraURLEncodedPercentEncodeSet = new Set([p(\"!\"), p(\"'\"), p(\"(\"), p(\")\"), p(\"~\")]);\nfunction isURLEncodedPercentEncode(c) {\n  return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#utf-8-percent-encode\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\n// as JS numbers, like the rest of the codebase.\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\n  const bytes = utf8Encode(codePoint);\n  let output = \"\";\n  for (const byte of bytes) {\n    // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\n    if (!percentEncodePredicate(byte)) {\n      output += String.fromCharCode(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n\n  return output;\n}\n\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\n  return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\n}\n\n// https://url.spec.whatwg.org/#string-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\nfunction utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {\n  let output = \"\";\n  for (const codePoint of input) {\n    if (spaceAsPlus && codePoint === \" \") {\n      output += \"+\";\n    } else {\n      output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\n    }\n  }\n  return output;\n}\n\nmodule.exports = {\n  isC0ControlPercentEncode,\n  isFragmentPercentEncode,\n  isQueryPercentEncode,\n  isSpecialQueryPercentEncode,\n  isPathPercentEncode,\n  isUserinfoPercentEncode,\n  isURLEncodedPercentEncode,\n  percentDecodeString,\n  percentDecodeBytes,\n  utf8PercentEncodeString,\n  utf8PercentEncodeCodePoint\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/percent-encoding.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/url-state-machine.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/url-state-machine.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst tr46 = __webpack_require__(/*! tr46 */ \"(ssr)/../../../../../node_modules/tr46/index.js\");\n\nconst infra = __webpack_require__(/*! ./infra */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/infra.js\");\nconst { utf8DecodeWithoutBOM } = __webpack_require__(/*! ./encoding */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/encoding.js\");\nconst { percentDecodeString, utf8PercentEncodeCodePoint, utf8PercentEncodeString, isC0ControlPercentEncode,\n  isFragmentPercentEncode, isQueryPercentEncode, isSpecialQueryPercentEncode, isPathPercentEncode,\n  isUserinfoPercentEncode } = __webpack_require__(/*! ./percent-encoding */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/percent-encoding.js\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\nconst specialSchemes = {\n  ftp: 21,\n  file: null,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\n\nconst failure = Symbol(\"failure\");\n\nfunction countSymbols(str) {\n  return [...str].length;\n}\n\nfunction at(input, idx) {\n  const c = input[idx];\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\n\nfunction isSingleDot(buffer) {\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\n\nfunction isDoubleDot(buffer) {\n  buffer = buffer.toLowerCase();\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\n\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n  return infra.isASCIIAlpha(cp1) && (cp2 === p(\":\") || cp2 === p(\"|\"));\n}\n\nfunction isWindowsDriveLetterString(string) {\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\n\nfunction isNormalizedWindowsDriveLetterString(string) {\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\n\nfunction containsForbiddenHostCodePoint(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|%|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\n}\n\nfunction containsForbiddenHostCodePointExcludingPercent(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\n}\n\nfunction isSpecialScheme(scheme) {\n  return specialSchemes[scheme] !== undefined;\n}\n\nfunction isSpecial(url) {\n  return isSpecialScheme(url.scheme);\n}\n\nfunction isNotSpecial(url) {\n  return !isSpecialScheme(url.scheme);\n}\n\nfunction defaultPort(scheme) {\n  return specialSchemes[scheme];\n}\n\nfunction parseIPv4Number(input) {\n  if (input === \"\") {\n    return failure;\n  }\n\n  let R = 10;\n\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n    input = input.substring(2);\n    R = 16;\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n    input = input.substring(1);\n    R = 8;\n  }\n\n  if (input === \"\") {\n    return 0;\n  }\n\n  let regex = /[^0-7]/u;\n  if (R === 10) {\n    regex = /[^0-9]/u;\n  }\n  if (R === 16) {\n    regex = /[^0-9A-Fa-f]/u;\n  }\n\n  if (regex.test(input)) {\n    return failure;\n  }\n\n  return parseInt(input, R);\n}\n\nfunction parseIPv4(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length > 1) {\n      parts.pop();\n    }\n  }\n\n  if (parts.length > 4) {\n    return failure;\n  }\n\n  const numbers = [];\n  for (const part of parts) {\n    const n = parseIPv4Number(part);\n    if (n === failure) {\n      return failure;\n    }\n\n    numbers.push(n);\n  }\n\n  for (let i = 0; i < numbers.length - 1; ++i) {\n    if (numbers[i] > 255) {\n      return failure;\n    }\n  }\n  if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {\n    return failure;\n  }\n\n  let ipv4 = numbers.pop();\n  let counter = 0;\n\n  for (const n of numbers) {\n    ipv4 += n * 256 ** (3 - counter);\n    ++counter;\n  }\n\n  return ipv4;\n}\n\nfunction serializeIPv4(address) {\n  let output = \"\";\n  let n = address;\n\n  for (let i = 1; i <= 4; ++i) {\n    output = String(n % 256) + output;\n    if (i !== 4) {\n      output = `.${output}`;\n    }\n    n = Math.floor(n / 256);\n  }\n\n  return output;\n}\n\nfunction parseIPv6(input) {\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\n  let pieceIndex = 0;\n  let compress = null;\n  let pointer = 0;\n\n  input = Array.from(input, c => c.codePointAt(0));\n\n  if (input[pointer] === p(\":\")) {\n    if (input[pointer + 1] !== p(\":\")) {\n      return failure;\n    }\n\n    pointer += 2;\n    ++pieceIndex;\n    compress = pieceIndex;\n  }\n\n  while (pointer < input.length) {\n    if (pieceIndex === 8) {\n      return failure;\n    }\n\n    if (input[pointer] === p(\":\")) {\n      if (compress !== null) {\n        return failure;\n      }\n      ++pointer;\n      ++pieceIndex;\n      compress = pieceIndex;\n      continue;\n    }\n\n    let value = 0;\n    let length = 0;\n\n    while (length < 4 && infra.isASCIIHex(input[pointer])) {\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\n      ++pointer;\n      ++length;\n    }\n\n    if (input[pointer] === p(\".\")) {\n      if (length === 0) {\n        return failure;\n      }\n\n      pointer -= length;\n\n      if (pieceIndex > 6) {\n        return failure;\n      }\n\n      let numbersSeen = 0;\n\n      while (input[pointer] !== undefined) {\n        let ipv4Piece = null;\n\n        if (numbersSeen > 0) {\n          if (input[pointer] === p(\".\") && numbersSeen < 4) {\n            ++pointer;\n          } else {\n            return failure;\n          }\n        }\n\n        if (!infra.isASCIIDigit(input[pointer])) {\n          return failure;\n        }\n\n        while (infra.isASCIIDigit(input[pointer])) {\n          const number = parseInt(at(input, pointer));\n          if (ipv4Piece === null) {\n            ipv4Piece = number;\n          } else if (ipv4Piece === 0) {\n            return failure;\n          } else {\n            ipv4Piece = ipv4Piece * 10 + number;\n          }\n          if (ipv4Piece > 255) {\n            return failure;\n          }\n          ++pointer;\n        }\n\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n\n        ++numbersSeen;\n\n        if (numbersSeen === 2 || numbersSeen === 4) {\n          ++pieceIndex;\n        }\n      }\n\n      if (numbersSeen !== 4) {\n        return failure;\n      }\n\n      break;\n    } else if (input[pointer] === p(\":\")) {\n      ++pointer;\n      if (input[pointer] === undefined) {\n        return failure;\n      }\n    } else if (input[pointer] !== undefined) {\n      return failure;\n    }\n\n    address[pieceIndex] = value;\n    ++pieceIndex;\n  }\n\n  if (compress !== null) {\n    let swaps = pieceIndex - compress;\n    pieceIndex = 7;\n    while (pieceIndex !== 0 && swaps > 0) {\n      const temp = address[compress + swaps - 1];\n      address[compress + swaps - 1] = address[pieceIndex];\n      address[pieceIndex] = temp;\n      --pieceIndex;\n      --swaps;\n    }\n  } else if (compress === null && pieceIndex !== 8) {\n    return failure;\n  }\n\n  return address;\n}\n\nfunction serializeIPv6(address) {\n  let output = \"\";\n  const compress = findLongestZeroSequence(address);\n  let ignore0 = false;\n\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\n    if (ignore0 && address[pieceIndex] === 0) {\n      continue;\n    } else if (ignore0) {\n      ignore0 = false;\n    }\n\n    if (compress === pieceIndex) {\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\n      output += separator;\n      ignore0 = true;\n      continue;\n    }\n\n    output += address[pieceIndex].toString(16);\n\n    if (pieceIndex !== 7) {\n      output += \":\";\n    }\n  }\n\n  return output;\n}\n\nfunction parseHost(input, isNotSpecialArg = false) {\n  if (input[0] === \"[\") {\n    if (input[input.length - 1] !== \"]\") {\n      return failure;\n    }\n\n    return parseIPv6(input.substring(1, input.length - 1));\n  }\n\n  if (isNotSpecialArg) {\n    return parseOpaqueHost(input);\n  }\n\n  const domain = utf8DecodeWithoutBOM(percentDecodeString(input));\n  const asciiDomain = domainToASCII(domain);\n  if (asciiDomain === failure) {\n    return failure;\n  }\n\n  if (containsForbiddenHostCodePoint(asciiDomain)) {\n    return failure;\n  }\n\n  if (endsInANumber(asciiDomain)) {\n    return parseIPv4(asciiDomain);\n  }\n\n  return asciiDomain;\n}\n\nfunction endsInANumber(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length === 1) {\n      return false;\n    }\n    parts.pop();\n  }\n\n  const last = parts[parts.length - 1];\n  if (parseIPv4Number(last) !== failure) {\n    return true;\n  }\n\n  if (/^[0-9]+$/u.test(last)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction parseOpaqueHost(input) {\n  if (containsForbiddenHostCodePointExcludingPercent(input)) {\n    return failure;\n  }\n\n  return utf8PercentEncodeString(input, isC0ControlPercentEncode);\n}\n\nfunction findLongestZeroSequence(arr) {\n  let maxIdx = null;\n  let maxLen = 1; // only find elements > 1\n  let currStart = null;\n  let currLen = 0;\n\n  for (let i = 0; i < arr.length; ++i) {\n    if (arr[i] !== 0) {\n      if (currLen > maxLen) {\n        maxIdx = currStart;\n        maxLen = currLen;\n      }\n\n      currStart = null;\n      currLen = 0;\n    } else {\n      if (currStart === null) {\n        currStart = i;\n      }\n      ++currLen;\n    }\n  }\n\n  // if trailing zeros\n  if (currLen > maxLen) {\n    return currStart;\n  }\n\n  return maxIdx;\n}\n\nfunction serializeHost(host) {\n  if (typeof host === \"number\") {\n    return serializeIPv4(host);\n  }\n\n  // IPv6 serializer\n  if (host instanceof Array) {\n    return `[${serializeIPv6(host)}]`;\n  }\n\n  return host;\n}\n\nfunction domainToASCII(domain, beStrict = false) {\n  const result = tr46.toASCII(domain, {\n    checkBidi: true,\n    checkHyphens: false,\n    checkJoiners: true,\n    useSTD3ASCIIRules: beStrict,\n    verifyDNSLength: beStrict\n  });\n  if (result === null || result === \"\") {\n    return failure;\n  }\n  return result;\n}\n\nfunction trimControlChars(url) {\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/ug, \"\");\n}\n\nfunction trimTabAndNewline(url) {\n  return url.replace(/\\u0009|\\u000A|\\u000D/ug, \"\");\n}\n\nfunction shortenPath(url) {\n  const { path } = url;\n  if (path.length === 0) {\n    return;\n  }\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n    return;\n  }\n\n  path.pop();\n}\n\nfunction includesCredentials(url) {\n  return url.username !== \"\" || url.password !== \"\";\n}\n\nfunction cannotHaveAUsernamePasswordPort(url) {\n  return url.host === null || url.host === \"\" || hasAnOpaquePath(url) || url.scheme === \"file\";\n}\n\nfunction hasAnOpaquePath(url) {\n  return typeof url.path === \"string\";\n}\n\nfunction isNormalizedWindowsDriveLetter(string) {\n  return /^[A-Za-z]:$/u.test(string);\n}\n\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n  this.pointer = 0;\n  this.input = input;\n  this.base = base || null;\n  this.encodingOverride = encodingOverride || \"utf-8\";\n  this.stateOverride = stateOverride;\n  this.url = url;\n  this.failure = false;\n  this.parseError = false;\n\n  if (!this.url) {\n    this.url = {\n      scheme: \"\",\n      username: \"\",\n      password: \"\",\n      host: null,\n      port: null,\n      path: [],\n      query: null,\n      fragment: null\n    };\n\n    const res = trimControlChars(this.input);\n    if (res !== this.input) {\n      this.parseError = true;\n    }\n    this.input = res;\n  }\n\n  const res = trimTabAndNewline(this.input);\n  if (res !== this.input) {\n    this.parseError = true;\n  }\n  this.input = res;\n\n  this.state = stateOverride || \"scheme start\";\n\n  this.buffer = \"\";\n  this.atFlag = false;\n  this.arrFlag = false;\n  this.passwordTokenSeenFlag = false;\n\n  this.input = Array.from(this.input, c => c.codePointAt(0));\n\n  for (; this.pointer <= this.input.length; ++this.pointer) {\n    const c = this.input[this.pointer];\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n\n    // exec state machine\n    const ret = this[`parse ${this.state}`](c, cStr);\n    if (!ret) {\n      break; // terminate algorithm\n    } else if (ret === failure) {\n      this.failure = true;\n      break;\n    }\n  }\n}\n\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n  if (infra.isASCIIAlpha(c)) {\n    this.buffer += cStr.toLowerCase();\n    this.state = \"scheme\";\n  } else if (!this.stateOverride) {\n    this.state = \"no scheme\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n  if (infra.isASCIIAlphanumeric(c) || c === p(\"+\") || c === p(\"-\") || c === p(\".\")) {\n    this.buffer += cStr.toLowerCase();\n  } else if (c === p(\":\")) {\n    if (this.stateOverride) {\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n        return false;\n      }\n\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n        return false;\n      }\n\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n        return false;\n      }\n\n      if (this.url.scheme === \"file\" && this.url.host === \"\") {\n        return false;\n      }\n    }\n    this.url.scheme = this.buffer;\n    if (this.stateOverride) {\n      if (this.url.port === defaultPort(this.url.scheme)) {\n        this.url.port = null;\n      }\n      return false;\n    }\n    this.buffer = \"\";\n    if (this.url.scheme === \"file\") {\n      if (this.input[this.pointer + 1] !== p(\"/\") || this.input[this.pointer + 2] !== p(\"/\")) {\n        this.parseError = true;\n      }\n      this.state = \"file\";\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n      this.state = \"special relative or authority\";\n    } else if (isSpecial(this.url)) {\n      this.state = \"special authority slashes\";\n    } else if (this.input[this.pointer + 1] === p(\"/\")) {\n      this.state = \"path or authority\";\n      ++this.pointer;\n    } else {\n      this.url.path = \"\";\n      this.state = \"opaque path\";\n    }\n  } else if (!this.stateOverride) {\n    this.buffer = \"\";\n    this.state = \"no scheme\";\n    this.pointer = -1;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n  if (this.base === null || (hasAnOpaquePath(this.base) && c !== p(\"#\"))) {\n    return failure;\n  } else if (hasAnOpaquePath(this.base) && c === p(\"#\")) {\n    this.url.scheme = this.base.scheme;\n    this.url.path = this.base.path;\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (this.base.scheme === \"file\") {\n    this.state = \"file\";\n    --this.pointer;\n  } else {\n    this.state = \"relative\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n  if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"relative\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n  if (c === p(\"/\")) {\n    this.state = \"authority\";\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n  this.url.scheme = this.base.scheme;\n  if (c === p(\"/\")) {\n    this.state = \"relative slash\";\n  } else if (isSpecial(this.url) && c === p(\"\\\\\")) {\n    this.parseError = true;\n    this.state = \"relative slash\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else if (!isNaN(c)) {\n      this.url.query = null;\n      this.url.path.pop();\n      this.state = \"path\";\n      --this.pointer;\n    }\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n  if (isSpecial(this.url) && (c === p(\"/\") || c === p(\"\\\\\"))) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"special authority ignore slashes\";\n  } else if (c === p(\"/\")) {\n    this.state = \"authority\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n  if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"special authority ignore slashes\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n  if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n    this.state = \"authority\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n  if (c === p(\"@\")) {\n    this.parseError = true;\n    if (this.atFlag) {\n      this.buffer = `%40${this.buffer}`;\n    }\n    this.atFlag = true;\n\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n    const len = countSymbols(this.buffer);\n    for (let pointer = 0; pointer < len; ++pointer) {\n      const codePoint = this.buffer.codePointAt(pointer);\n\n      if (codePoint === p(\":\") && !this.passwordTokenSeenFlag) {\n        this.passwordTokenSeenFlag = true;\n        continue;\n      }\n      const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);\n      if (this.passwordTokenSeenFlag) {\n        this.url.password += encodedCodePoints;\n      } else {\n        this.url.username += encodedCodePoints;\n      }\n    }\n    this.buffer = \"\";\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\"))) {\n    if (this.atFlag && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    this.pointer -= countSymbols(this.buffer) + 1;\n    this.buffer = \"\";\n    this.state = \"host\";\n  } else {\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse hostname\"] =\nURLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n  if (this.stateOverride && this.url.scheme === \"file\") {\n    --this.pointer;\n    this.state = \"file host\";\n  } else if (c === p(\":\") && !this.arrFlag) {\n    if (this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n\n    if (this.stateOverride === \"hostname\") {\n      return false;\n    }\n\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"port\";\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\"))) {\n    --this.pointer;\n    if (isSpecial(this.url) && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    } else if (this.stateOverride && this.buffer === \"\" &&\n               (includesCredentials(this.url) || this.url.port !== null)) {\n      this.parseError = true;\n      return false;\n    }\n\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"path start\";\n    if (this.stateOverride) {\n      return false;\n    }\n  } else {\n    if (c === p(\"[\")) {\n      this.arrFlag = true;\n    } else if (c === p(\"]\")) {\n      this.arrFlag = false;\n    }\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n  if (infra.isASCIIDigit(c)) {\n    this.buffer += cStr;\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\")) ||\n             this.stateOverride) {\n    if (this.buffer !== \"\") {\n      const port = parseInt(this.buffer);\n      if (port > 2 ** 16 - 1) {\n        this.parseError = true;\n        return failure;\n      }\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n      this.buffer = \"\";\n    }\n    if (this.stateOverride) {\n      return false;\n    }\n    this.state = \"path start\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nconst fileOtherwiseCodePoints = new Set([p(\"/\"), p(\"\\\\\"), p(\"?\"), p(\"#\")]);\n\nfunction startsWithWindowsDriveLetter(input, pointer) {\n  const length = input.length - pointer;\n  return length >= 2 &&\n    isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) &&\n    (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));\n}\n\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n  this.url.scheme = \"file\";\n  this.url.host = \"\";\n\n  if (c === p(\"/\") || c === p(\"\\\\\")) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"file slash\";\n  } else if (this.base !== null && this.base.scheme === \"file\") {\n    this.url.host = this.base.host;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else if (!isNaN(c)) {\n      this.url.query = null;\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {\n        shortenPath(this.url);\n      } else {\n        this.parseError = true;\n        this.url.path = [];\n      }\n\n      this.state = \"path\";\n      --this.pointer;\n    }\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n  if (c === p(\"/\") || c === p(\"\\\\\")) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"file host\";\n  } else {\n    if (this.base !== null && this.base.scheme === \"file\") {\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer) &&\n          isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n        this.url.path.push(this.base.path[0]);\n      }\n      this.url.host = this.base.host;\n    }\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n  if (isNaN(c) || c === p(\"/\") || c === p(\"\\\\\") || c === p(\"?\") || c === p(\"#\")) {\n    --this.pointer;\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n      this.parseError = true;\n      this.state = \"path\";\n    } else if (this.buffer === \"\") {\n      this.url.host = \"\";\n      if (this.stateOverride) {\n        return false;\n      }\n      this.state = \"path start\";\n    } else {\n      let host = parseHost(this.buffer, isNotSpecial(this.url));\n      if (host === failure) {\n        return failure;\n      }\n      if (host === \"localhost\") {\n        host = \"\";\n      }\n      this.url.host = host;\n\n      if (this.stateOverride) {\n        return false;\n      }\n\n      this.buffer = \"\";\n      this.state = \"path start\";\n    }\n  } else {\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n  if (isSpecial(this.url)) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"path\";\n\n    if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n      --this.pointer;\n    }\n  } else if (!this.stateOverride && c === p(\"?\")) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (!this.stateOverride && c === p(\"#\")) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (c !== undefined) {\n    this.state = \"path\";\n    if (c !== p(\"/\")) {\n      --this.pointer;\n    }\n  } else if (this.stateOverride && this.url.host === null) {\n    this.url.path.push(\"\");\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n  if (isNaN(c) || c === p(\"/\") || (isSpecial(this.url) && c === p(\"\\\\\")) ||\n      (!this.stateOverride && (c === p(\"?\") || c === p(\"#\")))) {\n    if (isSpecial(this.url) && c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n\n    if (isDoubleDot(this.buffer)) {\n      shortenPath(this.url);\n      if (c !== p(\"/\") && !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n        this.url.path.push(\"\");\n      }\n    } else if (isSingleDot(this.buffer) && c !== p(\"/\") &&\n               !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n      this.url.path.push(\"\");\n    } else if (!isSingleDot(this.buffer)) {\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n        this.buffer = `${this.buffer[0]}:`;\n      }\n      this.url.path.push(this.buffer);\n    }\n    this.buffer = \"\";\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    }\n    if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse opaque path\"] = function parseOpaquePath(c) {\n  if (c === p(\"?\")) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === p(\"#\")) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else {\n    // TODO: Add: not a URL code point\n    if (!isNaN(c) && c !== p(\"%\")) {\n      this.parseError = true;\n    }\n\n    if (c === p(\"%\") &&\n        (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n         !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    if (!isNaN(c)) {\n      this.url.path += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);\n    }\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n  if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n    this.encodingOverride = \"utf-8\";\n  }\n\n  if ((!this.stateOverride && c === p(\"#\")) || isNaN(c)) {\n    const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;\n    this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);\n\n    this.buffer = \"\";\n\n    if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else if (!isNaN(c)) {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n  if (!isNaN(c)) {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);\n  }\n\n  return true;\n};\n\nfunction serializeURL(url, excludeFragment) {\n  let output = `${url.scheme}:`;\n  if (url.host !== null) {\n    output += \"//\";\n\n    if (url.username !== \"\" || url.password !== \"\") {\n      output += url.username;\n      if (url.password !== \"\") {\n        output += `:${url.password}`;\n      }\n      output += \"@\";\n    }\n\n    output += serializeHost(url.host);\n\n    if (url.port !== null) {\n      output += `:${url.port}`;\n    }\n  }\n\n  if (url.host === null && !hasAnOpaquePath(url) && url.path.length > 1 && url.path[0] === \"\") {\n    output += \"/.\";\n  }\n  output += serializePath(url);\n\n  if (url.query !== null) {\n    output += `?${url.query}`;\n  }\n\n  if (!excludeFragment && url.fragment !== null) {\n    output += `#${url.fragment}`;\n  }\n\n  return output;\n}\n\nfunction serializeOrigin(tuple) {\n  let result = `${tuple.scheme}://`;\n  result += serializeHost(tuple.host);\n\n  if (tuple.port !== null) {\n    result += `:${tuple.port}`;\n  }\n\n  return result;\n}\n\nfunction serializePath(url) {\n  if (hasAnOpaquePath(url)) {\n    return url.path;\n  }\n\n  let output = \"\";\n  for (const segment of url.path) {\n    output += `/${segment}`;\n  }\n  return output;\n}\n\nmodule.exports.serializeURL = serializeURL;\n\nmodule.exports.serializePath = serializePath;\n\nmodule.exports.serializeURLOrigin = function (url) {\n  // https://url.spec.whatwg.org/#concept-url-origin\n  switch (url.scheme) {\n    case \"blob\":\n      try {\n        return module.exports.serializeURLOrigin(module.exports.parseURL(serializePath(url)));\n      } catch (e) {\n        // serializing an opaque origin returns \"null\"\n        return \"null\";\n      }\n    case \"ftp\":\n    case \"http\":\n    case \"https\":\n    case \"ws\":\n    case \"wss\":\n      return serializeOrigin({\n        scheme: url.scheme,\n        host: url.host,\n        port: url.port\n      });\n    case \"file\":\n      // The spec says:\n      // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.\n      // Browsers tested so far:\n      // - Chrome says \"file://\", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.\n      //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586\n      // - Firefox says \"null\", but treats file: URLs as same-origin sometimes based on directory stuff; see\n      //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\n      return \"null\";\n    default:\n      // serializing an opaque origin returns \"null\"\n      return \"null\";\n  }\n};\n\nmodule.exports.basicURLParse = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n  if (usm.failure) {\n    return null;\n  }\n\n  return usm.url;\n};\n\nmodule.exports.setTheUsername = function (url, username) {\n  url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);\n};\n\nmodule.exports.setThePassword = function (url, password) {\n  url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);\n};\n\nmodule.exports.serializeHost = serializeHost;\n\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\n\nmodule.exports.hasAnOpaquePath = hasAnOpaquePath;\n\nmodule.exports.serializeInteger = function (integer) {\n  return String(integer);\n};\n\nmodule.exports.parseURL = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  // We don't handle blobs, so this just delegates:\n  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/url-state-machine.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/urlencoded.js":
/*!****************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/urlencoded.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { utf8Encode, utf8DecodeWithoutBOM } = __webpack_require__(/*! ./encoding */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/encoding.js\");\nconst { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = __webpack_require__(/*! ./percent-encoding */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/percent-encoding.js\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, p(\"&\"));\n  const output = [];\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name, value;\n    const indexOfEqual = bytes.indexOf(p(\"=\"));\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = new Uint8Array(0);\n    }\n\n    name = replaceByteInByteSequence(name, 0x2B, 0x20);\n    value = replaceByteInByteSequence(value, 0x2B, 0x20);\n\n    const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n    const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n\n    output.push([nameString, valueString]);\n  }\n  return output;\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n  return parseUrlencoded(utf8Encode(input));\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n  let encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n    encoding = encodingOverride;\n  }\n\n  let output = \"\";\n  for (const [i, tuple] of tuples.entries()) {\n    // TODO: handle encoding override\n\n    const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n\n    let value = tuple[1];\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n\n    value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n\n    if (i !== 0) {\n      output += \"&\";\n    }\n    output += `${name}=${value}`;\n  }\n  return output;\n}\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\n\nmodule.exports = {\n  parseUrlencodedString,\n  serializeUrlencoded\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvbGliL3VybGVuY29kZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixRQUFRLG1DQUFtQyxFQUFFLG1CQUFPLENBQUMsZ0ZBQVk7QUFDakUsUUFBUSx5RUFBeUUsRUFBRSxtQkFBTyxDQUFDLGdHQUFvQjs7QUFFL0c7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLEtBQUssR0FBRyxNQUFNO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvd2hhdHdnLXVybC9saWIvdXJsZW5jb2RlZC5qcz80YmE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgeyB1dGY4RW5jb2RlLCB1dGY4RGVjb2RlV2l0aG91dEJPTSB9ID0gcmVxdWlyZShcIi4vZW5jb2RpbmdcIik7XG5jb25zdCB7IHBlcmNlbnREZWNvZGVCeXRlcywgdXRmOFBlcmNlbnRFbmNvZGVTdHJpbmcsIGlzVVJMRW5jb2RlZFBlcmNlbnRFbmNvZGUgfSA9IHJlcXVpcmUoXCIuL3BlcmNlbnQtZW5jb2RpbmdcIik7XG5cbmZ1bmN0aW9uIHAoY2hhcikge1xuICByZXR1cm4gY2hhci5jb2RlUG9pbnRBdCgwKTtcbn1cblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXVybGVuY29kZWQtcGFyc2VyXG5mdW5jdGlvbiBwYXJzZVVybGVuY29kZWQoaW5wdXQpIHtcbiAgY29uc3Qgc2VxdWVuY2VzID0gc3RyaWN0bHlTcGxpdEJ5dGVTZXF1ZW5jZShpbnB1dCwgcChcIiZcIikpO1xuICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgZm9yIChjb25zdCBieXRlcyBvZiBzZXF1ZW5jZXMpIHtcbiAgICBpZiAoYnl0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBsZXQgbmFtZSwgdmFsdWU7XG4gICAgY29uc3QgaW5kZXhPZkVxdWFsID0gYnl0ZXMuaW5kZXhPZihwKFwiPVwiKSk7XG5cbiAgICBpZiAoaW5kZXhPZkVxdWFsID49IDApIHtcbiAgICAgIG5hbWUgPSBieXRlcy5zbGljZSgwLCBpbmRleE9mRXF1YWwpO1xuICAgICAgdmFsdWUgPSBieXRlcy5zbGljZShpbmRleE9mRXF1YWwgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IGJ5dGVzO1xuICAgICAgdmFsdWUgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICB9XG5cbiAgICBuYW1lID0gcmVwbGFjZUJ5dGVJbkJ5dGVTZXF1ZW5jZShuYW1lLCAweDJCLCAweDIwKTtcbiAgICB2YWx1ZSA9IHJlcGxhY2VCeXRlSW5CeXRlU2VxdWVuY2UodmFsdWUsIDB4MkIsIDB4MjApO1xuXG4gICAgY29uc3QgbmFtZVN0cmluZyA9IHV0ZjhEZWNvZGVXaXRob3V0Qk9NKHBlcmNlbnREZWNvZGVCeXRlcyhuYW1lKSk7XG4gICAgY29uc3QgdmFsdWVTdHJpbmcgPSB1dGY4RGVjb2RlV2l0aG91dEJPTShwZXJjZW50RGVjb2RlQnl0ZXModmFsdWUpKTtcblxuICAgIG91dHB1dC5wdXNoKFtuYW1lU3RyaW5nLCB2YWx1ZVN0cmluZ10pO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmxlbmNvZGVkLXN0cmluZy1wYXJzZXJcbmZ1bmN0aW9uIHBhcnNlVXJsZW5jb2RlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gcGFyc2VVcmxlbmNvZGVkKHV0ZjhFbmNvZGUoaW5wdXQpKTtcbn1cblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXVybGVuY29kZWQtc2VyaWFsaXplclxuZnVuY3Rpb24gc2VyaWFsaXplVXJsZW5jb2RlZCh0dXBsZXMsIGVuY29kaW5nT3ZlcnJpZGUgPSB1bmRlZmluZWQpIHtcbiAgbGV0IGVuY29kaW5nID0gXCJ1dGYtOFwiO1xuICBpZiAoZW5jb2RpbmdPdmVycmlkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gVE9ETyBcImdldCB0aGUgb3V0cHV0IGVuY29kaW5nXCIsIGkuZS4gaGFuZGxlIGVuY29kaW5nIGxhYmVscyB2cy4gbmFtZXMuXG4gICAgZW5jb2RpbmcgPSBlbmNvZGluZ092ZXJyaWRlO1xuICB9XG5cbiAgbGV0IG91dHB1dCA9IFwiXCI7XG4gIGZvciAoY29uc3QgW2ksIHR1cGxlXSBvZiB0dXBsZXMuZW50cmllcygpKSB7XG4gICAgLy8gVE9ETzogaGFuZGxlIGVuY29kaW5nIG92ZXJyaWRlXG5cbiAgICBjb25zdCBuYW1lID0gdXRmOFBlcmNlbnRFbmNvZGVTdHJpbmcodHVwbGVbMF0sIGlzVVJMRW5jb2RlZFBlcmNlbnRFbmNvZGUsIHRydWUpO1xuXG4gICAgbGV0IHZhbHVlID0gdHVwbGVbMV07XG4gICAgaWYgKHR1cGxlLmxlbmd0aCA+IDIgJiYgdHVwbGVbMl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR1cGxlWzJdID09PSBcImhpZGRlblwiICYmIG5hbWUgPT09IFwiX2NoYXJzZXRfXCIpIHtcbiAgICAgICAgdmFsdWUgPSBlbmNvZGluZztcbiAgICAgIH0gZWxzZSBpZiAodHVwbGVbMl0gPT09IFwiZmlsZVwiKSB7XG4gICAgICAgIC8vIHZhbHVlIGlzIGEgRmlsZSBvYmplY3RcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5uYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlID0gdXRmOFBlcmNlbnRFbmNvZGVTdHJpbmcodmFsdWUsIGlzVVJMRW5jb2RlZFBlcmNlbnRFbmNvZGUsIHRydWUpO1xuXG4gICAgaWYgKGkgIT09IDApIHtcbiAgICAgIG91dHB1dCArPSBcIiZcIjtcbiAgICB9XG4gICAgb3V0cHV0ICs9IGAke25hbWV9PSR7dmFsdWV9YDtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RseVNwbGl0Qnl0ZVNlcXVlbmNlKGJ1ZiwgY3ApIHtcbiAgY29uc3QgbGlzdCA9IFtdO1xuICBsZXQgbGFzdCA9IDA7XG4gIGxldCBpID0gYnVmLmluZGV4T2YoY3ApO1xuICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgbGlzdC5wdXNoKGJ1Zi5zbGljZShsYXN0LCBpKSk7XG4gICAgbGFzdCA9IGkgKyAxO1xuICAgIGkgPSBidWYuaW5kZXhPZihjcCwgbGFzdCk7XG4gIH1cbiAgaWYgKGxhc3QgIT09IGJ1Zi5sZW5ndGgpIHtcbiAgICBsaXN0LnB1c2goYnVmLnNsaWNlKGxhc3QpKTtcbiAgfVxuICByZXR1cm4gbGlzdDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUJ5dGVJbkJ5dGVTZXF1ZW5jZShidWYsIGZyb20sIHRvKSB7XG4gIGxldCBpID0gYnVmLmluZGV4T2YoZnJvbSk7XG4gIHdoaWxlIChpID49IDApIHtcbiAgICBidWZbaV0gPSB0bztcbiAgICBpID0gYnVmLmluZGV4T2YoZnJvbSwgaSArIDEpO1xuICB9XG4gIHJldHVybiBidWY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwYXJzZVVybGVuY29kZWRTdHJpbmcsXG4gIHNlcmlhbGl6ZVVybGVuY29kZWRcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/urlencoded.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/lib/utils.js":
/*!***********************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/lib/utils.js ***!
  \***********************************************************/
/***/ ((module, exports) => {

eval("\n\n// Returns \"Type(value) is Object\" in ES terminology.\nfunction isObject(value) {\n  return (typeof value === \"object\" && value !== null) || typeof value === \"function\";\n}\n\nconst hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\n\n// Like `Object.assign`, but using `[[GetOwnProperty]]` and `[[DefineOwnProperty]]`\n// instead of `[[Get]]` and `[[Set]]` and only allowing objects\nfunction define(target, source) {\n  for (const key of Reflect.ownKeys(source)) {\n    const descriptor = Reflect.getOwnPropertyDescriptor(source, key);\n    if (descriptor && !Reflect.defineProperty(target, key, descriptor)) {\n      throw new TypeError(`Cannot redefine property: ${String(key)}`);\n    }\n  }\n}\n\nfunction newObjectInRealm(globalObject, object) {\n  const ctorRegistry = initCtorRegistry(globalObject);\n  return Object.defineProperties(\n    Object.create(ctorRegistry[\"%Object.prototype%\"]),\n    Object.getOwnPropertyDescriptors(object)\n  );\n}\n\nconst wrapperSymbol = Symbol(\"wrapper\");\nconst implSymbol = Symbol(\"impl\");\nconst sameObjectCaches = Symbol(\"SameObject caches\");\nconst ctorRegistrySymbol = Symbol.for(\"[webidl2js] constructor registry\");\n\nconst AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {}).prototype);\n\nfunction initCtorRegistry(globalObject) {\n  if (hasOwn(globalObject, ctorRegistrySymbol)) {\n    return globalObject[ctorRegistrySymbol];\n  }\n\n  const ctorRegistry = Object.create(null);\n\n  // In addition to registering all the WebIDL2JS-generated types in the constructor registry,\n  // we also register a few intrinsics that we make use of in generated code, since they are not\n  // easy to grab from the globalObject variable.\n  ctorRegistry[\"%Object.prototype%\"] = globalObject.Object.prototype;\n  ctorRegistry[\"%IteratorPrototype%\"] = Object.getPrototypeOf(\n    Object.getPrototypeOf(new globalObject.Array()[Symbol.iterator]())\n  );\n\n  try {\n    ctorRegistry[\"%AsyncIteratorPrototype%\"] = Object.getPrototypeOf(\n      Object.getPrototypeOf(\n        globalObject.eval(\"(async function* () {})\").prototype\n      )\n    );\n  } catch {\n    ctorRegistry[\"%AsyncIteratorPrototype%\"] = AsyncIteratorPrototype;\n  }\n\n  globalObject[ctorRegistrySymbol] = ctorRegistry;\n  return ctorRegistry;\n}\n\nfunction getSameObject(wrapper, prop, creator) {\n  if (!wrapper[sameObjectCaches]) {\n    wrapper[sameObjectCaches] = Object.create(null);\n  }\n\n  if (prop in wrapper[sameObjectCaches]) {\n    return wrapper[sameObjectCaches][prop];\n  }\n\n  wrapper[sameObjectCaches][prop] = creator();\n  return wrapper[sameObjectCaches][prop];\n}\n\nfunction wrapperForImpl(impl) {\n  return impl ? impl[wrapperSymbol] : null;\n}\n\nfunction implForWrapper(wrapper) {\n  return wrapper ? wrapper[implSymbol] : null;\n}\n\nfunction tryWrapperForImpl(impl) {\n  const wrapper = wrapperForImpl(impl);\n  return wrapper ? wrapper : impl;\n}\n\nfunction tryImplForWrapper(wrapper) {\n  const impl = implForWrapper(wrapper);\n  return impl ? impl : wrapper;\n}\n\nconst iterInternalSymbol = Symbol(\"internal\");\n\nfunction isArrayIndexPropName(P) {\n  if (typeof P !== \"string\") {\n    return false;\n  }\n  const i = P >>> 0;\n  if (i === 2 ** 32 - 1) {\n    return false;\n  }\n  const s = `${i}`;\n  if (P !== s) {\n    return false;\n  }\n  return true;\n}\n\nconst byteLengthGetter =\n    Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\nfunction isArrayBuffer(value) {\n  try {\n    byteLengthGetter.call(value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction iteratorResult([key, value], kind) {\n  let result;\n  switch (kind) {\n    case \"key\":\n      result = key;\n      break;\n    case \"value\":\n      result = value;\n      break;\n    case \"key+value\":\n      result = [key, value];\n      break;\n  }\n  return { value: result, done: false };\n}\n\nconst supportsPropertyIndex = Symbol(\"supports property index\");\nconst supportedPropertyIndices = Symbol(\"supported property indices\");\nconst supportsPropertyName = Symbol(\"supports property name\");\nconst supportedPropertyNames = Symbol(\"supported property names\");\nconst indexedGet = Symbol(\"indexed property get\");\nconst indexedSetNew = Symbol(\"indexed property set new\");\nconst indexedSetExisting = Symbol(\"indexed property set existing\");\nconst namedGet = Symbol(\"named property get\");\nconst namedSetNew = Symbol(\"named property set new\");\nconst namedSetExisting = Symbol(\"named property set existing\");\nconst namedDelete = Symbol(\"named property delete\");\n\nconst asyncIteratorNext = Symbol(\"async iterator get the next iteration result\");\nconst asyncIteratorReturn = Symbol(\"async iterator return steps\");\nconst asyncIteratorInit = Symbol(\"async iterator initialization steps\");\nconst asyncIteratorEOI = Symbol(\"async iterator end of iteration\");\n\nmodule.exports = exports = {\n  isObject,\n  hasOwn,\n  define,\n  newObjectInRealm,\n  wrapperSymbol,\n  implSymbol,\n  getSameObject,\n  ctorRegistrySymbol,\n  initCtorRegistry,\n  wrapperForImpl,\n  implForWrapper,\n  tryWrapperForImpl,\n  tryImplForWrapper,\n  iterInternalSymbol,\n  isArrayBuffer,\n  isArrayIndexPropName,\n  supportsPropertyIndex,\n  supportedPropertyIndices,\n  supportsPropertyName,\n  supportedPropertyNames,\n  indexedGet,\n  indexedSetNew,\n  indexedSetExisting,\n  namedGet,\n  namedSetNew,\n  namedSetExisting,\n  namedDelete,\n  asyncIteratorNext,\n  asyncIteratorReturn,\n  asyncIteratorInit,\n  asyncIteratorEOI,\n  iteratorResult\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/whatwg-url/webidl2js-wrapper.js":
/*!*******************************************************************!*\
  !*** ../../../../../node_modules/whatwg-url/webidl2js-wrapper.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst URL = __webpack_require__(/*! ./lib/URL */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/URL.js\");\nconst URLSearchParams = __webpack_require__(/*! ./lib/URLSearchParams */ \"(ssr)/../../../../../node_modules/whatwg-url/lib/URLSearchParams.js\");\n\nexports.URL = URL;\nexports.URLSearchParams = URLSearchParams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3doYXR3Zy11cmwvd2ViaWRsMmpzLXdyYXBwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsWUFBWSxtQkFBTyxDQUFDLDBFQUFXO0FBQy9CLHdCQUF3QixtQkFBTyxDQUFDLGtHQUF1Qjs7QUFFdkQsV0FBVztBQUNYLHVCQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy93aGF0d2ctdXJsL3dlYmlkbDJqcy13cmFwcGVyLmpzP2VmOGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFVSTCA9IHJlcXVpcmUoXCIuL2xpYi9VUkxcIik7XG5jb25zdCBVUkxTZWFyY2hQYXJhbXMgPSByZXF1aXJlKFwiLi9saWIvVVJMU2VhcmNoUGFyYW1zXCIpO1xuXG5leHBvcnRzLlVSTCA9IFVSTDtcbmV4cG9ydHMuVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/whatwg-url/webidl2js-wrapper.js\n");

/***/ })

};
;