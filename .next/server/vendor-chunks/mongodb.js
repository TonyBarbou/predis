"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mongodb";
exports.ids = ["vendor-chunks/mongodb"];
exports.modules = {

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/admin.js":
/*!********************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/admin.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Admin = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_databases_1 = __webpack_require__(/*! ./operations/list_databases */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/list_databases.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/remove_user.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/run_command.js\");\nconst validate_collection_1 = __webpack_require__(/*! ./operations/validate_collection */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/validate_collection.js\");\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nclass Admin {\n    /**\n     * Create a new Admin instance\n     * @internal\n     */\n    constructor(db) {\n        this.s = { db };\n    }\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new run_command_1.RunAdminCommandOperation(command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async buildInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverInfo(options) {\n        return this.command({ buildinfo: 1 }, options);\n    }\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    async serverStatus(options) {\n        return this.command({ serverStatus: 1 }, options);\n    }\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    async ping(options) {\n        return this.command({ ping: 1 }, options);\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new remove_user_1.RemoveUserOperation(this.s.db, username, { dbName: 'admin', ...options }));\n    }\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    async validateCollection(collectionName, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new validate_collection_1.ValidateCollectionOperation(this, collectionName, options));\n    }\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    async listDatabases(options) {\n        return (0, execute_operation_1.executeOperation)(this.s.db.client, new list_databases_1.ListDatabasesOperation(this.s.db, options));\n    }\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    async replSetGetStatus(options) {\n        return this.command({ replSetGetStatus: 1 }, options);\n    }\n}\nexports.Admin = Admin;\n//# sourceMappingURL=admin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2FkbWluLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYixlQUFlLG1CQUFPLENBQUMscUVBQVE7QUFDL0IsNEJBQTRCLG1CQUFPLENBQUMscUhBQWdDO0FBQ3BFLHlCQUF5QixtQkFBTyxDQUFDLCtHQUE2QjtBQUM5RCxzQkFBc0IsbUJBQU8sQ0FBQyx5R0FBMEI7QUFDeEQsc0JBQXNCLG1CQUFPLENBQUMseUdBQTBCO0FBQ3hELDhCQUE4QixtQkFBTyxDQUFDLHlIQUFrQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGNBQWM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixpQkFBaUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsU0FBUztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0lBQXdJLDZCQUE2QjtBQUNySztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixxQkFBcUI7QUFDbkQ7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9hZG1pbi5qcz9lODljIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BZG1pbiA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuL2Jzb25cIik7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IGxpc3RfZGF0YWJhc2VzXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25zL2xpc3RfZGF0YWJhc2VzXCIpO1xuY29uc3QgcmVtb3ZlX3VzZXJfMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvcmVtb3ZlX3VzZXJcIik7XG5jb25zdCBydW5fY29tbWFuZF8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9ucy9ydW5fY29tbWFuZFwiKTtcbmNvbnN0IHZhbGlkYXRlX2NvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvbnMvdmFsaWRhdGVfY29sbGVjdGlvblwiKTtcbi8qKlxuICogVGhlICoqQWRtaW4qKiBjbGFzcyBpcyBhbiBpbnRlcm5hbCBjbGFzcyB0aGF0IGFsbG93cyBjb252ZW5pZW50IGFjY2VzcyB0b1xuICogdGhlIGFkbWluIGZ1bmN0aW9uYWxpdHkgYW5kIGNvbW1hbmRzIGZvciBNb25nb0RCLlxuICpcbiAqICoqQURNSU4gQ2Fubm90IGRpcmVjdGx5IGJlIGluc3RhbnRpYXRlZCoqXG4gKiBAcHVibGljXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gJ21vbmdvZGInO1xuICpcbiAqIGNvbnN0IGNsaWVudCA9IG5ldyBNb25nb0NsaWVudCgnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAxNycpO1xuICogY29uc3QgYWRtaW4gPSBjbGllbnQuZGIoKS5hZG1pbigpO1xuICogY29uc3QgZGJJbmZvID0gYXdhaXQgYWRtaW4ubGlzdERhdGFiYXNlcygpO1xuICogZm9yIChjb25zdCBkYiBvZiBkYkluZm8uZGF0YWJhc2VzKSB7XG4gKiAgIGNvbnNvbGUubG9nKGRiLm5hbWUpO1xuICogfVxuICogYGBgXG4gKi9cbmNsYXNzIEFkbWluIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQWRtaW4gaW5zdGFuY2VcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYikge1xuICAgICAgICB0aGlzLnMgPSB7IGRiIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgYSBjb21tYW5kXG4gICAgICpcbiAgICAgKiBUaGUgZHJpdmVyIHdpbGwgZW5zdXJlIHRoZSBmb2xsb3dpbmcgZmllbGRzIGFyZSBhdHRhY2hlZCB0byB0aGUgY29tbWFuZCBzZW50IHRvIHRoZSBzZXJ2ZXI6XG4gICAgICogLSBgbHNpZGAgLSBzb3VyY2VkIGZyb20gYW4gaW1wbGljaXQgc2Vzc2lvbiBvciBvcHRpb25zLnNlc3Npb25cbiAgICAgKiAtIGAkcmVhZFByZWZlcmVuY2VgIC0gZGVmYXVsdHMgdG8gcHJpbWFyeSBvciBjYW4gYmUgY29uZmlndXJlZCBieSBvcHRpb25zLnJlYWRQcmVmZXJlbmNlXG4gICAgICogLSBgJGRiYCAtIHNvdXJjZWQgZnJvbSB0aGUgbmFtZSBvZiB0aGlzIGRhdGFiYXNlXG4gICAgICpcbiAgICAgKiBJZiB0aGUgY2xpZW50IGhhcyBhIHNlcnZlckFwaSBzZXR0aW5nOlxuICAgICAqIC0gYGFwaVZlcnNpb25gXG4gICAgICogLSBgYXBpU3RyaWN0YFxuICAgICAqIC0gYGFwaURlcHJlY2F0aW9uRXJyb3JzYFxuICAgICAqXG4gICAgICogV2hlbiBpbiBhIHRyYW5zYWN0aW9uOlxuICAgICAqIC0gYHJlYWRDb25jZXJuYCAtIHNvdXJjZWQgZnJvbSByZWFkQ29uY2VybiBzZXQgb24gdGhlIFRyYW5zYWN0aW9uT3B0aW9uc1xuICAgICAqIC0gYHdyaXRlQ29uY2VybmAgLSBzb3VyY2VkIGZyb20gd3JpdGVDb25jZXJuIHNldCBvbiB0aGUgVHJhbnNhY3Rpb25PcHRpb25zXG4gICAgICpcbiAgICAgKiBBdHRhY2hpbmcgYW55IG9mIHRoZSBhYm92ZSBmaWVsZHMgdG8gdGhlIGNvbW1hbmQgd2lsbCBoYXZlIG5vIGVmZmVjdCBhcyB0aGUgZHJpdmVyIHdpbGwgb3ZlcndyaXRlIHRoZSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21tYW5kIC0gVGhlIGNvbW1hbmQgdG8gZXhlY3V0ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgY29tbWFuZChjb21tYW5kLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnMuZGIuY2xpZW50LCBuZXcgcnVuX2NvbW1hbmRfMS5SdW5BZG1pbkNvbW1hbmRPcGVyYXRpb24oY29tbWFuZCwge1xuICAgICAgICAgICAgLi4uKDAsIGJzb25fMS5yZXNvbHZlQlNPTk9wdGlvbnMpKG9wdGlvbnMpLFxuICAgICAgICAgICAgc2Vzc2lvbjogb3B0aW9ucz8uc2Vzc2lvbixcbiAgICAgICAgICAgIHJlYWRQcmVmZXJlbmNlOiBvcHRpb25zPy5yZWFkUHJlZmVyZW5jZVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBzZXJ2ZXIgYnVpbGQgaW5mb3JtYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MgZm9yIHRoZSBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgYnVpbGRJbmZvKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZCh7IGJ1aWxkaW5mbzogMSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHNlcnZlciBidWlsZCBpbmZvcm1hdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncyBmb3IgdGhlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBzZXJ2ZXJJbmZvKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZCh7IGJ1aWxkaW5mbzogMSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhpcyBkYidzIHNlcnZlciBzdGF0dXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHNlcnZlclN0YXR1cyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1hbmQoeyBzZXJ2ZXJTdGF0dXM6IDEgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBpbmcgdGhlIE1vbmdvREIgc2VydmVyIGFuZCByZXRyaWV2ZSByZXN1bHRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHBpbmcob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kKHsgcGluZzogMSB9LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgdXNlciBmcm9tIGEgZGF0YWJhc2VcbiAgICAgKlxuICAgICAqIEBwYXJhbSB1c2VybmFtZSAtIFRoZSB1c2VybmFtZSB0byByZW1vdmVcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHJlbW92ZVVzZXIodXNlcm5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucy5kYi5jbGllbnQsIG5ldyByZW1vdmVfdXNlcl8xLlJlbW92ZVVzZXJPcGVyYXRpb24odGhpcy5zLmRiLCB1c2VybmFtZSwgeyBkYk5hbWU6ICdhZG1pbicsIC4uLm9wdGlvbnMgfSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBhbiBleGlzdGluZyBjb2xsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbk5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgY29sbGVjdGlvbiB0byB2YWxpZGF0ZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHZhbGlkYXRlQ29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiAoMCwgZXhlY3V0ZV9vcGVyYXRpb25fMS5leGVjdXRlT3BlcmF0aW9uKSh0aGlzLnMuZGIuY2xpZW50LCBuZXcgdmFsaWRhdGVfY29sbGVjdGlvbl8xLlZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbih0aGlzLCBjb2xsZWN0aW9uTmFtZSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMaXN0IHRoZSBhdmFpbGFibGUgZGF0YWJhc2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIGxpc3REYXRhYmFzZXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5zLmRiLmNsaWVudCwgbmV3IGxpc3RfZGF0YWJhc2VzXzEuTGlzdERhdGFiYXNlc09wZXJhdGlvbih0aGlzLnMuZGIsIG9wdGlvbnMpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IFJlcGxpY2FTZXQgc3RhdHVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIHNldHRpbmdzIGZvciB0aGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIHJlcGxTZXRHZXRTdGF0dXMob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kKHsgcmVwbFNldEdldFN0YXR1czogMSB9LCBvcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkFkbWluID0gQWRtaW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZG1pbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/admin.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/bson.js":
/*!*******************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/bson.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.UUID = exports.Timestamp = exports.serialize = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.deserialize = exports.Decimal128 = exports.DBRef = exports.Code = exports.calculateObjectSize = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.BSON = exports.Binary = void 0;\nvar bson_1 = __webpack_require__(/*! bson */ \"(ssr)/../../../../../node_modules/bson/lib/bson.cjs\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_1.Binary; } }));\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_1.BSON; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_1.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_1.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_1.BSONType; } }));\nObject.defineProperty(exports, \"calculateObjectSize\", ({ enumerable: true, get: function () { return bson_1.calculateObjectSize; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_1.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_1.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_1.Decimal128; } }));\nObject.defineProperty(exports, \"deserialize\", ({ enumerable: true, get: function () { return bson_1.deserialize; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_1.Double; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_1.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_1.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_1.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_1.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_1.ObjectId; } }));\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return bson_1.serialize; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_1.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_1.UUID; } }));\nfunction pluckBSONSerializeOptions(options) {\n    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegExp, raw, enableUtf8Validation } = options;\n    return {\n        fieldsAsRaw,\n        useBigInt64,\n        promoteValues,\n        promoteBuffers,\n        promoteLongs,\n        serializeFunctions,\n        ignoreUndefined,\n        bsonRegExp,\n        raw,\n        enableUtf8Validation\n    };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n    const parentOptions = parent?.bsonOptions;\n    return {\n        raw: options?.raw ?? parentOptions?.raw ?? false,\n        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,\n        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n        bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n    };\n}\nexports.resolveBSONOptions = resolveBSONOptions;\n//# sourceMappingURL=bson.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2Jzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsaUNBQWlDLEdBQUcsWUFBWSxHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGdCQUFnQixHQUFHLGNBQWMsR0FBRyxjQUFjLEdBQUcsWUFBWSxHQUFHLGFBQWEsR0FBRyxjQUFjLEdBQUcsbUJBQW1CLEdBQUcsa0JBQWtCLEdBQUcsYUFBYSxHQUFHLFlBQVksR0FBRywyQkFBMkIsR0FBRyxnQkFBZ0IsR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxZQUFZLEdBQUcsY0FBYztBQUMvWixhQUFhLG1CQUFPLENBQUMsaUVBQU07QUFDM0IsMENBQXlDLEVBQUUscUNBQXFDLHlCQUF5QixFQUFDO0FBQzFHLHdDQUF1QyxFQUFFLHFDQUFxQyx1QkFBdUIsRUFBQztBQUN0Ryw4Q0FBNkMsRUFBRSxxQ0FBcUMsNkJBQTZCLEVBQUM7QUFDbEgsOENBQTZDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ2xILDRDQUEyQyxFQUFFLHFDQUFxQywyQkFBMkIsRUFBQztBQUM5Ryx1REFBc0QsRUFBRSxxQ0FBcUMsc0NBQXNDLEVBQUM7QUFDcEksd0NBQXVDLEVBQUUscUNBQXFDLHVCQUF1QixFQUFDO0FBQ3RHLHlDQUF3QyxFQUFFLHFDQUFxQyx3QkFBd0IsRUFBQztBQUN4Ryw4Q0FBNkMsRUFBRSxxQ0FBcUMsNkJBQTZCLEVBQUM7QUFDbEgsK0NBQThDLEVBQUUscUNBQXFDLDhCQUE4QixFQUFDO0FBQ3BILDBDQUF5QyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUMxRyx5Q0FBd0MsRUFBRSxxQ0FBcUMsd0JBQXdCLEVBQUM7QUFDeEcsd0NBQXVDLEVBQUUscUNBQXFDLHVCQUF1QixFQUFDO0FBQ3RHLDBDQUF5QyxFQUFFLHFDQUFxQyx5QkFBeUIsRUFBQztBQUMxRywwQ0FBeUMsRUFBRSxxQ0FBcUMseUJBQXlCLEVBQUM7QUFDMUcsNENBQTJDLEVBQUUscUNBQXFDLDJCQUEyQixFQUFDO0FBQzlHLDZDQUE0QyxFQUFFLHFDQUFxQyw0QkFBNEIsRUFBQztBQUNoSCw2Q0FBNEMsRUFBRSxxQ0FBcUMsNEJBQTRCLEVBQUM7QUFDaEgsd0NBQXVDLEVBQUUscUNBQXFDLHVCQUF1QixFQUFDO0FBQ3RHO0FBQ0EsWUFBWSxvSkFBb0o7QUFDaEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RTtBQUM3RTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvYnNvbi5qcz9lYjgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXNvbHZlQlNPTk9wdGlvbnMgPSBleHBvcnRzLnBsdWNrQlNPTlNlcmlhbGl6ZU9wdGlvbnMgPSBleHBvcnRzLlVVSUQgPSBleHBvcnRzLlRpbWVzdGFtcCA9IGV4cG9ydHMuc2VyaWFsaXplID0gZXhwb3J0cy5PYmplY3RJZCA9IGV4cG9ydHMuTWluS2V5ID0gZXhwb3J0cy5NYXhLZXkgPSBleHBvcnRzLkxvbmcgPSBleHBvcnRzLkludDMyID0gZXhwb3J0cy5Eb3VibGUgPSBleHBvcnRzLmRlc2VyaWFsaXplID0gZXhwb3J0cy5EZWNpbWFsMTI4ID0gZXhwb3J0cy5EQlJlZiA9IGV4cG9ydHMuQ29kZSA9IGV4cG9ydHMuY2FsY3VsYXRlT2JqZWN0U2l6ZSA9IGV4cG9ydHMuQlNPTlR5cGUgPSBleHBvcnRzLkJTT05TeW1ib2wgPSBleHBvcnRzLkJTT05SZWdFeHAgPSBleHBvcnRzLkJTT04gPSBleHBvcnRzLkJpbmFyeSA9IHZvaWQgMDtcbnZhciBic29uXzEgPSByZXF1aXJlKFwiYnNvblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJpbmFyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLkJpbmFyeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJTT05cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5CU09OOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQlNPTlJlZ0V4cFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLkJTT05SZWdFeHA7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCU09OU3ltYm9sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuQlNPTlN5bWJvbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkJTT05UeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuQlNPTlR5cGU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjYWxjdWxhdGVPYmplY3RTaXplXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuY2FsY3VsYXRlT2JqZWN0U2l6ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvZGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5Db2RlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiREJSZWZcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5EQlJlZjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRlY2ltYWwxMjhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5EZWNpbWFsMTI4OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVzZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5kZXNlcmlhbGl6ZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRvdWJsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLkRvdWJsZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkludDMyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuSW50MzI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJMb25nXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuTG9uZzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1heEtleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLk1heEtleTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1pbktleVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnNvbl8xLk1pbktleTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk9iamVjdElkXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuT2JqZWN0SWQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5zZXJpYWxpemU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUaW1lc3RhbXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGJzb25fMS5UaW1lc3RhbXA7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJVVUlEXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBic29uXzEuVVVJRDsgfSB9KTtcbmZ1bmN0aW9uIHBsdWNrQlNPTlNlcmlhbGl6ZU9wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IHsgZmllbGRzQXNSYXcsIHVzZUJpZ0ludDY0LCBwcm9tb3RlVmFsdWVzLCBwcm9tb3RlQnVmZmVycywgcHJvbW90ZUxvbmdzLCBzZXJpYWxpemVGdW5jdGlvbnMsIGlnbm9yZVVuZGVmaW5lZCwgYnNvblJlZ0V4cCwgcmF3LCBlbmFibGVVdGY4VmFsaWRhdGlvbiB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4ge1xuICAgICAgICBmaWVsZHNBc1JhdyxcbiAgICAgICAgdXNlQmlnSW50NjQsXG4gICAgICAgIHByb21vdGVWYWx1ZXMsXG4gICAgICAgIHByb21vdGVCdWZmZXJzLFxuICAgICAgICBwcm9tb3RlTG9uZ3MsXG4gICAgICAgIHNlcmlhbGl6ZUZ1bmN0aW9ucyxcbiAgICAgICAgaWdub3JlVW5kZWZpbmVkLFxuICAgICAgICBic29uUmVnRXhwLFxuICAgICAgICByYXcsXG4gICAgICAgIGVuYWJsZVV0ZjhWYWxpZGF0aW9uXG4gICAgfTtcbn1cbmV4cG9ydHMucGx1Y2tCU09OU2VyaWFsaXplT3B0aW9ucyA9IHBsdWNrQlNPTlNlcmlhbGl6ZU9wdGlvbnM7XG4vKipcbiAqIE1lcmdlIHRoZSBnaXZlbiBCU09OU2VyaWFsaXplT3B0aW9ucywgcHJlZmVycmluZyBvcHRpb25zIG92ZXIgdGhlIHBhcmVudCdzIG9wdGlvbnMsIGFuZFxuICogc3Vic3RpdHV0aW5nIGRlZmF1bHRzIGZvciB2YWx1ZXMgbm90IHNldC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUJTT05PcHRpb25zKG9wdGlvbnMsIHBhcmVudCkge1xuICAgIGNvbnN0IHBhcmVudE9wdGlvbnMgPSBwYXJlbnQ/LmJzb25PcHRpb25zO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJhdzogb3B0aW9ucz8ucmF3ID8/IHBhcmVudE9wdGlvbnM/LnJhdyA/PyBmYWxzZSxcbiAgICAgICAgdXNlQmlnSW50NjQ6IG9wdGlvbnM/LnVzZUJpZ0ludDY0ID8/IHBhcmVudE9wdGlvbnM/LnVzZUJpZ0ludDY0ID8/IGZhbHNlLFxuICAgICAgICBwcm9tb3RlTG9uZ3M6IG9wdGlvbnM/LnByb21vdGVMb25ncyA/PyBwYXJlbnRPcHRpb25zPy5wcm9tb3RlTG9uZ3MgPz8gdHJ1ZSxcbiAgICAgICAgcHJvbW90ZVZhbHVlczogb3B0aW9ucz8ucHJvbW90ZVZhbHVlcyA/PyBwYXJlbnRPcHRpb25zPy5wcm9tb3RlVmFsdWVzID8/IHRydWUsXG4gICAgICAgIHByb21vdGVCdWZmZXJzOiBvcHRpb25zPy5wcm9tb3RlQnVmZmVycyA/PyBwYXJlbnRPcHRpb25zPy5wcm9tb3RlQnVmZmVycyA/PyBmYWxzZSxcbiAgICAgICAgaWdub3JlVW5kZWZpbmVkOiBvcHRpb25zPy5pZ25vcmVVbmRlZmluZWQgPz8gcGFyZW50T3B0aW9ucz8uaWdub3JlVW5kZWZpbmVkID8/IGZhbHNlLFxuICAgICAgICBic29uUmVnRXhwOiBvcHRpb25zPy5ic29uUmVnRXhwID8/IHBhcmVudE9wdGlvbnM/LmJzb25SZWdFeHAgPz8gZmFsc2UsXG4gICAgICAgIHNlcmlhbGl6ZUZ1bmN0aW9uczogb3B0aW9ucz8uc2VyaWFsaXplRnVuY3Rpb25zID8/IHBhcmVudE9wdGlvbnM/LnNlcmlhbGl6ZUZ1bmN0aW9ucyA/PyBmYWxzZSxcbiAgICAgICAgZmllbGRzQXNSYXc6IG9wdGlvbnM/LmZpZWxkc0FzUmF3ID8/IHBhcmVudE9wdGlvbnM/LmZpZWxkc0FzUmF3ID8/IHt9LFxuICAgICAgICBlbmFibGVVdGY4VmFsaWRhdGlvbjogb3B0aW9ucz8uZW5hYmxlVXRmOFZhbGlkYXRpb24gPz8gcGFyZW50T3B0aW9ucz8uZW5hYmxlVXRmOFZhbGlkYXRpb24gPz8gdHJ1ZVxuICAgIH07XG59XG5leHBvcnRzLnJlc29sdmVCU09OT3B0aW9ucyA9IHJlc29sdmVCU09OT3B0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJzb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/bson.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/bulk/common.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/bulk/common.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkOperationBase = exports.FindOperators = exports.MongoBulkWriteError = exports.mergeBatchResults = exports.WriteError = exports.WriteConcernError = exports.BulkWriteResult = exports.Batch = exports.BatchType = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst delete_1 = __webpack_require__(/*! ../operations/delete */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/delete.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst insert_1 = __webpack_require__(/*! ../operations/insert */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/insert.js\");\nconst operation_1 = __webpack_require__(/*! ../operations/operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\nconst update_1 = __webpack_require__(/*! ../operations/update */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/update.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nconst kServerError = Symbol('serverError');\n/** @public */\nexports.BatchType = Object.freeze({\n    INSERT: 1,\n    UPDATE: 2,\n    DELETE: 3\n});\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nclass Batch {\n    constructor(batchType, originalZeroIndex) {\n        this.originalZeroIndex = originalZeroIndex;\n        this.currentIndex = 0;\n        this.originalIndexes = [];\n        this.batchType = batchType;\n        this.operations = [];\n        this.size = 0;\n        this.sizeBytes = 0;\n    }\n}\nexports.Batch = Batch;\n/**\n * @public\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n    static generateIdMap(ids) {\n        const idMap = {};\n        for (const doc of ids) {\n            idMap[doc.index] = doc._id;\n        }\n        return idMap;\n    }\n    /**\n     * Create a new BulkWriteResult instance\n     * @internal\n     */\n    constructor(bulkResult) {\n        this.result = bulkResult;\n        this.insertedCount = this.result.nInserted ?? 0;\n        this.matchedCount = this.result.nMatched ?? 0;\n        this.modifiedCount = this.result.nModified ?? 0;\n        this.deletedCount = this.result.nRemoved ?? 0;\n        this.upsertedCount = this.result.upserted.length ?? 0;\n        this.upsertedIds = BulkWriteResult.generateIdMap(this.result.upserted);\n        this.insertedIds = BulkWriteResult.generateIdMap(this.result.insertedIds);\n        Object.defineProperty(this, 'result', { value: this.result, enumerable: false });\n    }\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok() {\n        return this.result.ok;\n    }\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index) {\n        return this.result.upserted[index];\n    }\n    /** Returns raw internal result */\n    getRawResponse() {\n        return this.result;\n    }\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors() {\n        return this.result.writeErrors.length > 0;\n    }\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount() {\n        return this.result.writeErrors.length;\n    }\n    /** Returns a specific write error object */\n    getWriteErrorAt(index) {\n        return index < this.result.writeErrors.length ? this.result.writeErrors[index] : undefined;\n    }\n    /** Retrieve all write errors */\n    getWriteErrors() {\n        return this.result.writeErrors;\n    }\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError() {\n        if (this.result.writeConcernErrors.length === 0) {\n            return;\n        }\n        else if (this.result.writeConcernErrors.length === 1) {\n            // Return the error\n            return this.result.writeConcernErrors[0];\n        }\n        else {\n            // Combine the errors\n            let errmsg = '';\n            for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n                const err = this.result.writeConcernErrors[i];\n                errmsg = errmsg + err.errmsg;\n                // TODO: Something better\n                if (i === 0)\n                    errmsg = errmsg + ' and ';\n            }\n            return new WriteConcernError({ errmsg, code: error_1.MONGODB_ERROR_CODES.WriteConcernFailed });\n        }\n    }\n    toString() {\n        return `BulkWriteResult(${this.result})`;\n    }\n    isOk() {\n        return this.result.ok === 1;\n    }\n}\nexports.BulkWriteResult = BulkWriteResult;\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nclass WriteConcernError {\n    constructor(error) {\n        this[kServerError] = error;\n    }\n    /** Write concern error code. */\n    get code() {\n        return this[kServerError].code;\n    }\n    /** Write concern error message. */\n    get errmsg() {\n        return this[kServerError].errmsg;\n    }\n    /** Write concern error info. */\n    get errInfo() {\n        return this[kServerError].errInfo;\n    }\n    toJSON() {\n        return this[kServerError];\n    }\n    toString() {\n        return `WriteConcernError(${this.errmsg})`;\n    }\n}\nexports.WriteConcernError = WriteConcernError;\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nclass WriteError {\n    constructor(err) {\n        this.err = err;\n    }\n    /** WriteError code. */\n    get code() {\n        return this.err.code;\n    }\n    /** WriteError original bulk operation index. */\n    get index() {\n        return this.err.index;\n    }\n    /** WriteError message. */\n    get errmsg() {\n        return this.err.errmsg;\n    }\n    /** WriteError details. */\n    get errInfo() {\n        return this.err.errInfo;\n    }\n    /** Returns the underlying operation that caused the error */\n    getOperation() {\n        return this.err.op;\n    }\n    toJSON() {\n        return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n    }\n    toString() {\n        return `WriteError(${JSON.stringify(this.toJSON())})`;\n    }\n}\nexports.WriteError = WriteError;\n/** Merges results into shared data structure */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n    // If we have an error set the result to be the err object\n    if (err) {\n        result = err;\n    }\n    else if (result && result.result) {\n        result = result.result;\n    }\n    if (result == null) {\n        return;\n    }\n    // Do we have a top level error stop processing and return\n    if (result.ok === 0 && bulkResult.ok === 1) {\n        bulkResult.ok = 0;\n        const writeError = {\n            index: 0,\n            code: result.code || 0,\n            errmsg: result.message,\n            errInfo: result.errInfo,\n            op: batch.operations[0]\n        };\n        bulkResult.writeErrors.push(new WriteError(writeError));\n        return;\n    }\n    else if (result.ok === 0 && bulkResult.ok === 0) {\n        return;\n    }\n    // If we have an insert Batch type\n    if (isInsertBatch(batch) && result.n) {\n        bulkResult.nInserted = bulkResult.nInserted + result.n;\n    }\n    // If we have an insert Batch type\n    if (isDeleteBatch(batch) && result.n) {\n        bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n    }\n    let nUpserted = 0;\n    // We have an array of upserted values, we need to rewrite the indexes\n    if (Array.isArray(result.upserted)) {\n        nUpserted = result.upserted.length;\n        for (let i = 0; i < result.upserted.length; i++) {\n            bulkResult.upserted.push({\n                index: result.upserted[i].index + batch.originalZeroIndex,\n                _id: result.upserted[i]._id\n            });\n        }\n    }\n    else if (result.upserted) {\n        nUpserted = 1;\n        bulkResult.upserted.push({\n            index: batch.originalZeroIndex,\n            _id: result.upserted\n        });\n    }\n    // If we have an update Batch type\n    if (isUpdateBatch(batch) && result.n) {\n        const nModified = result.nModified;\n        bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n        bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n        if (typeof nModified === 'number') {\n            bulkResult.nModified = bulkResult.nModified + nModified;\n        }\n        else {\n            bulkResult.nModified = 0;\n        }\n    }\n    if (Array.isArray(result.writeErrors)) {\n        for (let i = 0; i < result.writeErrors.length; i++) {\n            const writeError = {\n                index: batch.originalIndexes[result.writeErrors[i].index],\n                code: result.writeErrors[i].code,\n                errmsg: result.writeErrors[i].errmsg,\n                errInfo: result.writeErrors[i].errInfo,\n                op: batch.operations[result.writeErrors[i].index]\n            };\n            bulkResult.writeErrors.push(new WriteError(writeError));\n        }\n    }\n    if (result.writeConcernError) {\n        bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n    }\n}\nexports.mergeBatchResults = mergeBatchResults;\nfunction executeCommands(bulkOperation, options, callback) {\n    if (bulkOperation.s.batches.length === 0) {\n        return callback(undefined, new BulkWriteResult(bulkOperation.s.bulkResult));\n    }\n    const batch = bulkOperation.s.batches.shift();\n    function resultHandler(err, result) {\n        // Error is a driver related error not a bulk op error, return early\n        if (err && 'message' in err && !(err instanceof error_1.MongoWriteConcernError)) {\n            return callback(new MongoBulkWriteError(err, new BulkWriteResult(bulkOperation.s.bulkResult)));\n        }\n        if (err instanceof error_1.MongoWriteConcernError) {\n            return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n        }\n        // Merge the results together\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n        const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n        if (bulkOperation.handleWriteError(callback, writeResult))\n            return;\n        // Execute the next command in line\n        executeCommands(bulkOperation, options, callback);\n    }\n    const finalOptions = (0, utils_1.resolveOptions)(bulkOperation, {\n        ...options,\n        ordered: bulkOperation.isOrdered\n    });\n    if (finalOptions.bypassDocumentValidation !== true) {\n        delete finalOptions.bypassDocumentValidation;\n    }\n    // Set an operationIf if provided\n    if (bulkOperation.operationId) {\n        resultHandler.operationId = bulkOperation.operationId;\n    }\n    // Is the bypassDocumentValidation options specific\n    if (bulkOperation.s.bypassDocumentValidation === true) {\n        finalOptions.bypassDocumentValidation = true;\n    }\n    // Is the checkKeys option disabled\n    if (bulkOperation.s.checkKeys === false) {\n        finalOptions.checkKeys = false;\n    }\n    if (finalOptions.retryWrites) {\n        if (isUpdateBatch(batch)) {\n            finalOptions.retryWrites = finalOptions.retryWrites && !batch.operations.some(op => op.multi);\n        }\n        if (isDeleteBatch(batch)) {\n            finalOptions.retryWrites =\n                finalOptions.retryWrites && !batch.operations.some(op => op.limit === 0);\n        }\n    }\n    try {\n        if (isInsertBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new insert_1.InsertOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n        else if (isUpdateBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new update_1.UpdateOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n        else if (isDeleteBatch(batch)) {\n            (0, execute_operation_1.executeOperation)(bulkOperation.s.collection.client, new delete_1.DeleteOperation(bulkOperation.s.namespace, batch.operations, finalOptions), resultHandler);\n        }\n    }\n    catch (err) {\n        // Force top level error\n        err.ok = 0;\n        // Merge top level error and return\n        mergeBatchResults(batch, bulkOperation.s.bulkResult, err, undefined);\n        callback();\n    }\n}\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n    mergeBatchResults(batch, bulkResult, undefined, err.result);\n    callback(new MongoBulkWriteError({\n        message: err.result?.writeConcernError.errmsg,\n        code: err.result?.writeConcernError.result\n    }, new BulkWriteResult(bulkResult)));\n}\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nclass MongoBulkWriteError extends error_1.MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(error, result) {\n        super(error);\n        this.writeErrors = [];\n        if (error instanceof WriteConcernError)\n            this.err = error;\n        else if (!(error instanceof Error)) {\n            this.message = error.message;\n            this.code = error.code;\n            this.writeErrors = error.writeErrors ?? [];\n        }\n        this.result = result;\n        Object.assign(this, error);\n    }\n    get name() {\n        return 'MongoBulkWriteError';\n    }\n    /** Number of documents inserted. */\n    get insertedCount() {\n        return this.result.insertedCount;\n    }\n    /** Number of documents matched for update. */\n    get matchedCount() {\n        return this.result.matchedCount;\n    }\n    /** Number of documents modified. */\n    get modifiedCount() {\n        return this.result.modifiedCount;\n    }\n    /** Number of documents deleted. */\n    get deletedCount() {\n        return this.result.deletedCount;\n    }\n    /** Number of documents upserted. */\n    get upsertedCount() {\n        return this.result.upsertedCount;\n    }\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds() {\n        return this.result.insertedIds;\n    }\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds() {\n        return this.result.upsertedIds;\n    }\n}\nexports.MongoBulkWriteError = MongoBulkWriteError;\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nclass FindOperators {\n    /**\n     * Creates a new FindOperators object.\n     * @internal\n     */\n    constructor(bulkOperation) {\n        this.bulkOperation = bulkOperation;\n    }\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument) {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, {\n            ...currentOp,\n            multi: true\n        }));\n    }\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument) {\n        if (!(0, utils_1.hasAtomicOperators)(updateDocument)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, updateDocument, { ...currentOp, multi: false }));\n    }\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement) {\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n        }\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.UPDATE, (0, update_1.makeUpdateStatement)(currentOp.selector, replacement, { ...currentOp, multi: false }));\n    }\n    /** Add a delete one operation to the bulk operation */\n    deleteOne() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 1 }));\n    }\n    /** Add a delete many operation to the bulk operation */\n    delete() {\n        const currentOp = buildCurrentOp(this.bulkOperation);\n        return this.bulkOperation.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(currentOp.selector, { ...currentOp, limit: 0 }));\n    }\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert() {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.upsert = true;\n        return this;\n    }\n    /** Specifies the collation for the query condition. */\n    collation(collation) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.collation = collation;\n        return this;\n    }\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.arrayFilters = arrayFilters;\n        return this;\n    }\n    /** Specifies hint for the bulk operation. */\n    hint(hint) {\n        if (!this.bulkOperation.s.currentOp) {\n            this.bulkOperation.s.currentOp = {};\n        }\n        this.bulkOperation.s.currentOp.hint = hint;\n        return this;\n    }\n}\nexports.FindOperators = FindOperators;\nconst executeCommandsAsync = (0, util_1.promisify)(executeCommands);\n/**\n * TODO(NODE-4063)\n * BulkWrites merge complexity is implemented in executeCommands\n * This provides a vehicle to treat bulkOperations like any other operation (hence \"shim\")\n * We would like this logic to simply live inside the BulkWriteOperation class\n * @internal\n */\nclass BulkWriteShimOperation extends operation_1.AbstractOperation {\n    constructor(bulkOperation, options) {\n        super(options);\n        this.bulkOperation = bulkOperation;\n    }\n    execute(_server, session) {\n        if (this.options.session == null) {\n            // An implicit session could have been created by 'executeOperation'\n            // So if we stick it on finalOptions here, each bulk operation\n            // will use this same session, it'll be passed in the same way\n            // an explicit session would be\n            this.options.session = session;\n        }\n        return executeCommandsAsync(this.bulkOperation, this.options);\n    }\n}\n/** @public */\nclass BulkOperationBase {\n    /**\n     * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n     * @internal\n     */\n    constructor(collection, options, isOrdered) {\n        // determine whether bulkOperation is ordered or unordered\n        this.isOrdered = isOrdered;\n        const topology = (0, utils_1.getTopology)(collection);\n        options = options == null ? {} : options;\n        // TODO Bring from driver information in hello\n        // Get the namespace for the write operations\n        const namespace = collection.s.namespace;\n        // Used to mark operation as executed\n        const executed = false;\n        // Current item\n        const currentOp = undefined;\n        // Set max byte size\n        const hello = topology.lastHello();\n        // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n        // over 2mb are still allowed\n        const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n        const maxBsonObjectSize = hello && hello.maxBsonObjectSize ? hello.maxBsonObjectSize : 1024 * 1024 * 16;\n        const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n        const maxWriteBatchSize = hello && hello.maxWriteBatchSize ? hello.maxWriteBatchSize : 1000;\n        // Calculates the largest possible size of an Array key, represented as a BSON string\n        // element. This calculation:\n        //     1 byte for BSON type\n        //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n        //   + 1 bytes for null terminator\n        const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n        // Final options for retryable writes\n        let finalOptions = Object.assign({}, options);\n        finalOptions = (0, utils_1.applyRetryableWrites)(finalOptions, collection.s.db);\n        // Final results\n        const bulkResult = {\n            ok: 1,\n            writeErrors: [],\n            writeConcernErrors: [],\n            insertedIds: [],\n            nInserted: 0,\n            nUpserted: 0,\n            nMatched: 0,\n            nModified: 0,\n            nRemoved: 0,\n            upserted: []\n        };\n        // Internal state\n        this.s = {\n            // Final result\n            bulkResult,\n            // Current batch state\n            currentBatch: undefined,\n            currentIndex: 0,\n            // ordered specific\n            currentBatchSize: 0,\n            currentBatchSizeBytes: 0,\n            // unordered specific\n            currentInsertBatch: undefined,\n            currentUpdateBatch: undefined,\n            currentRemoveBatch: undefined,\n            batches: [],\n            // Write concern\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Max batch size options\n            maxBsonObjectSize,\n            maxBatchSizeBytes,\n            maxWriteBatchSize,\n            maxKeySize,\n            // Namespace\n            namespace,\n            // Topology\n            topology,\n            // Options\n            options: finalOptions,\n            // BSON options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options),\n            // Current operation\n            currentOp,\n            // Executed\n            executed,\n            // Collection\n            collection,\n            // Fundamental error\n            err: undefined,\n            // check keys\n            checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : false\n        };\n        // bypass Validation\n        if (options.bypassDocumentValidation === true) {\n            this.s.bypassDocumentValidation = true;\n        }\n    }\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document) {\n        if (document._id == null && !shouldForceServerObjectId(this)) {\n            document._id = new bson_1.ObjectId();\n        }\n        return this.addToOperationsList(exports.BatchType.INSERT, document);\n    }\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector) {\n        if (!selector) {\n            throw new error_1.MongoInvalidArgumentError('Bulk find operation must specify a selector');\n        }\n        // Save a current selector\n        this.s.currentOp = {\n            selector: selector\n        };\n        return new FindOperators(this);\n    }\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op) {\n        if (op == null || typeof op !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Operation must be an object with an operation key');\n        }\n        if ('insertOne' in op) {\n            const forceServerObjectId = shouldForceServerObjectId(this);\n            if (op.insertOne && op.insertOne.document == null) {\n                // NOTE: provided for legacy support, but this is a malformed operation\n                if (forceServerObjectId !== true && op.insertOne._id == null) {\n                    op.insertOne._id = new bson_1.ObjectId();\n                }\n                return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne);\n            }\n            if (forceServerObjectId !== true && op.insertOne.document._id == null) {\n                op.insertOne.document._id = new bson_1.ObjectId();\n            }\n            return this.addToOperationsList(exports.BatchType.INSERT, op.insertOne.document);\n        }\n        if ('replaceOne' in op || 'updateOne' in op || 'updateMany' in op) {\n            if ('replaceOne' in op) {\n                if ('q' in op.replaceOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.replaceOne.filter, op.replaceOne.replacement, { ...op.replaceOne, multi: false });\n                if ((0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Replacement document must not use atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateOne' in op) {\n                if ('q' in op.updateOne) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateOne.filter, op.updateOne.update, {\n                    ...op.updateOne,\n                    multi: false\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n            if ('updateMany' in op) {\n                if ('q' in op.updateMany) {\n                    throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n                }\n                const updateStatement = (0, update_1.makeUpdateStatement)(op.updateMany.filter, op.updateMany.update, {\n                    ...op.updateMany,\n                    multi: true\n                });\n                if (!(0, utils_1.hasAtomicOperators)(updateStatement.u)) {\n                    throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n                }\n                return this.addToOperationsList(exports.BatchType.UPDATE, updateStatement);\n            }\n        }\n        if ('deleteOne' in op) {\n            if ('q' in op.deleteOne) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteOne.filter, { ...op.deleteOne, limit: 1 }));\n        }\n        if ('deleteMany' in op) {\n            if ('q' in op.deleteMany) {\n                throw new error_1.MongoInvalidArgumentError('Raw operations are not allowed');\n            }\n            return this.addToOperationsList(exports.BatchType.DELETE, (0, delete_1.makeDeleteStatement)(op.deleteMany.filter, { ...op.deleteMany, limit: 0 }));\n        }\n        // otherwise an unknown operation was provided\n        throw new error_1.MongoInvalidArgumentError('bulkWrite only supports insertOne, updateOne, updateMany, deleteOne, deleteMany');\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get batches() {\n        const batches = [...this.s.batches];\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                batches.push(this.s.currentRemoveBatch);\n        }\n        return batches;\n    }\n    async execute(options = {}) {\n        if (this.s.executed) {\n            throw new error_1.MongoBatchReExecutionError();\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            this.s.writeConcern = writeConcern;\n        }\n        // If we have current batch\n        if (this.isOrdered) {\n            if (this.s.currentBatch)\n                this.s.batches.push(this.s.currentBatch);\n        }\n        else {\n            if (this.s.currentInsertBatch)\n                this.s.batches.push(this.s.currentInsertBatch);\n            if (this.s.currentUpdateBatch)\n                this.s.batches.push(this.s.currentUpdateBatch);\n            if (this.s.currentRemoveBatch)\n                this.s.batches.push(this.s.currentRemoveBatch);\n        }\n        // If we have no operations in the bulk raise an error\n        if (this.s.batches.length === 0) {\n            throw new error_1.MongoInvalidArgumentError('Invalid BulkOperation, Batch cannot be empty');\n        }\n        this.s.executed = true;\n        const finalOptions = { ...this.s.options, ...options };\n        const operation = new BulkWriteShimOperation(this, finalOptions);\n        return (0, execute_operation_1.executeOperation)(this.s.collection.client, operation);\n    }\n    /**\n     * Handles the write error before executing commands\n     * @internal\n     */\n    handleWriteError(callback, writeResult) {\n        if (this.s.bulkResult.writeErrors.length > 0) {\n            const msg = this.s.bulkResult.writeErrors[0].errmsg\n                ? this.s.bulkResult.writeErrors[0].errmsg\n                : 'write operation failed';\n            callback(new MongoBulkWriteError({\n                message: msg,\n                code: this.s.bulkResult.writeErrors[0].code,\n                writeErrors: this.s.bulkResult.writeErrors\n            }, writeResult));\n            return true;\n        }\n        const writeConcernError = writeResult.getWriteConcernError();\n        if (writeConcernError) {\n            callback(new MongoBulkWriteError(writeConcernError, writeResult));\n            return true;\n        }\n        return false;\n    }\n}\nexports.BulkOperationBase = BulkOperationBase;\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n    enumerable: true,\n    get() {\n        return this.s.currentIndex;\n    }\n});\nfunction shouldForceServerObjectId(bulkOperation) {\n    if (typeof bulkOperation.s.options.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.options.forceServerObjectId;\n    }\n    if (typeof bulkOperation.s.collection.s.db.options?.forceServerObjectId === 'boolean') {\n        return bulkOperation.s.collection.s.db.options?.forceServerObjectId;\n    }\n    return false;\n}\nfunction isInsertBatch(batch) {\n    return batch.batchType === exports.BatchType.INSERT;\n}\nfunction isUpdateBatch(batch) {\n    return batch.batchType === exports.BatchType.UPDATE;\n}\nfunction isDeleteBatch(batch) {\n    return batch.batchType === exports.BatchType.DELETE;\n}\nfunction buildCurrentOp(bulkOp) {\n    let { currentOp } = bulkOp.s;\n    bulkOp.s.currentOp = undefined;\n    if (!currentOp)\n        currentOp = {};\n    return currentOp;\n}\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/bulk/common.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/bulk/ordered.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/bulk/ordered.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OrderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/../../../../../node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass OrderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, true);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize)\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatchSize + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatchSize > 0 &&\n                this.s.currentBatchSizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n            // Reset the current size trackers\n            this.s.currentBatchSize = 0;\n            this.s.currentBatchSizeBytes = 0;\n        }\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.currentIndex,\n                _id: document._id\n            });\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatchSize += 1;\n        this.s.currentBatchSizeBytes += maxKeySize + bsonSize;\n        this.s.currentIndex += 1;\n        return this;\n    }\n}\nexports.OrderedBulkOperation = OrderedBulkOperation;\n//# sourceMappingURL=ordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2J1bGsvb3JkZXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsYUFBYSxtQkFBTyxDQUFDLHNFQUFTO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLGlCQUFpQixtQkFBTyxDQUFDLDhFQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG9HQUFvRyx5QkFBeUI7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2J1bGsvb3JkZXJlZC5qcz8yMzJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcmRlcmVkQnVsa09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IEJTT04gPSByZXF1aXJlKFwiLi4vYnNvblwiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBPcmRlcmVkQnVsa09wZXJhdGlvbiBleHRlbmRzIGNvbW1vbl8xLkJ1bGtPcGVyYXRpb25CYXNlIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zLCB0cnVlKTtcbiAgICB9XG4gICAgYWRkVG9PcGVyYXRpb25zTGlzdChiYXRjaFR5cGUsIGRvY3VtZW50KSB7XG4gICAgICAgIC8vIEdldCB0aGUgYnNvblNpemVcbiAgICAgICAgY29uc3QgYnNvblNpemUgPSBCU09OLmNhbGN1bGF0ZU9iamVjdFNpemUoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIGNoZWNrS2V5czogZmFsc2UsXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSBkb24ndCBrbm93IHdoYXQgdGhlIHVzZXIgc2VsZWN0ZWQgZm9yIEJTT04gb3B0aW9ucyBoZXJlLFxuICAgICAgICAgICAgLy8gZXJyIG9uIHRoZSBzYWZlIHNpZGUsIGFuZCBjaGVjayB0aGUgc2l6ZSB3aXRoIGlnbm9yZVVuZGVmaW5lZDogZmFsc2UuXG4gICAgICAgICAgICBpZ25vcmVVbmRlZmluZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaHJvdyBlcnJvciBpZiB0aGUgZG9jIGlzIGJpZ2dlciB0aGFuIHRoZSBtYXggQlNPTiBzaXplXG4gICAgICAgIGlmIChic29uU2l6ZSA+PSB0aGlzLnMubWF4QnNvbk9iamVjdFNpemUpXG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IENoYW5nZSB0aGlzIHRvIE1vbmdvQlNPTkVycm9yXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBEb2N1bWVudCBpcyBsYXJnZXIgdGhhbiB0aGUgbWF4aW11bSBzaXplICR7dGhpcy5zLm1heEJzb25PYmplY3RTaXplfWApO1xuICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYmF0Y2ggb2JqZWN0IGlmIHdlIGRvbid0IGhhdmUgYSBjdXJyZW50IG9uZVxuICAgICAgICBpZiAodGhpcy5zLmN1cnJlbnRCYXRjaCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gbmV3IGNvbW1vbl8xLkJhdGNoKGJhdGNoVHlwZSwgdGhpcy5zLmN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWF4S2V5U2l6ZSA9IHRoaXMucy5tYXhLZXlTaXplO1xuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBiYXRjaFxuICAgICAgICBpZiAoXG4gICAgICAgIC8vIE5ldyBiYXRjaCBpZiB3ZSBleGNlZWQgdGhlIG1heCBiYXRjaCBvcCBzaXplXG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplICsgMSA+PSB0aGlzLnMubWF4V3JpdGVCYXRjaFNpemUgfHxcbiAgICAgICAgICAgIC8vIE5ldyBiYXRjaCBpZiB3ZSBleGNlZWQgdGhlIG1heEJhdGNoU2l6ZUJ5dGVzLiBPbmx5IG1hdHRlcnMgaWYgYmF0Y2ggYWxyZWFkeSBoYXMgYSBkb2MsXG4gICAgICAgICAgICAvLyBzaW5jZSB3ZSBjYW4ndCBzZW50IGFuIGVtcHR5IGJhdGNoXG4gICAgICAgICAgICAodGhpcy5zLmN1cnJlbnRCYXRjaFNpemUgPiAwICYmXG4gICAgICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaFNpemVCeXRlcyArIG1heEtleVNpemUgKyBic29uU2l6ZSA+PSB0aGlzLnMubWF4QmF0Y2hTaXplQnl0ZXMpIHx8XG4gICAgICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgdGhlIG5ldyBvcCBkb2VzIG5vdCBoYXZlIHRoZSBzYW1lIG9wIHR5cGUgYXMgdGhlIGN1cnJlbnQgYmF0Y2hcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guYmF0Y2hUeXBlICE9PSBiYXRjaFR5cGUpIHtcbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIGJhdGNoIHRvIHRoZSBleGVjdXRpb24gc3RhY2tcbiAgICAgICAgICAgIHRoaXMucy5iYXRjaGVzLnB1c2godGhpcy5zLmN1cnJlbnRCYXRjaCk7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYmF0Y2hcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSBuZXcgY29tbW9uXzEuQmF0Y2goYmF0Y2hUeXBlLCB0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBjdXJyZW50IHNpemUgdHJhY2tlcnNcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplID0gMDtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2hTaXplQnl0ZXMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5JTlNFUlQpIHtcbiAgICAgICAgICAgIHRoaXMucy5idWxrUmVzdWx0Lmluc2VydGVkSWRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLnMuY3VycmVudEluZGV4LFxuICAgICAgICAgICAgICAgIF9pZDogZG9jdW1lbnQuX2lkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBoYXZlIGFuIGFycmF5IG9mIGRvY3VtZW50c1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkb2N1bWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wZXJhdGlvbiBwYXNzZWQgaW4gY2Fubm90IGJlIGFuIEFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5vcmlnaW5hbEluZGV4ZXMucHVzaCh0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5vcGVyYXRpb25zLnB1c2goZG9jdW1lbnQpO1xuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZSArPSAxO1xuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoU2l6ZUJ5dGVzICs9IG1heEtleVNpemUgKyBic29uU2l6ZTtcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRJbmRleCArPSAxO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnRzLk9yZGVyZWRCdWxrT3BlcmF0aW9uID0gT3JkZXJlZEJ1bGtPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcmRlcmVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/bulk/ordered.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/bulk/unordered.js":
/*!*****************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/bulk/unordered.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnorderedBulkOperation = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/../../../../../node_modules/mongodb/lib/bulk/common.js\");\n/** @public */\nclass UnorderedBulkOperation extends common_1.BulkOperationBase {\n    /** @internal */\n    constructor(collection, options) {\n        super(collection, options, false);\n    }\n    handleWriteError(callback, writeResult) {\n        if (this.s.batches.length) {\n            return false;\n        }\n        return super.handleWriteError(callback, writeResult);\n    }\n    addToOperationsList(batchType, document) {\n        // Get the bsonSize\n        const bsonSize = BSON.calculateObjectSize(document, {\n            checkKeys: false,\n            // Since we don't know what the user selected for BSON options here,\n            // err on the safe side, and check the size with ignoreUndefined: false.\n            ignoreUndefined: false\n        });\n        // Throw error if the doc is bigger than the max BSON size\n        if (bsonSize >= this.s.maxBsonObjectSize) {\n            // TODO(NODE-3483): Change this to MongoBSONError\n            throw new error_1.MongoInvalidArgumentError(`Document is larger than the maximum size ${this.s.maxBsonObjectSize}`);\n        }\n        // Holds the current batch\n        this.s.currentBatch = undefined;\n        // Get the right type of batch\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentBatch = this.s.currentInsertBatch;\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentBatch = this.s.currentUpdateBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentBatch = this.s.currentRemoveBatch;\n        }\n        const maxKeySize = this.s.maxKeySize;\n        // Create a new batch object if we don't have a current one\n        if (this.s.currentBatch == null) {\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // Check if we need to create a new batch\n        if (\n        // New batch if we exceed the max batch op size\n        this.s.currentBatch.size + 1 >= this.s.maxWriteBatchSize ||\n            // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n            // since we can't sent an empty batch\n            (this.s.currentBatch.size > 0 &&\n                this.s.currentBatch.sizeBytes + maxKeySize + bsonSize >= this.s.maxBatchSizeBytes) ||\n            // New batch if the new op does not have the same op type as the current batch\n            this.s.currentBatch.batchType !== batchType) {\n            // Save the batch to the execution stack\n            this.s.batches.push(this.s.currentBatch);\n            // Create a new batch\n            this.s.currentBatch = new common_1.Batch(batchType, this.s.currentIndex);\n        }\n        // We have an array of documents\n        if (Array.isArray(document)) {\n            throw new error_1.MongoInvalidArgumentError('Operation passed in cannot be an Array');\n        }\n        this.s.currentBatch.operations.push(document);\n        this.s.currentBatch.originalIndexes.push(this.s.currentIndex);\n        this.s.currentIndex = this.s.currentIndex + 1;\n        // Save back the current Batch to the right type\n        if (batchType === common_1.BatchType.INSERT) {\n            this.s.currentInsertBatch = this.s.currentBatch;\n            this.s.bulkResult.insertedIds.push({\n                index: this.s.bulkResult.insertedIds.length,\n                _id: document._id\n            });\n        }\n        else if (batchType === common_1.BatchType.UPDATE) {\n            this.s.currentUpdateBatch = this.s.currentBatch;\n        }\n        else if (batchType === common_1.BatchType.DELETE) {\n            this.s.currentRemoveBatch = this.s.currentBatch;\n        }\n        // Update current batch size\n        this.s.currentBatch.size += 1;\n        this.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n        return this;\n    }\n}\nexports.UnorderedBulkOperation = UnorderedBulkOperation;\n//# sourceMappingURL=unordered.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2J1bGsvdW5vcmRlcmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixhQUFhLG1CQUFPLENBQUMsc0VBQVM7QUFDOUIsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsaUJBQWlCLG1CQUFPLENBQUMsOEVBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esb0dBQW9HLHlCQUF5QjtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9idWxrL3Vub3JkZXJlZC5qcz84YjJiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Vbm9yZGVyZWRCdWxrT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgQlNPTiA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIFVub3JkZXJlZEJ1bGtPcGVyYXRpb24gZXh0ZW5kcyBjb21tb25fMS5CdWxrT3BlcmF0aW9uQmFzZSB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucywgZmFsc2UpO1xuICAgIH1cbiAgICBoYW5kbGVXcml0ZUVycm9yKGNhbGxiYWNrLCB3cml0ZVJlc3VsdCkge1xuICAgICAgICBpZiAodGhpcy5zLmJhdGNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmhhbmRsZVdyaXRlRXJyb3IoY2FsbGJhY2ssIHdyaXRlUmVzdWx0KTtcbiAgICB9XG4gICAgYWRkVG9PcGVyYXRpb25zTGlzdChiYXRjaFR5cGUsIGRvY3VtZW50KSB7XG4gICAgICAgIC8vIEdldCB0aGUgYnNvblNpemVcbiAgICAgICAgY29uc3QgYnNvblNpemUgPSBCU09OLmNhbGN1bGF0ZU9iamVjdFNpemUoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgIGNoZWNrS2V5czogZmFsc2UsXG4gICAgICAgICAgICAvLyBTaW5jZSB3ZSBkb24ndCBrbm93IHdoYXQgdGhlIHVzZXIgc2VsZWN0ZWQgZm9yIEJTT04gb3B0aW9ucyBoZXJlLFxuICAgICAgICAgICAgLy8gZXJyIG9uIHRoZSBzYWZlIHNpZGUsIGFuZCBjaGVjayB0aGUgc2l6ZSB3aXRoIGlnbm9yZVVuZGVmaW5lZDogZmFsc2UuXG4gICAgICAgICAgICBpZ25vcmVVbmRlZmluZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBUaHJvdyBlcnJvciBpZiB0aGUgZG9jIGlzIGJpZ2dlciB0aGFuIHRoZSBtYXggQlNPTiBzaXplXG4gICAgICAgIGlmIChic29uU2l6ZSA+PSB0aGlzLnMubWF4QnNvbk9iamVjdFNpemUpIHtcbiAgICAgICAgICAgIC8vIFRPRE8oTk9ERS0zNDgzKTogQ2hhbmdlIHRoaXMgdG8gTW9uZ29CU09ORXJyb3JcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYERvY3VtZW50IGlzIGxhcmdlciB0aGFuIHRoZSBtYXhpbXVtIHNpemUgJHt0aGlzLnMubWF4QnNvbk9iamVjdFNpemV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSG9sZHMgdGhlIGN1cnJlbnQgYmF0Y2hcbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgLy8gR2V0IHRoZSByaWdodCB0eXBlIG9mIGJhdGNoXG4gICAgICAgIGlmIChiYXRjaFR5cGUgPT09IGNvbW1vbl8xLkJhdGNoVHlwZS5JTlNFUlQpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSB0aGlzLnMuY3VycmVudEluc2VydEJhdGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLlVQREFURSkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaCA9IHRoaXMucy5jdXJyZW50VXBkYXRlQmF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuREVMRVRFKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoID0gdGhpcy5zLmN1cnJlbnRSZW1vdmVCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXhLZXlTaXplID0gdGhpcy5zLm1heEtleVNpemU7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBiYXRjaCBvYmplY3QgaWYgd2UgZG9uJ3QgaGF2ZSBhIGN1cnJlbnQgb25lXG4gICAgICAgIGlmICh0aGlzLnMuY3VycmVudEJhdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSBuZXcgY29tbW9uXzEuQmF0Y2goYmF0Y2hUeXBlLCB0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGNyZWF0ZSBhIG5ldyBiYXRjaFxuICAgICAgICBpZiAoXG4gICAgICAgIC8vIE5ldyBiYXRjaCBpZiB3ZSBleGNlZWQgdGhlIG1heCBiYXRjaCBvcCBzaXplXG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guc2l6ZSArIDEgPj0gdGhpcy5zLm1heFdyaXRlQmF0Y2hTaXplIHx8XG4gICAgICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgd2UgZXhjZWVkIHRoZSBtYXhCYXRjaFNpemVCeXRlcy4gT25seSBtYXR0ZXJzIGlmIGJhdGNoIGFscmVhZHkgaGFzIGEgZG9jLFxuICAgICAgICAgICAgLy8gc2luY2Ugd2UgY2FuJ3Qgc2VudCBhbiBlbXB0eSBiYXRjaFxuICAgICAgICAgICAgKHRoaXMucy5jdXJyZW50QmF0Y2guc2l6ZSA+IDAgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLnNpemVCeXRlcyArIG1heEtleVNpemUgKyBic29uU2l6ZSA+PSB0aGlzLnMubWF4QmF0Y2hTaXplQnl0ZXMpIHx8XG4gICAgICAgICAgICAvLyBOZXcgYmF0Y2ggaWYgdGhlIG5ldyBvcCBkb2VzIG5vdCBoYXZlIHRoZSBzYW1lIG9wIHR5cGUgYXMgdGhlIGN1cnJlbnQgYmF0Y2hcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guYmF0Y2hUeXBlICE9PSBiYXRjaFR5cGUpIHtcbiAgICAgICAgICAgIC8vIFNhdmUgdGhlIGJhdGNoIHRvIHRoZSBleGVjdXRpb24gc3RhY2tcbiAgICAgICAgICAgIHRoaXMucy5iYXRjaGVzLnB1c2godGhpcy5zLmN1cnJlbnRCYXRjaCk7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBuZXcgYmF0Y2hcbiAgICAgICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2ggPSBuZXcgY29tbW9uXzEuQmF0Y2goYmF0Y2hUeXBlLCB0aGlzLnMuY3VycmVudEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBoYXZlIGFuIGFycmF5IG9mIGRvY3VtZW50c1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkb2N1bWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ09wZXJhdGlvbiBwYXNzZWQgaW4gY2Fubm90IGJlIGFuIEFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zLmN1cnJlbnRCYXRjaC5vcGVyYXRpb25zLnB1c2goZG9jdW1lbnQpO1xuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLm9yaWdpbmFsSW5kZXhlcy5wdXNoKHRoaXMucy5jdXJyZW50SW5kZXgpO1xuICAgICAgICB0aGlzLnMuY3VycmVudEluZGV4ID0gdGhpcy5zLmN1cnJlbnRJbmRleCArIDE7XG4gICAgICAgIC8vIFNhdmUgYmFjayB0aGUgY3VycmVudCBCYXRjaCB0byB0aGUgcmlnaHQgdHlwZVxuICAgICAgICBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuSU5TRVJUKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudEluc2VydEJhdGNoID0gdGhpcy5zLmN1cnJlbnRCYXRjaDtcbiAgICAgICAgICAgIHRoaXMucy5idWxrUmVzdWx0Lmluc2VydGVkSWRzLnB1c2goe1xuICAgICAgICAgICAgICAgIGluZGV4OiB0aGlzLnMuYnVsa1Jlc3VsdC5pbnNlcnRlZElkcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgX2lkOiBkb2N1bWVudC5faWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJhdGNoVHlwZSA9PT0gY29tbW9uXzEuQmF0Y2hUeXBlLlVQREFURSkge1xuICAgICAgICAgICAgdGhpcy5zLmN1cnJlbnRVcGRhdGVCYXRjaCA9IHRoaXMucy5jdXJyZW50QmF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYmF0Y2hUeXBlID09PSBjb21tb25fMS5CYXRjaFR5cGUuREVMRVRFKSB7XG4gICAgICAgICAgICB0aGlzLnMuY3VycmVudFJlbW92ZUJhdGNoID0gdGhpcy5zLmN1cnJlbnRCYXRjaDtcbiAgICAgICAgfVxuICAgICAgICAvLyBVcGRhdGUgY3VycmVudCBiYXRjaCBzaXplXG4gICAgICAgIHRoaXMucy5jdXJyZW50QmF0Y2guc2l6ZSArPSAxO1xuICAgICAgICB0aGlzLnMuY3VycmVudEJhdGNoLnNpemVCeXRlcyArPSBtYXhLZXlTaXplICsgYnNvblNpemU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cbmV4cG9ydHMuVW5vcmRlcmVkQnVsa09wZXJhdGlvbiA9IFVub3JkZXJlZEJ1bGtPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bm9yZGVyZWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/bulk/unordered.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/change_stream.js":
/*!****************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/change_stream.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStream = void 0;\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/../../../../../node_modules/mongodb/lib/collection.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/../../../../../node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = [\n    'resumeAfter',\n    'startAfter',\n    'startAtOperationTime',\n    'fullDocument',\n    'fullDocumentBeforeChange',\n    'showExpandedEvents'\n];\nconst CHANGE_DOMAIN_TYPES = {\n    COLLECTION: Symbol('Collection'),\n    DATABASE: Symbol('Database'),\n    CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @internal\n     *\n     * @param parent - The parent object that created this change stream\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n     */\n    constructor(parent, pipeline = [], options = {}) {\n        super();\n        this.pipeline = pipeline;\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        if (parent instanceof collection_1.Collection) {\n            this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n        }\n        else if (parent instanceof db_1.Db) {\n            this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n        }\n        else if (parent instanceof mongo_client_1.MongoClient) {\n            this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n        }\n        else {\n            throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n        }\n        this.parent = parent;\n        this.namespace = parent.s.namespace;\n        if (!this.options.readPreference && parent.readPreference) {\n            this.options.readPreference = parent.readPreference;\n        }\n        // Create contained Change Stream cursor\n        this.cursor = this._createChangeStreamCursor(options);\n        this[kClosed] = false;\n        this[kMode] = false;\n        // Listen for any `change` listeners being added to ChangeStream\n        this.on('newListener', eventName => {\n            if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n                this._streamEvents(this.cursor);\n            }\n        });\n        this.on('removeListener', eventName => {\n            if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n                this[kCursorStream]?.removeAllListeners('data');\n            }\n        });\n    }\n    /** @internal */\n    get cursorStream() {\n        return this[kCursorStream];\n    }\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken() {\n        return this.cursor?.resumeToken;\n    }\n    /** Check if there is any document still available in the Change Stream */\n    async hasNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const hasNext = await this.cursor.hasNext();\n                return hasNext;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /** Get the next available document from the Change Stream. */\n    async next() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.next();\n                const processedChange = this._processChange(change ?? null);\n                return processedChange;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        this._setIsIterator();\n        // Change streams must resume indefinitely while each resume event succeeds.\n        // This loop continues until either a change event is received or until a resume attempt\n        // fails.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            try {\n                const change = await this.cursor.tryNext();\n                return change ?? null;\n            }\n            catch (error) {\n                try {\n                    await this._processErrorIteratorMode(error);\n                }\n                catch (error) {\n                    try {\n                        await this.close();\n                    }\n                    catch {\n                        // We are not concerned with errors from close()\n                    }\n                    throw error;\n                }\n            }\n        }\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            // Change streams run indefinitely as long as errors are resumable\n            // So the only loop breaking condition is if `next()` throws\n            while (true) {\n                yield await this.next();\n            }\n        }\n        finally {\n            try {\n                await this.close();\n            }\n            catch {\n                // we're not concerned with errors from close()\n            }\n        }\n    }\n    /** Is the cursor closed */\n    get closed() {\n        return this[kClosed] || this.cursor.closed;\n    }\n    /** Close the Change Stream */\n    async close() {\n        this[kClosed] = true;\n        const cursor = this.cursor;\n        try {\n            await cursor.close();\n        }\n        finally {\n            this._endStream();\n        }\n    }\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options) {\n        if (this.closed) {\n            throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        this.streamOptions = options;\n        return this.cursor.stream(options);\n    }\n    /** @internal */\n    _setIsEmitter() {\n        if (this[kMode] === 'iterator') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n        }\n        this[kMode] = 'emitter';\n    }\n    /** @internal */\n    _setIsIterator() {\n        if (this[kMode] === 'emitter') {\n            // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n            throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n        }\n        this[kMode] = 'iterator';\n    }\n    /**\n     * Create a new change stream cursor based on self's configuration\n     * @internal\n     */\n    _createChangeStreamCursor(options) {\n        const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n        if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n            changeStreamStageOptions.allChangesForCluster = true;\n        }\n        const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n        const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n            ? this.parent\n            : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n                ? this.parent.client\n                : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n                    ? this.parent.client\n                    : null;\n        if (client == null) {\n            // This should never happen because of the assertion in the constructor\n            throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n        }\n        const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, options);\n        for (const event of CHANGE_STREAM_EVENTS) {\n            changeStreamCursor.on(event, e => this.emit(event, e));\n        }\n        if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n            this._streamEvents(changeStreamCursor);\n        }\n        return changeStreamCursor;\n    }\n    /** @internal */\n    _closeEmitterModeWithError(error) {\n        this.emit(ChangeStream.ERROR, error);\n        this.close().catch(() => null);\n    }\n    /** @internal */\n    _streamEvents(cursor) {\n        this._setIsEmitter();\n        const stream = this[kCursorStream] ?? cursor.stream();\n        this[kCursorStream] = stream;\n        stream.on('data', change => {\n            try {\n                const processedChange = this._processChange(change);\n                this.emit(ChangeStream.CHANGE, processedChange);\n            }\n            catch (error) {\n                this.emit(ChangeStream.ERROR, error);\n            }\n        });\n        stream.on('error', error => this._processErrorStreamMode(error));\n    }\n    /** @internal */\n    _endStream() {\n        const cursorStream = this[kCursorStream];\n        if (cursorStream) {\n            ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n            cursorStream.destroy();\n        }\n        this[kCursorStream] = undefined;\n    }\n    /** @internal */\n    _processChange(change) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        // a null change means the cursor has been notified, implicitly closing the change stream\n        if (change == null) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (change && !change._id) {\n            throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n        }\n        // cache the resume token\n        this.cursor.cacheResumeToken(change._id);\n        // wipe the startAtOperationTime if there was one so that there won't be a conflict\n        // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n        this.options.startAtOperationTime = undefined;\n        return change;\n    }\n    /** @internal */\n    _processErrorStreamMode(changeStreamError) {\n        // If the change stream has been closed explicitly, do not process error.\n        if (this[kClosed])\n            return;\n        if ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            this._endStream();\n            this.cursor.close().catch(() => null);\n            const topology = (0, utils_1.getTopology)(this.parent);\n            topology.selectServer(this.cursor.readPreference, {}, serverSelectionError => {\n                if (serverSelectionError)\n                    return this._closeEmitterModeWithError(changeStreamError);\n                this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n            });\n        }\n        else {\n            this._closeEmitterModeWithError(changeStreamError);\n        }\n    }\n    /** @internal */\n    async _processErrorIteratorMode(changeStreamError) {\n        if (this[kClosed]) {\n            // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n            throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n        }\n        if (!(0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion)) {\n            try {\n                await this.close();\n            }\n            catch {\n                // ignore errors from close\n            }\n            throw changeStreamError;\n        }\n        await this.cursor.close().catch(() => null);\n        const topology = (0, utils_1.getTopology)(this.parent);\n        try {\n            await topology.selectServerAsync(this.cursor.readPreference, {});\n            this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n        }\n        catch {\n            // if the topology can't reconnect, close the stream\n            await this.close();\n            throw changeStreamError;\n        }\n    }\n}\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\nexports.ChangeStream = ChangeStream;\n//# sourceMappingURL=change_stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/change_stream.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js":
/*!****************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AutoEncrypter = exports.AutoEncryptionLoggerLevel = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ../mongo_client */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_client.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst mongocryptd_manager_1 = __webpack_require__(/*! ./mongocryptd_manager */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/** @public */\nexports.AutoEncryptionLoggerLevel = Object.freeze({\n    FatalError: 0,\n    Error: 1,\n    Warning: 2,\n    Info: 3,\n    Trace: 4\n});\n// Typescript errors if we index objects with `Symbol.for(...)`, so\n// to avoid TS errors we pull them out into variables.  Then we can type\n// the objects (and class) that we expect to see them on and prevent TS\n// errors.\n/** @internal */\nconst kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');\n/** @internal */\nconst kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');\n/**\n * @internal An internal class to be used by the driver for auto encryption\n * **NOTE**: Not meant to be instantiated directly, this is for internal use only.\n */\nclass AutoEncrypter {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create an AutoEncrypter\n     *\n     * **Note**: Do not instantiate this class directly. Rather, supply the relevant options to a MongoClient\n     *\n     * **Note**: Supplying `options.schemaMap` provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending unencrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     *\n     * @example <caption>Create an AutoEncrypter that makes use of mongocryptd</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using mongocryptd\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {\n     *         accessKeyId: AWS_ACCESS_KEY,\n     *         secretAccessKey: AWS_SECRET_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     * @example <caption>Create an AutoEncrypter that makes use of libmongocrypt's CSFLE shared library</caption>\n     * ```ts\n     * // Enabling autoEncryption via a MongoClient using CSFLE shared library\n     * const { MongoClient } = require('mongodb');\n     * const client = new MongoClient(URL, {\n     *   autoEncryption: {\n     *     kmsProviders: {\n     *       aws: {}\n     *     },\n     *     extraOptions: {\n     *       cryptSharedLibPath: '/path/to/local/crypt/shared/lib',\n     *       cryptSharedLibRequired: true\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * await client.connect();\n     * // From here on, the client will be encrypting / decrypting automatically\n     */\n    constructor(client, options) {\n        /**\n         * Used by devtools to enable decorating decryption results.\n         *\n         * When set and enabled, `decrypt` will automatically recursively\n         * traverse a decrypted document and if a field has been decrypted,\n         * it will mark it as decrypted.  Compass uses this to determine which\n         * fields were decrypted.\n         */\n        this[_a] = false;\n        this._client = client;\n        this._bypassEncryption = options.bypassAutoEncryption === true;\n        this._keyVaultNamespace = options.keyVaultNamespace || 'admin.datakeys';\n        this._keyVaultClient = options.keyVaultClient || client;\n        this._metaDataClient = options.metadataClient || client;\n        this._proxyOptions = options.proxyOptions || {};\n        this._tlsOptions = options.tlsOptions || {};\n        this._kmsProviders = options.kmsProviders || {};\n        const mongoCryptOptions = {\n            cryptoCallbacks\n        };\n        if (options.schemaMap) {\n            mongoCryptOptions.schemaMap = Buffer.isBuffer(options.schemaMap)\n                ? options.schemaMap\n                : (0, bson_1.serialize)(options.schemaMap);\n        }\n        if (options.encryptedFieldsMap) {\n            mongoCryptOptions.encryptedFieldsMap = Buffer.isBuffer(options.encryptedFieldsMap)\n                ? options.encryptedFieldsMap\n                : (0, bson_1.serialize)(options.encryptedFieldsMap);\n        }\n        mongoCryptOptions.kmsProviders = !Buffer.isBuffer(this._kmsProviders)\n            ? (0, bson_1.serialize)(this._kmsProviders)\n            : this._kmsProviders;\n        if (options.options?.logger) {\n            mongoCryptOptions.logger = options.options.logger;\n        }\n        if (options.extraOptions && options.extraOptions.cryptSharedLibPath) {\n            mongoCryptOptions.cryptSharedLibPath = options.extraOptions.cryptSharedLibPath;\n        }\n        if (options.bypassQueryAnalysis) {\n            mongoCryptOptions.bypassQueryAnalysis = options.bypassQueryAnalysis;\n        }\n        this._bypassMongocryptdAndCryptShared = this._bypassEncryption || !!options.bypassQueryAnalysis;\n        if (options.extraOptions && options.extraOptions.cryptSharedLibSearchPaths) {\n            // Only for driver testing\n            mongoCryptOptions.cryptSharedLibSearchPaths = options.extraOptions.cryptSharedLibSearchPaths;\n        }\n        else if (!this._bypassMongocryptdAndCryptShared) {\n            mongoCryptOptions.cryptSharedLibSearchPaths = ['$SYSTEM'];\n        }\n        const MongoCrypt = AutoEncrypter.getMongoCrypt();\n        this._mongocrypt = new MongoCrypt(mongoCryptOptions);\n        this._contextCounter = 0;\n        if (options.extraOptions &&\n            options.extraOptions.cryptSharedLibRequired &&\n            !this.cryptSharedLibVersionInfo) {\n            throw new errors_1.MongoCryptInvalidArgumentError('`cryptSharedLibRequired` set but no crypt_shared library loaded');\n        }\n        // Only instantiate mongocryptd manager/client once we know for sure\n        // that we are not using the CSFLE shared library.\n        if (!this._bypassMongocryptdAndCryptShared && !this.cryptSharedLibVersionInfo) {\n            this._mongocryptdManager = new mongocryptd_manager_1.MongocryptdManager(options.extraOptions);\n            const clientOptions = {\n                serverSelectionTimeoutMS: 10000\n            };\n            if (options.extraOptions == null || typeof options.extraOptions.mongocryptdURI !== 'string') {\n                clientOptions.family = 4;\n            }\n            this._mongocryptdClient = new mongo_client_1.MongoClient(this._mongocryptdManager.uri, clientOptions);\n        }\n    }\n    /**\n     * Initializes the auto encrypter by spawning a mongocryptd and connecting to it.\n     *\n     * This function is a no-op when bypassSpawn is set or the crypt shared library is used.\n     */\n    async init() {\n        if (this._bypassMongocryptdAndCryptShared || this.cryptSharedLibVersionInfo) {\n            return;\n        }\n        if (!this._mongocryptdManager) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdManager is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdClient) {\n            throw new error_1.MongoRuntimeError('Reached impossible state: mongocryptdClient is undefined when neither bypassSpawn nor the shared lib are specified.');\n        }\n        if (!this._mongocryptdManager.bypassSpawn) {\n            await this._mongocryptdManager.spawn();\n        }\n        try {\n            const client = await this._mongocryptdClient.connect();\n            return client;\n        }\n        catch (error) {\n            const { message } = error;\n            if (message && (message.match(/timed out after/) || message.match(/ENOTFOUND/))) {\n                throw new error_1.MongoRuntimeError('Unable to connect to `mongocryptd`, please make sure it is running or in your PATH for auto-spawn', { cause: error });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Cleans up the `_mongocryptdClient`, if present.\n     */\n    async teardown(force) {\n        await this._mongocryptdClient?.close(force);\n    }\n    /**\n     * Encrypt a command for a given namespace.\n     */\n    async encrypt(ns, cmd, options = {}) {\n        if (this._bypassEncryption) {\n            // If `bypassAutoEncryption` has been specified, don't encrypt\n            return cmd;\n        }\n        const commandBuffer = Buffer.isBuffer(cmd) ? cmd : (0, bson_1.serialize)(cmd, options);\n        const context = this._mongocrypt.makeEncryptionContext(utils_1.MongoDBCollectionNamespace.fromString(ns).db, commandBuffer);\n        context.id = this._contextCounter++;\n        context.ns = ns;\n        context.document = cmd;\n        const stateMachine = new state_machine_1.StateMachine({\n            promoteValues: false,\n            promoteLongs: false,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        return stateMachine.execute(this, context);\n    }\n    /**\n     * Decrypt a command response\n     */\n    async decrypt(response, options = {}) {\n        const buffer = Buffer.isBuffer(response) ? response : (0, bson_1.serialize)(response, options);\n        const context = this._mongocrypt.makeDecryptionContext(buffer);\n        context.id = this._contextCounter++;\n        const stateMachine = new state_machine_1.StateMachine({\n            ...options,\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const decorateResult = this[kDecorateResult];\n        const result = await stateMachine.execute(this, context);\n        if (decorateResult) {\n            decorateDecryptionResult(result, response);\n        }\n        return result;\n    }\n    /**\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return (0, providers_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    /**\n     * Return the current libmongocrypt's CSFLE shared library version\n     * as `{ version: bigint, versionStr: string }`, or `null` if no CSFLE\n     * shared library was loaded.\n     */\n    get cryptSharedLibVersionInfo() {\n        return this._mongocrypt.cryptSharedLibVersionInfo;\n    }\n    static get libmongocryptVersion() {\n        return AutoEncrypter.getMongoCrypt().libmongocryptVersion;\n    }\n}\nexports.AutoEncrypter = AutoEncrypter;\n_a = kDecorateResult;\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original, isTopLevelDecorateCall = true) {\n    if (isTopLevelDecorateCall) {\n        // The original value could have been either a JS object or a BSON buffer\n        if (Buffer.isBuffer(original)) {\n            original = (0, bson_1.deserialize)(original);\n        }\n        if (Buffer.isBuffer(decrypted)) {\n            throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n        }\n    }\n    if (!decrypted || typeof decrypted !== 'object')\n        return;\n    for (const k of Object.keys(decrypted)) {\n        const originalValue = original[k];\n        // An object was decrypted by libmongocrypt if and only if it was\n        // a BSON Binary object with subtype 6.\n        if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n            if (!decrypted[kDecoratedKeys]) {\n                Object.defineProperty(decrypted, kDecoratedKeys, {\n                    value: [],\n                    configurable: true,\n                    enumerable: false,\n                    writable: false\n                });\n            }\n            // this is defined in the preceding if-statement\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            decrypted[kDecoratedKeys].push(k);\n            // Do not recurse into this decrypted value. It could be a sub-document/array,\n            // in which case there is no original value associated with its subfields.\n            continue;\n        }\n        decorateDecryptionResult(decrypted[k], originalValue, false);\n    }\n}\n//# sourceMappingURL=auto_encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/client_encryption.js":
/*!*******************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/client_encryption.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ClientEncryption = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst cryptoCallbacks = __webpack_require__(/*! ./crypto_callbacks */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst index_1 = __webpack_require__(/*! ./providers/index */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/index.js\");\nconst state_machine_1 = __webpack_require__(/*! ./state_machine */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/state_machine.js\");\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nclass ClientEncryption {\n    /** @internal */\n    static getMongoCrypt() {\n        const encryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in encryption) {\n            throw encryption.kModuleError;\n        }\n        return encryption.MongoCrypt;\n    }\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    constructor(client, options) {\n        this._client = client;\n        this._proxyOptions = options.proxyOptions ?? {};\n        this._tlsOptions = options.tlsOptions ?? {};\n        this._kmsProviders = options.kmsProviders || {};\n        if (options.keyVaultNamespace == null) {\n            throw new errors_1.MongoCryptInvalidArgumentError('Missing required option `keyVaultNamespace`');\n        }\n        const mongoCryptOptions = {\n            ...options,\n            cryptoCallbacks,\n            kmsProviders: !Buffer.isBuffer(this._kmsProviders)\n                ? (0, bson_1.serialize)(this._kmsProviders)\n                : this._kmsProviders\n        };\n        this._keyVaultNamespace = options.keyVaultNamespace;\n        this._keyVaultClient = options.keyVaultClient || client;\n        const MongoCrypt = ClientEncryption.getMongoCrypt();\n        this._mongoCrypt = new MongoCrypt(mongoCryptOptions);\n    }\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */\n    async createDataKey(provider, options = {}) {\n        if (options.keyAltNames && !Array.isArray(options.keyAltNames)) {\n            throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but was of type ${typeof options.keyAltNames}.`);\n        }\n        let keyAltNames = undefined;\n        if (options.keyAltNames && options.keyAltNames.length > 0) {\n            keyAltNames = options.keyAltNames.map((keyAltName, i) => {\n                if (typeof keyAltName !== 'string') {\n                    throw new errors_1.MongoCryptInvalidArgumentError(`Option \"keyAltNames\" must be an array of strings, but item at index ${i} was of type ${typeof keyAltName}`);\n                }\n                return (0, bson_1.serialize)({ keyAltName });\n            });\n        }\n        let keyMaterial = undefined;\n        if (options.keyMaterial) {\n            keyMaterial = (0, bson_1.serialize)({ keyMaterial: options.keyMaterial });\n        }\n        const dataKeyBson = (0, bson_1.serialize)({\n            provider,\n            ...options.masterKey\n        });\n        const context = this._mongoCrypt.makeDataKeyContext(dataKeyBson, {\n            keyAltNames,\n            keyMaterial\n        });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const dataKey = await stateMachine.execute(this, context);\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const { insertedId } = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .insertOne(dataKey, { writeConcern: { w: 'majority' } });\n        return insertedId;\n    }\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n    async rewrapManyDataKey(filter, options) {\n        let keyEncryptionKeyBson = undefined;\n        if (options) {\n            const keyEncryptionKey = Object.assign({ provider: options.provider }, options.masterKey);\n            keyEncryptionKeyBson = (0, bson_1.serialize)(keyEncryptionKey);\n        }\n        const filterBson = (0, bson_1.serialize)(filter);\n        const context = this._mongoCrypt.makeRewrapManyDataKeyContext(filterBson, keyEncryptionKeyBson);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v: dataKeys } = await stateMachine.execute(this, context);\n        if (dataKeys.length === 0) {\n            return {};\n        }\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const replacements = dataKeys.map((key) => ({\n            updateOne: {\n                filter: { _id: key._id },\n                update: {\n                    $set: {\n                        masterKey: key.masterKey,\n                        keyMaterial: key.keyMaterial\n                    },\n                    $currentDate: {\n                        updateDate: true\n                    }\n                }\n            }\n        }));\n        const result = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .bulkWrite(replacements, {\n            writeConcern: { w: 'majority' }\n        });\n        return { bulkWriteResult: result };\n    }\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n    async deleteKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .deleteOne({ _id }, { writeConcern: { w: 'majority' } });\n    }\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n    getKeys() {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .find({}, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n    async getKey(_id) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ _id }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n    async getKeyByAltName(keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        return this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOne({ keyAltNames: keyAltName }, { readConcern: { level: 'majority' } });\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async addKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, { $addToSet: { keyAltNames: keyAltName } }, { writeConcern: { w: 'majority' }, returnDocument: 'before' });\n        return value;\n    }\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    async removeKeyAltName(_id, keyAltName) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(this._keyVaultNamespace);\n        const pipeline = [\n            {\n                $set: {\n                    keyAltNames: {\n                        $cond: [\n                            {\n                                $eq: ['$keyAltNames', [keyAltName]]\n                            },\n                            '$$REMOVE',\n                            {\n                                $filter: {\n                                    input: '$keyAltNames',\n                                    cond: {\n                                        $ne: ['$$this', keyAltName]\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        ];\n        const value = await this._keyVaultClient\n            .db(dbName)\n            .collection(collectionName)\n            .findOneAndUpdate({ _id }, pipeline, {\n            writeConcern: { w: 'majority' },\n            returnDocument: 'before'\n        });\n        return value;\n    }\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n    async createEncryptedCollection(db, name, options) {\n        const { provider, masterKey, createCollectionOptions: { encryptedFields: { ...encryptedFields }, ...createCollectionOptions } } = options;\n        if (Array.isArray(encryptedFields.fields)) {\n            const createDataKeyPromises = encryptedFields.fields.map(async (field) => field == null || typeof field !== 'object' || field.keyId != null\n                ? field\n                : {\n                    ...field,\n                    keyId: await this.createDataKey(provider, { masterKey })\n                });\n            const createDataKeyResolutions = await Promise.allSettled(createDataKeyPromises);\n            encryptedFields.fields = createDataKeyResolutions.map((resolution, index) => resolution.status === 'fulfilled' ? resolution.value : encryptedFields.fields[index]);\n            const rejection = createDataKeyResolutions.find((result) => result.status === 'rejected');\n            if (rejection != null) {\n                throw new errors_1.MongoCryptCreateDataKeyError(encryptedFields, { cause: rejection.reason });\n            }\n        }\n        try {\n            const collection = await db.createCollection(name, {\n                ...createCollectionOptions,\n                encryptedFields\n            });\n            return { collection, encryptedFields };\n        }\n        catch (cause) {\n            throw new errors_1.MongoCryptCreateEncryptedCollectionError(encryptedFields, { cause });\n        }\n    }\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n    async encrypt(value, options) {\n        return this._encrypt(value, false, options);\n    }\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"rangePreview\" and algorithm is \"RangePreview\".\n     *\n     * @experimental The Range algorithm is experimental only. It is not intended for production use. It is subject to breaking changes.\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n    async encryptExpression(expression, options) {\n        return this._encrypt(expression, true, options);\n    }\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n    async decrypt(value) {\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const context = this._mongoCrypt.makeExplicitDecryptionContext(valueBuffer);\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const { v } = await stateMachine.execute(this, context);\n        return v;\n    }\n    /**\n     * @internal\n     * Ask the user for KMS credentials.\n     *\n     * This returns anything that looks like the kmsProviders original input\n     * option. It can be empty, and any provider specified here will override\n     * the original ones.\n     */\n    async askForKMSCredentials() {\n        return (0, index_1.refreshKMSCredentials)(this._kmsProviders);\n    }\n    static get libmongocryptVersion() {\n        return ClientEncryption.getMongoCrypt().libmongocryptVersion;\n    }\n    /**\n     * @internal\n     * A helper that perform explicit encryption of values and expressions.\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to encrypt. Must be of a type that can be serialized into BSON\n     * @param expressionMode - a boolean that indicates whether or not to encrypt the value as an expression\n     * @param options - options to pass to encrypt\n     * @returns the raw result of the call to stateMachine.execute().  When expressionMode is set to true, the return\n     *          value will be a bson document.  When false, the value will be a BSON Binary.\n     *\n     */\n    async _encrypt(value, expressionMode, options) {\n        const { algorithm, keyId, keyAltName, contentionFactor, queryType, rangeOptions } = options;\n        const contextOptions = {\n            expressionMode,\n            algorithm\n        };\n        if (keyId) {\n            contextOptions.keyId = keyId.buffer;\n        }\n        if (keyAltName) {\n            if (keyId) {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options\" cannot contain both \"keyId\" and \"keyAltName\"`);\n            }\n            if (typeof keyAltName !== 'string') {\n                throw new errors_1.MongoCryptInvalidArgumentError(`\"options.keyAltName\" must be of type string, but was of type ${typeof keyAltName}`);\n            }\n            contextOptions.keyAltName = (0, bson_1.serialize)({ keyAltName });\n        }\n        if (typeof contentionFactor === 'number' || typeof contentionFactor === 'bigint') {\n            contextOptions.contentionFactor = contentionFactor;\n        }\n        if (typeof queryType === 'string') {\n            contextOptions.queryType = queryType;\n        }\n        if (typeof rangeOptions === 'object') {\n            contextOptions.rangeOptions = (0, bson_1.serialize)(rangeOptions);\n        }\n        const valueBuffer = (0, bson_1.serialize)({ v: value });\n        const stateMachine = new state_machine_1.StateMachine({\n            proxyOptions: this._proxyOptions,\n            tlsOptions: this._tlsOptions\n        });\n        const context = this._mongoCrypt.makeExplicitEncryptionContext(valueBuffer, contextOptions);\n        const result = await stateMachine.execute(this, context);\n        return result.v;\n    }\n}\nexports.ClientEncryption = ClientEncryption;\n//# sourceMappingURL=client_encryption.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/client_encryption.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js":
/*!******************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hmacSha256Hook = exports.hmacSha512Hook = exports.aes256CtrDecryptHook = exports.aes256CtrEncryptHook = exports.aes256CbcDecryptHook = exports.aes256CbcEncryptHook = exports.signRsaSha256Hook = exports.makeHmacHook = exports.sha256Hook = exports.randomHook = exports.makeAES256Hook = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nfunction makeAES256Hook(method, mode) {\n    return function (key, iv, input, output) {\n        let result;\n        try {\n            const cipher = crypto[method](mode, key, iv);\n            cipher.setAutoPadding(false);\n            result = cipher.update(input);\n            const final = cipher.final();\n            if (final.length > 0) {\n                result = Buffer.concat([result, final]);\n            }\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeAES256Hook = makeAES256Hook;\nfunction randomHook(buffer, count) {\n    try {\n        crypto.randomFillSync(buffer, 0, count);\n    }\n    catch (e) {\n        return e;\n    }\n    return count;\n}\nexports.randomHook = randomHook;\nfunction sha256Hook(input, output) {\n    let result;\n    try {\n        result = crypto.createHash('sha256').update(input).digest();\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.sha256Hook = sha256Hook;\nfunction makeHmacHook(algorithm) {\n    return (key, input, output) => {\n        let result;\n        try {\n            result = crypto.createHmac(algorithm, key).update(input).digest();\n        }\n        catch (e) {\n            return e;\n        }\n        result.copy(output);\n        return result.length;\n    };\n}\nexports.makeHmacHook = makeHmacHook;\nfunction signRsaSha256Hook(key, input, output) {\n    let result;\n    try {\n        const signer = crypto.createSign('sha256WithRSAEncryption');\n        const privateKey = Buffer.from(`-----BEGIN PRIVATE KEY-----\\n${key.toString('base64')}\\n-----END PRIVATE KEY-----\\n`);\n        result = signer.update(input).end().sign(privateKey);\n    }\n    catch (e) {\n        return e;\n    }\n    result.copy(output);\n    return result.length;\n}\nexports.signRsaSha256Hook = signRsaSha256Hook;\nexports.aes256CbcEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-cbc');\nexports.aes256CbcDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-cbc');\nexports.aes256CtrEncryptHook = makeAES256Hook('createCipheriv', 'aes-256-ctr');\nexports.aes256CtrDecryptHook = makeAES256Hook('createDecipheriv', 'aes-256-ctr');\nexports.hmacSha512Hook = makeHmacHook('sha512');\nexports.hmacSha256Hook = makeHmacHook('sha256');\n//# sourceMappingURL=crypto_callbacks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vY3J5cHRvX2NhbGxiYWNrcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxzQkFBc0IsR0FBRyw0QkFBNEIsR0FBRyw0QkFBNEIsR0FBRyw0QkFBNEIsR0FBRyw0QkFBNEIsR0FBRyx5QkFBeUIsR0FBRyxvQkFBb0IsR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxzQkFBc0I7QUFDalMsZUFBZSxtQkFBTyxDQUFDLHNCQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFLHVCQUF1QjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1QixzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vY3J5cHRvX2NhbGxiYWNrcy5qcz8xMTgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5obWFjU2hhMjU2SG9vayA9IGV4cG9ydHMuaG1hY1NoYTUxMkhvb2sgPSBleHBvcnRzLmFlczI1NkN0ckRlY3J5cHRIb29rID0gZXhwb3J0cy5hZXMyNTZDdHJFbmNyeXB0SG9vayA9IGV4cG9ydHMuYWVzMjU2Q2JjRGVjcnlwdEhvb2sgPSBleHBvcnRzLmFlczI1NkNiY0VuY3J5cHRIb29rID0gZXhwb3J0cy5zaWduUnNhU2hhMjU2SG9vayA9IGV4cG9ydHMubWFrZUhtYWNIb29rID0gZXhwb3J0cy5zaGEyNTZIb29rID0gZXhwb3J0cy5yYW5kb21Ib29rID0gZXhwb3J0cy5tYWtlQUVTMjU2SG9vayA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5mdW5jdGlvbiBtYWtlQUVTMjU2SG9vayhtZXRob2QsIG1vZGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgaXYsIGlucHV0LCBvdXRwdXQpIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNpcGhlciA9IGNyeXB0b1ttZXRob2RdKG1vZGUsIGtleSwgaXYpO1xuICAgICAgICAgICAgY2lwaGVyLnNldEF1dG9QYWRkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNpcGhlci51cGRhdGUoaW5wdXQpO1xuICAgICAgICAgICAgY29uc3QgZmluYWwgPSBjaXBoZXIuZmluYWwoKTtcbiAgICAgICAgICAgIGlmIChmaW5hbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gQnVmZmVyLmNvbmNhdChbcmVzdWx0LCBmaW5hbF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbiAgICB9O1xufVxuZXhwb3J0cy5tYWtlQUVTMjU2SG9vayA9IG1ha2VBRVMyNTZIb29rO1xuZnVuY3Rpb24gcmFuZG9tSG9vayhidWZmZXIsIGNvdW50KSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY3J5cHRvLnJhbmRvbUZpbGxTeW5jKGJ1ZmZlciwgMCwgY291bnQpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xufVxuZXhwb3J0cy5yYW5kb21Ib29rID0gcmFuZG9tSG9vaztcbmZ1bmN0aW9uIHNoYTI1Nkhvb2soaW5wdXQsIG91dHB1dCkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShpbnB1dCkuZGlnZXN0KCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgICByZXN1bHQuY29weShvdXRwdXQpO1xuICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xufVxuZXhwb3J0cy5zaGEyNTZIb29rID0gc2hhMjU2SG9vaztcbmZ1bmN0aW9uIG1ha2VIbWFjSG9vayhhbGdvcml0aG0pIHtcbiAgICByZXR1cm4gKGtleSwgaW5wdXQsIG91dHB1dCkgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0ID0gY3J5cHRvLmNyZWF0ZUhtYWMoYWxnb3JpdGhtLCBrZXkpLnVwZGF0ZShpbnB1dCkuZGlnZXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5jb3B5KG91dHB1dCk7XG4gICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xuICAgIH07XG59XG5leHBvcnRzLm1ha2VIbWFjSG9vayA9IG1ha2VIbWFjSG9vaztcbmZ1bmN0aW9uIHNpZ25Sc2FTaGEyNTZIb29rKGtleSwgaW5wdXQsIG91dHB1dCkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc2lnbmVyID0gY3J5cHRvLmNyZWF0ZVNpZ24oJ3NoYTI1NldpdGhSU0FFbmNyeXB0aW9uJyk7XG4gICAgICAgIGNvbnN0IHByaXZhdGVLZXkgPSBCdWZmZXIuZnJvbShgLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXFxuJHtrZXkudG9TdHJpbmcoJ2Jhc2U2NCcpfVxcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cXG5gKTtcbiAgICAgICAgcmVzdWx0ID0gc2lnbmVyLnVwZGF0ZShpbnB1dCkuZW5kKCkuc2lnbihwcml2YXRlS2V5KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxuICAgIHJlc3VsdC5jb3B5KG91dHB1dCk7XG4gICAgcmV0dXJuIHJlc3VsdC5sZW5ndGg7XG59XG5leHBvcnRzLnNpZ25Sc2FTaGEyNTZIb29rID0gc2lnblJzYVNoYTI1Nkhvb2s7XG5leHBvcnRzLmFlczI1NkNiY0VuY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZUNpcGhlcml2JywgJ2Flcy0yNTYtY2JjJyk7XG5leHBvcnRzLmFlczI1NkNiY0RlY3J5cHRIb29rID0gbWFrZUFFUzI1Nkhvb2soJ2NyZWF0ZURlY2lwaGVyaXYnLCAnYWVzLTI1Ni1jYmMnKTtcbmV4cG9ydHMuYWVzMjU2Q3RyRW5jcnlwdEhvb2sgPSBtYWtlQUVTMjU2SG9vaygnY3JlYXRlQ2lwaGVyaXYnLCAnYWVzLTI1Ni1jdHInKTtcbmV4cG9ydHMuYWVzMjU2Q3RyRGVjcnlwdEhvb2sgPSBtYWtlQUVTMjU2SG9vaygnY3JlYXRlRGVjaXBoZXJpdicsICdhZXMtMjU2LWN0cicpO1xuZXhwb3J0cy5obWFjU2hhNTEySG9vayA9IG1ha2VIbWFjSG9vaygnc2hhNTEyJyk7XG5leHBvcnRzLmhtYWNTaGEyNTZIb29rID0gbWFrZUhtYWNIb29rKCdzaGEyNTYnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyeXB0b19jYWxsYmFja3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/crypto_callbacks.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js":
/*!********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptAzureKMSRequestError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nclass MongoCryptError extends error_1.MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoCryptError';\n    }\n}\nexports.MongoCryptError = MongoCryptError;\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */\nclass MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCryptInvalidArgumentError';\n    }\n}\nexports.MongoCryptInvalidArgumentError = MongoCryptInvalidArgumentError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */\nclass MongoCryptCreateDataKeyError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to complete creating data keys: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateDataKeyError';\n    }\n}\nexports.MongoCryptCreateDataKeyError = MongoCryptCreateDataKeyError;\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */\nclass MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields, { cause }) {\n        super(`Unable to create collection: ${cause.message}`, { cause });\n        this.encryptedFields = encryptedFields;\n    }\n    get name() {\n        return 'MongoCryptCreateEncryptedCollectionError';\n    }\n}\nexports.MongoCryptCreateEncryptedCollectionError = MongoCryptCreateEncryptedCollectionError;\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */\nclass MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, body) {\n        super(message);\n        this.body = body;\n    }\n    get name() {\n        return 'MongoCryptAzureKMSRequestError';\n    }\n}\nexports.MongoCryptAzureKMSRequestError = MongoCryptAzureKMSRequestError;\n/** @public */\nclass MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name() {\n        return 'MongoCryptKMSRequestNetworkTimeoutError';\n    }\n}\nexports.MongoCryptKMSRequestNetworkTimeoutError = MongoCryptKMSRequestNetworkTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtDQUErQyxHQUFHLHNDQUFzQyxHQUFHLGdEQUFnRCxHQUFHLG9DQUFvQyxHQUFHLHNDQUFzQyxHQUFHLHVCQUF1QjtBQUNyUCxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLE9BQU87QUFDMUMsd0RBQXdELGNBQWMsS0FBSyxPQUFPO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDLDhDQUE4QyxjQUFjLEtBQUssT0FBTztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL2Vycm9ycy5qcz8zZmJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3IgPSBleHBvcnRzLk1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvciA9IGV4cG9ydHMuTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yID0gZXhwb3J0cy5Nb25nb0NyeXB0RXJyb3IgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuLyoqXG4gKiBAcHVibGljXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgc29tZXRoaW5nIHdlbnQgd3Jvbmcgc3BlY2lmaWNhbGx5IHdpdGggTW9uZ29EQiBDbGllbnQgRW5jcnlwdGlvblxuICovXG5jbGFzcyBNb25nb0NyeXB0RXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0RXJyb3IgPSBNb25nb0NyeXB0RXJyb3I7XG4vKipcbiAqIEBwdWJsaWNcbiAqXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIGFuIGludmFsaWQgYXJndW1lbnQgd2FzIHByb3ZpZGVkIHRvIGFuIGVuY3J5cHRpb24gQVBJLlxuICovXG5jbGFzcyBNb25nb0NyeXB0SW52YWxpZEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBNb25nb0NyeXB0RXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0SW52YWxpZEFyZ3VtZW50RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yID0gTW9uZ29DcnlwdEludmFsaWRBcmd1bWVudEVycm9yO1xuLyoqXG4gKiBAcHVibGljXG4gKiBBbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgYENsaWVudEVuY3J5cHRpb24uY3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbigpYCBmYWlsZWQgdG8gY3JlYXRlIGRhdGEga2V5c1xuICovXG5jbGFzcyBNb25nb0NyeXB0Q3JlYXRlRGF0YUtleUVycm9yIGV4dGVuZHMgTW9uZ29DcnlwdEVycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IoZW5jcnlwdGVkRmllbGRzLCB7IGNhdXNlIH0pIHtcbiAgICAgICAgc3VwZXIoYFVuYWJsZSB0byBjb21wbGV0ZSBjcmVhdGluZyBkYXRhIGtleXM6ICR7Y2F1c2UubWVzc2FnZX1gLCB7IGNhdXNlIH0pO1xuICAgICAgICB0aGlzLmVuY3J5cHRlZEZpZWxkcyA9IGVuY3J5cHRlZEZpZWxkcztcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0Q3JlYXRlRGF0YUtleUVycm9yID0gTW9uZ29DcnlwdENyZWF0ZURhdGFLZXlFcnJvcjtcbi8qKlxuICogQHB1YmxpY1xuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGBDbGllbnRFbmNyeXB0aW9uLmNyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb24oKWAgZmFpbGVkIHRvIGNyZWF0ZSBhIGNvbGxlY3Rpb25cbiAqL1xuY2xhc3MgTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKGVuY3J5cHRlZEZpZWxkcywgeyBjYXVzZSB9KSB7XG4gICAgICAgIHN1cGVyKGBVbmFibGUgdG8gY3JlYXRlIGNvbGxlY3Rpb246ICR7Y2F1c2UubWVzc2FnZX1gLCB7IGNhdXNlIH0pO1xuICAgICAgICB0aGlzLmVuY3J5cHRlZEZpZWxkcyA9IGVuY3J5cHRlZEZpZWxkcztcbiAgICB9XG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiAnTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0Q3JlYXRlRW5jcnlwdGVkQ29sbGVjdGlvbkVycm9yID0gTW9uZ29DcnlwdENyZWF0ZUVuY3J5cHRlZENvbGxlY3Rpb25FcnJvcjtcbi8qKlxuICogQHB1YmxpY1xuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IG1vbmdvZGItY2xpZW50LWVuY3J5cHRpb24gZmFpbGVkIHRvIGF1dG8tcmVmcmVzaCBBenVyZSBLTVMgY3JlZGVudGlhbHMuXG4gKi9cbmNsYXNzIE1vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvciBleHRlbmRzIE1vbmdvQ3J5cHRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGJvZHkpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvQ3J5cHRBenVyZUtNU1JlcXVlc3RFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IgPSBNb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3I7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yIGV4dGVuZHMgTW9uZ29DcnlwdEVycm9yIHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb0NyeXB0S01TUmVxdWVzdE5ldHdvcmtUaW1lb3V0RXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yID0gTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js":
/*!*********************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongocryptdManager = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/**\n * @internal\n * An internal class that handles spawning a mongocryptd.\n */\nclass MongocryptdManager {\n    constructor(extraOptions = {}) {\n        this.uri =\n            typeof extraOptions.mongocryptdURI === 'string' && extraOptions.mongocryptdURI.length > 0\n                ? extraOptions.mongocryptdURI\n                : MongocryptdManager.DEFAULT_MONGOCRYPTD_URI;\n        this.bypassSpawn = !!extraOptions.mongocryptdBypassSpawn;\n        this.spawnPath = extraOptions.mongocryptdSpawnPath || '';\n        this.spawnArgs = [];\n        if (Array.isArray(extraOptions.mongocryptdSpawnArgs)) {\n            this.spawnArgs = this.spawnArgs.concat(extraOptions.mongocryptdSpawnArgs);\n        }\n        if (this.spawnArgs\n            .filter(arg => typeof arg === 'string')\n            .every(arg => arg.indexOf('--idleShutdownTimeoutSecs') < 0)) {\n            this.spawnArgs.push('--idleShutdownTimeoutSecs', '60');\n        }\n    }\n    /**\n     * Will check to see if a mongocryptd is up. If it is not up, it will attempt\n     * to spawn a mongocryptd in a detached process, and then wait for it to be up.\n     */\n    async spawn() {\n        const cmdName = this.spawnPath || 'mongocryptd';\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const { spawn } = __webpack_require__(/*! child_process */ \"child_process\");\n        // Spawned with stdio: ignore and detached: true\n        // to ensure child can outlive parent.\n        this._child = spawn(cmdName, this.spawnArgs, {\n            stdio: 'ignore',\n            detached: true\n        });\n        this._child.on('error', () => {\n            // From the FLE spec:\n            // \"The stdout and stderr of the spawned process MUST not be exposed in the driver\n            // (e.g. redirect to /dev/null). Users can pass the argument --logpath to\n            // extraOptions.mongocryptdSpawnArgs if they need to inspect mongocryptd logs.\n            // If spawning is necessary, the driver MUST spawn mongocryptd whenever server\n            // selection on the MongoClient to mongocryptd fails. If the MongoClient fails to\n            // connect after spawning, the server selection error is propagated to the user.\"\n            // The AutoEncrypter and MongoCryptdManager should work together to spawn\n            // mongocryptd whenever necessary.  Additionally, the `mongocryptd` intentionally\n            // shuts down after 60s and gets respawned when necessary.  We rely on server\n            // selection timeouts when connecting to the `mongocryptd` to inform users that something\n            // has been configured incorrectly.  For those reasons, we suppress stderr from\n            // the `mongocryptd` process and immediately unref the process.\n        });\n        // unref child to remove handle from event loop\n        this._child.unref();\n    }\n    /**\n     * @returns the result of `fn` or rejects with an error.\n     */\n    async withRespawn(fn) {\n        try {\n            const result = await fn();\n            return result;\n        }\n        catch (err) {\n            // If we are not bypassing spawning, then we should retry once on a MongoTimeoutError (server selection error)\n            const shouldSpawn = err instanceof error_1.MongoNetworkTimeoutError && !this.bypassSpawn;\n            if (!shouldSpawn) {\n                throw err;\n            }\n        }\n        await this.spawn();\n        const result = await fn();\n        return result;\n    }\n}\nMongocryptdManager.DEFAULT_MONGOCRYPTD_URI = 'mongodb://localhost:27020';\nexports.MongocryptdManager = MongocryptdManager;\n//# sourceMappingURL=mongocryptd_manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vbW9uZ29jcnlwdGRfbWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVEsRUFBRSxtQkFBTyxDQUFDLG9DQUFlO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY2xpZW50LXNpZGUtZW5jcnlwdGlvbi9tb25nb2NyeXB0ZF9tYW5hZ2VyLmpzPzY3ZjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvY3J5cHRkTWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQW4gaW50ZXJuYWwgY2xhc3MgdGhhdCBoYW5kbGVzIHNwYXduaW5nIGEgbW9uZ29jcnlwdGQuXG4gKi9cbmNsYXNzIE1vbmdvY3J5cHRkTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IoZXh0cmFPcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy51cmkgPVxuICAgICAgICAgICAgdHlwZW9mIGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFVSSSA9PT0gJ3N0cmluZycgJiYgZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkVVJJLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFVSSVxuICAgICAgICAgICAgICAgIDogTW9uZ29jcnlwdGRNYW5hZ2VyLkRFRkFVTFRfTU9OR09DUllQVERfVVJJO1xuICAgICAgICB0aGlzLmJ5cGFzc1NwYXduID0gISFleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRCeXBhc3NTcGF3bjtcbiAgICAgICAgdGhpcy5zcGF3blBhdGggPSBleHRyYU9wdGlvbnMubW9uZ29jcnlwdGRTcGF3blBhdGggfHwgJyc7XG4gICAgICAgIHRoaXMuc3Bhd25BcmdzID0gW107XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFNwYXduQXJncykpIHtcbiAgICAgICAgICAgIHRoaXMuc3Bhd25BcmdzID0gdGhpcy5zcGF3bkFyZ3MuY29uY2F0KGV4dHJhT3B0aW9ucy5tb25nb2NyeXB0ZFNwYXduQXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3Bhd25BcmdzXG4gICAgICAgICAgICAuZmlsdGVyKGFyZyA9PiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJylcbiAgICAgICAgICAgIC5ldmVyeShhcmcgPT4gYXJnLmluZGV4T2YoJy0taWRsZVNodXRkb3duVGltZW91dFNlY3MnKSA8IDApKSB7XG4gICAgICAgICAgICB0aGlzLnNwYXduQXJncy5wdXNoKCctLWlkbGVTaHV0ZG93blRpbWVvdXRTZWNzJywgJzYwJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lsbCBjaGVjayB0byBzZWUgaWYgYSBtb25nb2NyeXB0ZCBpcyB1cC4gSWYgaXQgaXMgbm90IHVwLCBpdCB3aWxsIGF0dGVtcHRcbiAgICAgKiB0byBzcGF3biBhIG1vbmdvY3J5cHRkIGluIGEgZGV0YWNoZWQgcHJvY2VzcywgYW5kIHRoZW4gd2FpdCBmb3IgaXQgdG8gYmUgdXAuXG4gICAgICovXG4gICAgYXN5bmMgc3Bhd24oKSB7XG4gICAgICAgIGNvbnN0IGNtZE5hbWUgPSB0aGlzLnNwYXduUGF0aCB8fCAnbW9uZ29jcnlwdGQnO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuICAgICAgICBjb25zdCB7IHNwYXduIH0gPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG4gICAgICAgIC8vIFNwYXduZWQgd2l0aCBzdGRpbzogaWdub3JlIGFuZCBkZXRhY2hlZDogdHJ1ZVxuICAgICAgICAvLyB0byBlbnN1cmUgY2hpbGQgY2FuIG91dGxpdmUgcGFyZW50LlxuICAgICAgICB0aGlzLl9jaGlsZCA9IHNwYXduKGNtZE5hbWUsIHRoaXMuc3Bhd25BcmdzLCB7XG4gICAgICAgICAgICBzdGRpbzogJ2lnbm9yZScsXG4gICAgICAgICAgICBkZXRhY2hlZDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fY2hpbGQub24oJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gRnJvbSB0aGUgRkxFIHNwZWM6XG4gICAgICAgICAgICAvLyBcIlRoZSBzdGRvdXQgYW5kIHN0ZGVyciBvZiB0aGUgc3Bhd25lZCBwcm9jZXNzIE1VU1Qgbm90IGJlIGV4cG9zZWQgaW4gdGhlIGRyaXZlclxuICAgICAgICAgICAgLy8gKGUuZy4gcmVkaXJlY3QgdG8gL2Rldi9udWxsKS4gVXNlcnMgY2FuIHBhc3MgdGhlIGFyZ3VtZW50IC0tbG9ncGF0aCB0b1xuICAgICAgICAgICAgLy8gZXh0cmFPcHRpb25zLm1vbmdvY3J5cHRkU3Bhd25BcmdzIGlmIHRoZXkgbmVlZCB0byBpbnNwZWN0IG1vbmdvY3J5cHRkIGxvZ3MuXG4gICAgICAgICAgICAvLyBJZiBzcGF3bmluZyBpcyBuZWNlc3NhcnksIHRoZSBkcml2ZXIgTVVTVCBzcGF3biBtb25nb2NyeXB0ZCB3aGVuZXZlciBzZXJ2ZXJcbiAgICAgICAgICAgIC8vIHNlbGVjdGlvbiBvbiB0aGUgTW9uZ29DbGllbnQgdG8gbW9uZ29jcnlwdGQgZmFpbHMuIElmIHRoZSBNb25nb0NsaWVudCBmYWlscyB0b1xuICAgICAgICAgICAgLy8gY29ubmVjdCBhZnRlciBzcGF3bmluZywgdGhlIHNlcnZlciBzZWxlY3Rpb24gZXJyb3IgaXMgcHJvcGFnYXRlZCB0byB0aGUgdXNlci5cIlxuICAgICAgICAgICAgLy8gVGhlIEF1dG9FbmNyeXB0ZXIgYW5kIE1vbmdvQ3J5cHRkTWFuYWdlciBzaG91bGQgd29yayB0b2dldGhlciB0byBzcGF3blxuICAgICAgICAgICAgLy8gbW9uZ29jcnlwdGQgd2hlbmV2ZXIgbmVjZXNzYXJ5LiAgQWRkaXRpb25hbGx5LCB0aGUgYG1vbmdvY3J5cHRkYCBpbnRlbnRpb25hbGx5XG4gICAgICAgICAgICAvLyBzaHV0cyBkb3duIGFmdGVyIDYwcyBhbmQgZ2V0cyByZXNwYXduZWQgd2hlbiBuZWNlc3NhcnkuICBXZSByZWx5IG9uIHNlcnZlclxuICAgICAgICAgICAgLy8gc2VsZWN0aW9uIHRpbWVvdXRzIHdoZW4gY29ubmVjdGluZyB0byB0aGUgYG1vbmdvY3J5cHRkYCB0byBpbmZvcm0gdXNlcnMgdGhhdCBzb21ldGhpbmdcbiAgICAgICAgICAgIC8vIGhhcyBiZWVuIGNvbmZpZ3VyZWQgaW5jb3JyZWN0bHkuICBGb3IgdGhvc2UgcmVhc29ucywgd2Ugc3VwcHJlc3Mgc3RkZXJyIGZyb21cbiAgICAgICAgICAgIC8vIHRoZSBgbW9uZ29jcnlwdGRgIHByb2Nlc3MgYW5kIGltbWVkaWF0ZWx5IHVucmVmIHRoZSBwcm9jZXNzLlxuICAgICAgICB9KTtcbiAgICAgICAgLy8gdW5yZWYgY2hpbGQgdG8gcmVtb3ZlIGhhbmRsZSBmcm9tIGV2ZW50IGxvb3BcbiAgICAgICAgdGhpcy5fY2hpbGQudW5yZWYoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiBgZm5gIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBhc3luYyB3aXRoUmVzcGF3bihmbikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIG5vdCBieXBhc3Npbmcgc3Bhd25pbmcsIHRoZW4gd2Ugc2hvdWxkIHJldHJ5IG9uY2Ugb24gYSBNb25nb1RpbWVvdXRFcnJvciAoc2VydmVyIHNlbGVjdGlvbiBlcnJvcilcbiAgICAgICAgICAgIGNvbnN0IHNob3VsZFNwYXduID0gZXJyIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb05ldHdvcmtUaW1lb3V0RXJyb3IgJiYgIXRoaXMuYnlwYXNzU3Bhd247XG4gICAgICAgICAgICBpZiAoIXNob3VsZFNwYXduKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuc3Bhd24oKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5Nb25nb2NyeXB0ZE1hbmFnZXIuREVGQVVMVF9NT05HT0NSWVBURF9VUkkgPSAnbW9uZ29kYjovL2xvY2FsaG9zdDoyNzAyMCc7XG5leHBvcnRzLk1vbmdvY3J5cHRkTWFuYWdlciA9IE1vbmdvY3J5cHRkTWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvY3J5cHRkX21hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/mongocryptd_manager.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/aws.js":
/*!***************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/providers/aws.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadAWSCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\n/**\n * @internal\n */\nasync function loadAWSCredentials(kmsProviders) {\n    const credentialProvider = (0, deps_1.getAwsCredentialProvider)();\n    if ('kModuleError' in credentialProvider) {\n        return kmsProviders;\n    }\n    const { fromNodeProviderChain } = credentialProvider;\n    const provider = fromNodeProviderChain();\n    // The state machine is the only place calling this so it will\n    // catch if there is a rejection here.\n    const aws = await provider();\n    return { ...kmsProviders, aws };\n}\nexports.loadAWSCredentials = loadAWSCredentials;\n//# sourceMappingURL=aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2F3cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsZUFBZSxtQkFBTyxDQUFDLHlFQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Byb3ZpZGVycy9hd3MuanM/ZTI2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubG9hZEFXU0NyZWRlbnRpYWxzID0gdm9pZCAwO1xuY29uc3QgZGVwc18xID0gcmVxdWlyZShcIi4uLy4uL2RlcHNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkQVdTQ3JlZGVudGlhbHMoa21zUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbFByb3ZpZGVyID0gKDAsIGRlcHNfMS5nZXRBd3NDcmVkZW50aWFsUHJvdmlkZXIpKCk7XG4gICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIGNyZWRlbnRpYWxQcm92aWRlcikge1xuICAgICAgICByZXR1cm4ga21zUHJvdmlkZXJzO1xuICAgIH1cbiAgICBjb25zdCB7IGZyb21Ob2RlUHJvdmlkZXJDaGFpbiB9ID0gY3JlZGVudGlhbFByb3ZpZGVyO1xuICAgIGNvbnN0IHByb3ZpZGVyID0gZnJvbU5vZGVQcm92aWRlckNoYWluKCk7XG4gICAgLy8gVGhlIHN0YXRlIG1hY2hpbmUgaXMgdGhlIG9ubHkgcGxhY2UgY2FsbGluZyB0aGlzIHNvIGl0IHdpbGxcbiAgICAvLyBjYXRjaCBpZiB0aGVyZSBpcyBhIHJlamVjdGlvbiBoZXJlLlxuICAgIGNvbnN0IGF3cyA9IGF3YWl0IHByb3ZpZGVyKCk7XG4gICAgcmV0dXJuIHsgLi4ua21zUHJvdmlkZXJzLCBhd3MgfTtcbn1cbmV4cG9ydHMubG9hZEFXU0NyZWRlbnRpYWxzID0gbG9hZEFXU0NyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXdzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/aws.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/azure.js":
/*!*****************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/providers/azure.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadAzureCredentials = exports.fetchAzureKMSToken = exports.prepareRequest = exports.tokenCache = exports.AzureCredentialCache = void 0;\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/utils.js\");\nconst MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS = 6000;\n/**\n * @internal\n */\nclass AzureCredentialCache {\n    constructor() {\n        this.cachedToken = null;\n    }\n    async getToken() {\n        if (this.cachedToken == null || this.needsRefresh(this.cachedToken)) {\n            this.cachedToken = await this._getToken();\n        }\n        return { accessToken: this.cachedToken.accessToken };\n    }\n    needsRefresh(token) {\n        const timeUntilExpirationMS = token.expiresOnTimestamp - Date.now();\n        return timeUntilExpirationMS <= MINIMUM_TOKEN_REFRESH_IN_MILLISECONDS;\n    }\n    /**\n     * exposed for testing\n     */\n    resetCache() {\n        this.cachedToken = null;\n    }\n    /**\n     * exposed for testing\n     */\n    _getToken() {\n        return fetchAzureKMSToken();\n    }\n}\nexports.AzureCredentialCache = AzureCredentialCache;\n/** @internal */\nexports.tokenCache = new AzureCredentialCache();\n/** @internal */\nasync function parseResponse(response) {\n    const { status, body: rawBody } = response;\n    const body = (() => {\n        try {\n            return JSON.parse(rawBody);\n        }\n        catch {\n            throw new errors_1.MongoCryptAzureKMSRequestError('Malformed JSON body in GET request.');\n        }\n    })();\n    if (status !== 200) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Unable to complete request.', body);\n    }\n    if (!body.access_token) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `access_token`.');\n    }\n    if (!body.expires_in) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - missing field `expires_in`.');\n    }\n    const expiresInMS = Number(body.expires_in) * 1000;\n    if (Number.isNaN(expiresInMS)) {\n        throw new errors_1.MongoCryptAzureKMSRequestError('Malformed response body - unable to parse int from `expires_in` field.');\n    }\n    return {\n        accessToken: body.access_token,\n        expiresOnTimestamp: Date.now() + expiresInMS\n    };\n}\n/**\n * @internal\n *\n * parses any options provided by prose tests to `fetchAzureKMSToken` and merges them with\n * the default values for headers and the request url.\n */\nfunction prepareRequest(options) {\n    const url = new URL(options.url?.toString() ?? 'http://169.254.169.254/metadata/identity/oauth2/token');\n    url.searchParams.append('api-version', '2018-02-01');\n    url.searchParams.append('resource', 'https://vault.azure.net');\n    const headers = { ...options.headers, 'Content-Type': 'application/json', Metadata: true };\n    return { headers, url };\n}\nexports.prepareRequest = prepareRequest;\n/**\n * @internal\n *\n * `AzureKMSRequestOptions` allows prose tests to modify the http request sent to the idms\n * servers.  This is required to simulate different server conditions.  No options are expected to\n * be set outside of tests.\n *\n * exposed for CSFLE\n * [prose test 18](https://github.com/mongodb/specifications/tree/master/source/client-side-encryption/tests#azure-imds-credentials)\n */\nasync function fetchAzureKMSToken(options = {}) {\n    const { headers, url } = prepareRequest(options);\n    const response = await (0, utils_1.get)(url, { headers }).catch(error => {\n        if (error instanceof errors_1.MongoCryptKMSRequestNetworkTimeoutError) {\n            throw new errors_1.MongoCryptAzureKMSRequestError(`[Azure KMS] ${error.message}`);\n        }\n        throw error;\n    });\n    return parseResponse(response);\n}\nexports.fetchAzureKMSToken = fetchAzureKMSToken;\n/**\n * @internal\n *\n * @throws Will reject with a `MongoCryptError` if the http request fails or the http response is malformed.\n */\nasync function loadAzureCredentials(kmsProviders) {\n    const azure = await exports.tokenCache.getToken();\n    return { ...kmsProviders, azure };\n}\nexports.loadAzureCredentials = loadAzureCredentials;\n//# sourceMappingURL=azure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2F6dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLDBCQUEwQixHQUFHLHNCQUFzQixHQUFHLGtCQUFrQixHQUFHLDRCQUE0QjtBQUN0SSxpQkFBaUIsbUJBQU8sQ0FBQyxpR0FBVztBQUNwQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3R0FBUztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixhQUFhO0FBQ2I7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsWUFBWSxlQUFlO0FBQzNCLG1EQUFtRCxTQUFTO0FBQzVEO0FBQ0EsNkVBQTZFLGNBQWM7QUFDM0Y7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2F6dXJlLmpzPzllN2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRBenVyZUNyZWRlbnRpYWxzID0gZXhwb3J0cy5mZXRjaEF6dXJlS01TVG9rZW4gPSBleHBvcnRzLnByZXBhcmVSZXF1ZXN0ID0gZXhwb3J0cy50b2tlbkNhY2hlID0gZXhwb3J0cy5BenVyZUNyZWRlbnRpYWxDYWNoZSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IE1JTklNVU1fVE9LRU5fUkVGUkVTSF9JTl9NSUxMSVNFQ09ORFMgPSA2MDAwO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXp1cmVDcmVkZW50aWFsQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNhY2hlZFRva2VuID0gbnVsbDtcbiAgICB9XG4gICAgYXN5bmMgZ2V0VG9rZW4oKSB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlZFRva2VuID09IG51bGwgfHwgdGhpcy5uZWVkc1JlZnJlc2godGhpcy5jYWNoZWRUb2tlbikpIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVkVG9rZW4gPSBhd2FpdCB0aGlzLl9nZXRUb2tlbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGFjY2Vzc1Rva2VuOiB0aGlzLmNhY2hlZFRva2VuLmFjY2Vzc1Rva2VuIH07XG4gICAgfVxuICAgIG5lZWRzUmVmcmVzaCh0b2tlbikge1xuICAgICAgICBjb25zdCB0aW1lVW50aWxFeHBpcmF0aW9uTVMgPSB0b2tlbi5leHBpcmVzT25UaW1lc3RhbXAgLSBEYXRlLm5vdygpO1xuICAgICAgICByZXR1cm4gdGltZVVudGlsRXhwaXJhdGlvbk1TIDw9IE1JTklNVU1fVE9LRU5fUkVGUkVTSF9JTl9NSUxMSVNFQ09ORFM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGV4cG9zZWQgZm9yIHRlc3RpbmdcbiAgICAgKi9cbiAgICByZXNldENhY2hlKCkge1xuICAgICAgICB0aGlzLmNhY2hlZFRva2VuID0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZXhwb3NlZCBmb3IgdGVzdGluZ1xuICAgICAqL1xuICAgIF9nZXRUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoQXp1cmVLTVNUb2tlbigpO1xuICAgIH1cbn1cbmV4cG9ydHMuQXp1cmVDcmVkZW50aWFsQ2FjaGUgPSBBenVyZUNyZWRlbnRpYWxDYWNoZTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMudG9rZW5DYWNoZSA9IG5ldyBBenVyZUNyZWRlbnRpYWxDYWNoZSgpO1xuLyoqIEBpbnRlcm5hbCAqL1xuYXN5bmMgZnVuY3Rpb24gcGFyc2VSZXNwb25zZShyZXNwb25zZSkge1xuICAgIGNvbnN0IHsgc3RhdHVzLCBib2R5OiByYXdCb2R5IH0gPSByZXNwb25zZTtcbiAgICBjb25zdCBib2R5ID0gKCgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHJhd0JvZHkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IoJ01hbGZvcm1lZCBKU09OIGJvZHkgaW4gR0VUIHJlcXVlc3QuJyk7XG4gICAgICAgIH1cbiAgICB9KSgpO1xuICAgIGlmIChzdGF0dXMgIT09IDIwMCkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yKCdVbmFibGUgdG8gY29tcGxldGUgcmVxdWVzdC4nLCBib2R5KTtcbiAgICB9XG4gICAgaWYgKCFib2R5LmFjY2Vzc190b2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yKCdNYWxmb3JtZWQgcmVzcG9uc2UgYm9keSAtIG1pc3NpbmcgZmllbGQgYGFjY2Vzc190b2tlbmAuJyk7XG4gICAgfVxuICAgIGlmICghYm9keS5leHBpcmVzX2luKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IoJ01hbGZvcm1lZCByZXNwb25zZSBib2R5IC0gbWlzc2luZyBmaWVsZCBgZXhwaXJlc19pbmAuJyk7XG4gICAgfVxuICAgIGNvbnN0IGV4cGlyZXNJbk1TID0gTnVtYmVyKGJvZHkuZXhwaXJlc19pbikgKiAxMDAwO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oZXhwaXJlc0luTVMpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5Nb25nb0NyeXB0QXp1cmVLTVNSZXF1ZXN0RXJyb3IoJ01hbGZvcm1lZCByZXNwb25zZSBib2R5IC0gdW5hYmxlIHRvIHBhcnNlIGludCBmcm9tIGBleHBpcmVzX2luYCBmaWVsZC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYWNjZXNzVG9rZW46IGJvZHkuYWNjZXNzX3Rva2VuLFxuICAgICAgICBleHBpcmVzT25UaW1lc3RhbXA6IERhdGUubm93KCkgKyBleHBpcmVzSW5NU1xuICAgIH07XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIHBhcnNlcyBhbnkgb3B0aW9ucyBwcm92aWRlZCBieSBwcm9zZSB0ZXN0cyB0byBgZmV0Y2hBenVyZUtNU1Rva2VuYCBhbmQgbWVyZ2VzIHRoZW0gd2l0aFxuICogdGhlIGRlZmF1bHQgdmFsdWVzIGZvciBoZWFkZXJzIGFuZCB0aGUgcmVxdWVzdCB1cmwuXG4gKi9cbmZ1bmN0aW9uIHByZXBhcmVSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKG9wdGlvbnMudXJsPy50b1N0cmluZygpID8/ICdodHRwOi8vMTY5LjI1NC4xNjkuMjU0L21ldGFkYXRhL2lkZW50aXR5L29hdXRoMi90b2tlbicpO1xuICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdhcGktdmVyc2lvbicsICcyMDE4LTAyLTAxJyk7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3Jlc291cmNlJywgJ2h0dHBzOi8vdmF1bHQuYXp1cmUubmV0Jyk7XG4gICAgY29uc3QgaGVhZGVycyA9IHsgLi4ub3B0aW9ucy5oZWFkZXJzLCAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLCBNZXRhZGF0YTogdHJ1ZSB9O1xuICAgIHJldHVybiB7IGhlYWRlcnMsIHVybCB9O1xufVxuZXhwb3J0cy5wcmVwYXJlUmVxdWVzdCA9IHByZXBhcmVSZXF1ZXN0O1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqXG4gKiBgQXp1cmVLTVNSZXF1ZXN0T3B0aW9uc2AgYWxsb3dzIHByb3NlIHRlc3RzIHRvIG1vZGlmeSB0aGUgaHR0cCByZXF1ZXN0IHNlbnQgdG8gdGhlIGlkbXNcbiAqIHNlcnZlcnMuICBUaGlzIGlzIHJlcXVpcmVkIHRvIHNpbXVsYXRlIGRpZmZlcmVudCBzZXJ2ZXIgY29uZGl0aW9ucy4gIE5vIG9wdGlvbnMgYXJlIGV4cGVjdGVkIHRvXG4gKiBiZSBzZXQgb3V0c2lkZSBvZiB0ZXN0cy5cbiAqXG4gKiBleHBvc2VkIGZvciBDU0ZMRVxuICogW3Byb3NlIHRlc3QgMThdKGh0dHBzOi8vZ2l0aHViLmNvbS9tb25nb2RiL3NwZWNpZmljYXRpb25zL3RyZWUvbWFzdGVyL3NvdXJjZS9jbGllbnQtc2lkZS1lbmNyeXB0aW9uL3Rlc3RzI2F6dXJlLWltZHMtY3JlZGVudGlhbHMpXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZldGNoQXp1cmVLTVNUb2tlbihvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGhlYWRlcnMsIHVybCB9ID0gcHJlcGFyZVJlcXVlc3Qob3B0aW9ucyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgdXRpbHNfMS5nZXQpKHVybCwgeyBoZWFkZXJzIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZXJyb3JzXzEuTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuTW9uZ29DcnlwdEF6dXJlS01TUmVxdWVzdEVycm9yKGBbQXp1cmUgS01TXSAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnNlUmVzcG9uc2UocmVzcG9uc2UpO1xufVxuZXhwb3J0cy5mZXRjaEF6dXJlS01TVG9rZW4gPSBmZXRjaEF6dXJlS01TVG9rZW47XG4vKipcbiAqIEBpbnRlcm5hbFxuICpcbiAqIEB0aHJvd3MgV2lsbCByZWplY3Qgd2l0aCBhIGBNb25nb0NyeXB0RXJyb3JgIGlmIHRoZSBodHRwIHJlcXVlc3QgZmFpbHMgb3IgdGhlIGh0dHAgcmVzcG9uc2UgaXMgbWFsZm9ybWVkLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkQXp1cmVDcmVkZW50aWFscyhrbXNQcm92aWRlcnMpIHtcbiAgICBjb25zdCBhenVyZSA9IGF3YWl0IGV4cG9ydHMudG9rZW5DYWNoZS5nZXRUb2tlbigpO1xuICAgIHJldHVybiB7IC4uLmttc1Byb3ZpZGVycywgYXp1cmUgfTtcbn1cbmV4cG9ydHMubG9hZEF6dXJlQ3JlZGVudGlhbHMgPSBsb2FkQXp1cmVDcmVkZW50aWFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF6dXJlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/azure.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/gcp.js":
/*!***************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/providers/gcp.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadGCPCredentials = void 0;\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\n/** @internal */\nasync function loadGCPCredentials(kmsProviders) {\n    const gcpMetadata = (0, deps_1.getGcpMetadata)();\n    if ('kModuleError' in gcpMetadata) {\n        return kmsProviders;\n    }\n    const { access_token: accessToken } = await gcpMetadata.instance({\n        property: 'service-accounts/default/token'\n    });\n    return { ...kmsProviders, gcp: { accessToken } };\n}\nexports.loadGCPCredentials = loadGCPCredentials;\n//# sourceMappingURL=gcp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2djcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsZUFBZSxtQkFBTyxDQUFDLHlFQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0EsS0FBSztBQUNMLGFBQWEsd0JBQXdCO0FBQ3JDO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2djcC5qcz9mYmZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sb2FkR0NQQ3JlZGVudGlhbHMgPSB2b2lkIDA7XG5jb25zdCBkZXBzXzEgPSByZXF1aXJlKFwiLi4vLi4vZGVwc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRHQ1BDcmVkZW50aWFscyhrbXNQcm92aWRlcnMpIHtcbiAgICBjb25zdCBnY3BNZXRhZGF0YSA9ICgwLCBkZXBzXzEuZ2V0R2NwTWV0YWRhdGEpKCk7XG4gICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIGdjcE1ldGFkYXRhKSB7XG4gICAgICAgIHJldHVybiBrbXNQcm92aWRlcnM7XG4gICAgfVxuICAgIGNvbnN0IHsgYWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbiB9ID0gYXdhaXQgZ2NwTWV0YWRhdGEuaW5zdGFuY2Uoe1xuICAgICAgICBwcm9wZXJ0eTogJ3NlcnZpY2UtYWNjb3VudHMvZGVmYXVsdC90b2tlbidcbiAgICB9KTtcbiAgICByZXR1cm4geyAuLi5rbXNQcm92aWRlcnMsIGdjcDogeyBhY2Nlc3NUb2tlbiB9IH07XG59XG5leHBvcnRzLmxvYWRHQ1BDcmVkZW50aWFscyA9IGxvYWRHQ1BDcmVkZW50aWFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdjcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/index.js":
/*!*****************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/providers/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.refreshKMSCredentials = exports.isEmptyCredentials = void 0;\nconst aws_1 = __webpack_require__(/*! ./aws */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/aws.js\");\nconst azure_1 = __webpack_require__(/*! ./azure */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/azure.js\");\nconst gcp_1 = __webpack_require__(/*! ./gcp */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/gcp.js\");\n/**\n * Auto credential fetching should only occur when the provider is defined on the kmsProviders map\n * and the settings are an empty object.\n *\n * This is distinct from a nullish provider key.\n *\n * @internal - exposed for testing purposes only\n */\nfunction isEmptyCredentials(providerName, kmsProviders) {\n    const provider = kmsProviders[providerName];\n    if (provider == null) {\n        return false;\n    }\n    return typeof provider === 'object' && Object.keys(provider).length === 0;\n}\nexports.isEmptyCredentials = isEmptyCredentials;\n/**\n * Load cloud provider credentials for the user provided KMS providers.\n * Credentials will only attempt to get loaded if they do not exist\n * and no existing credentials will get overwritten.\n *\n * @internal\n */\nasync function refreshKMSCredentials(kmsProviders) {\n    let finalKMSProviders = kmsProviders;\n    if (isEmptyCredentials('aws', kmsProviders)) {\n        finalKMSProviders = await (0, aws_1.loadAWSCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('gcp', kmsProviders)) {\n        finalKMSProviders = await (0, gcp_1.loadGCPCredentials)(finalKMSProviders);\n    }\n    if (isEmptyCredentials('azure', kmsProviders)) {\n        finalKMSProviders = await (0, azure_1.loadAzureCredentials)(finalKMSProviders);\n    }\n    return finalKMSProviders;\n}\nexports.refreshKMSCredentials = refreshKMSCredentials;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLDBCQUEwQjtBQUMxRCxjQUFjLG1CQUFPLENBQUMsb0dBQU87QUFDN0IsZ0JBQWdCLG1CQUFPLENBQUMsd0dBQVM7QUFDakMsY0FBYyxtQkFBTyxDQUFDLG9HQUFPO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL2luZGV4LmpzPzVjOTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZnJlc2hLTVNDcmVkZW50aWFscyA9IGV4cG9ydHMuaXNFbXB0eUNyZWRlbnRpYWxzID0gdm9pZCAwO1xuY29uc3QgYXdzXzEgPSByZXF1aXJlKFwiLi9hd3NcIik7XG5jb25zdCBhenVyZV8xID0gcmVxdWlyZShcIi4vYXp1cmVcIik7XG5jb25zdCBnY3BfMSA9IHJlcXVpcmUoXCIuL2djcFwiKTtcbi8qKlxuICogQXV0byBjcmVkZW50aWFsIGZldGNoaW5nIHNob3VsZCBvbmx5IG9jY3VyIHdoZW4gdGhlIHByb3ZpZGVyIGlzIGRlZmluZWQgb24gdGhlIGttc1Byb3ZpZGVycyBtYXBcbiAqIGFuZCB0aGUgc2V0dGluZ3MgYXJlIGFuIGVtcHR5IG9iamVjdC5cbiAqXG4gKiBUaGlzIGlzIGRpc3RpbmN0IGZyb20gYSBudWxsaXNoIHByb3ZpZGVyIGtleS5cbiAqXG4gKiBAaW50ZXJuYWwgLSBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHlcbiAqL1xuZnVuY3Rpb24gaXNFbXB0eUNyZWRlbnRpYWxzKHByb3ZpZGVyTmFtZSwga21zUHJvdmlkZXJzKSB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBrbXNQcm92aWRlcnNbcHJvdmlkZXJOYW1lXTtcbiAgICBpZiAocHJvdmlkZXIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgcHJvdmlkZXIgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHByb3ZpZGVyKS5sZW5ndGggPT09IDA7XG59XG5leHBvcnRzLmlzRW1wdHlDcmVkZW50aWFscyA9IGlzRW1wdHlDcmVkZW50aWFscztcbi8qKlxuICogTG9hZCBjbG91ZCBwcm92aWRlciBjcmVkZW50aWFscyBmb3IgdGhlIHVzZXIgcHJvdmlkZWQgS01TIHByb3ZpZGVycy5cbiAqIENyZWRlbnRpYWxzIHdpbGwgb25seSBhdHRlbXB0IHRvIGdldCBsb2FkZWQgaWYgdGhleSBkbyBub3QgZXhpc3RcbiAqIGFuZCBubyBleGlzdGluZyBjcmVkZW50aWFscyB3aWxsIGdldCBvdmVyd3JpdHRlbi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaEtNU0NyZWRlbnRpYWxzKGttc1Byb3ZpZGVycykge1xuICAgIGxldCBmaW5hbEtNU1Byb3ZpZGVycyA9IGttc1Byb3ZpZGVycztcbiAgICBpZiAoaXNFbXB0eUNyZWRlbnRpYWxzKCdhd3MnLCBrbXNQcm92aWRlcnMpKSB7XG4gICAgICAgIGZpbmFsS01TUHJvdmlkZXJzID0gYXdhaXQgKDAsIGF3c18xLmxvYWRBV1NDcmVkZW50aWFscykoZmluYWxLTVNQcm92aWRlcnMpO1xuICAgIH1cbiAgICBpZiAoaXNFbXB0eUNyZWRlbnRpYWxzKCdnY3AnLCBrbXNQcm92aWRlcnMpKSB7XG4gICAgICAgIGZpbmFsS01TUHJvdmlkZXJzID0gYXdhaXQgKDAsIGdjcF8xLmxvYWRHQ1BDcmVkZW50aWFscykoZmluYWxLTVNQcm92aWRlcnMpO1xuICAgIH1cbiAgICBpZiAoaXNFbXB0eUNyZWRlbnRpYWxzKCdhenVyZScsIGttc1Byb3ZpZGVycykpIHtcbiAgICAgICAgZmluYWxLTVNQcm92aWRlcnMgPSBhd2FpdCAoMCwgYXp1cmVfMS5sb2FkQXp1cmVDcmVkZW50aWFscykoZmluYWxLTVNQcm92aWRlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gZmluYWxLTVNQcm92aWRlcnM7XG59XG5leHBvcnRzLnJlZnJlc2hLTVNDcmVkZW50aWFscyA9IHJlZnJlc2hLTVNDcmVkZW50aWFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/utils.js":
/*!*****************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/providers/utils.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.get = void 0;\nconst http = __webpack_require__(/*! http */ \"http\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js\");\n/**\n * @internal\n */\nfunction get(url, options = {}) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable prefer-const */\n        let timeoutId;\n        const request = http\n            .get(url, options, response => {\n            response.setEncoding('utf8');\n            let body = '';\n            response.on('data', chunk => (body += chunk));\n            response.on('end', () => {\n                (0, timers_1.clearTimeout)(timeoutId);\n                resolve({ status: response.statusCode, body });\n            });\n        })\n            .on('error', error => {\n            (0, timers_1.clearTimeout)(timeoutId);\n            reject(error);\n        })\n            .end();\n        timeoutId = (0, timers_1.setTimeout)(() => {\n            request.destroy(new errors_1.MongoCryptKMSRequestNetworkTimeoutError(`request timed out after 10 seconds`));\n        }, 10000);\n    });\n}\nexports.get = get;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFdBQVc7QUFDWCxhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0IsaUJBQWlCLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMsaUdBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1DQUFtQztBQUM3RCxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsV0FBVztBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vcHJvdmlkZXJzL3V0aWxzLmpzPzY4ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldCA9IHZvaWQgMDtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKFwiaHR0cFwiKTtcbmNvbnN0IHRpbWVyc18xID0gcmVxdWlyZShcInRpbWVyc1wiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbi8qKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldCh1cmwsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIHByZWZlci1jb25zdCAqL1xuICAgICAgICBsZXQgdGltZW91dElkO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gaHR0cFxuICAgICAgICAgICAgLmdldCh1cmwsIG9wdGlvbnMsIHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIHJlc3BvbnNlLnNldEVuY29kaW5nKCd1dGY4Jyk7XG4gICAgICAgICAgICBsZXQgYm9keSA9ICcnO1xuICAgICAgICAgICAgcmVzcG9uc2Uub24oJ2RhdGEnLCBjaHVuayA9PiAoYm9keSArPSBjaHVuaykpO1xuICAgICAgICAgICAgcmVzcG9uc2Uub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICAoMCwgdGltZXJzXzEuY2xlYXJUaW1lb3V0KSh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoeyBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c0NvZGUsIGJvZHkgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICAgICAgICAoMCwgdGltZXJzXzEuY2xlYXJUaW1lb3V0KSh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5lbmQoKTtcbiAgICAgICAgdGltZW91dElkID0gKDAsIHRpbWVyc18xLnNldFRpbWVvdXQpKCgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QuZGVzdHJveShuZXcgZXJyb3JzXzEuTW9uZ29DcnlwdEtNU1JlcXVlc3ROZXR3b3JrVGltZW91dEVycm9yKGByZXF1ZXN0IHRpbWVkIG91dCBhZnRlciAxMCBzZWNvbmRzYCkpO1xuICAgICAgICB9LCAxMDAwMCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmdldCA9IGdldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/providers/utils.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/state_machine.js":
/*!***************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/client-side-encryption/state_machine.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StateMachine = void 0;\nconst fs = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js\");\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\n// libmongocrypt states\nconst MONGOCRYPT_CTX_ERROR = 0;\nconst MONGOCRYPT_CTX_NEED_MONGO_COLLINFO = 1;\nconst MONGOCRYPT_CTX_NEED_MONGO_MARKINGS = 2;\nconst MONGOCRYPT_CTX_NEED_MONGO_KEYS = 3;\nconst MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS = 7;\nconst MONGOCRYPT_CTX_NEED_KMS = 4;\nconst MONGOCRYPT_CTX_READY = 5;\nconst MONGOCRYPT_CTX_DONE = 6;\nconst HTTPS_PORT = 443;\nconst stateToString = new Map([\n    [MONGOCRYPT_CTX_ERROR, 'MONGOCRYPT_CTX_ERROR'],\n    [MONGOCRYPT_CTX_NEED_MONGO_COLLINFO, 'MONGOCRYPT_CTX_NEED_MONGO_COLLINFO'],\n    [MONGOCRYPT_CTX_NEED_MONGO_MARKINGS, 'MONGOCRYPT_CTX_NEED_MONGO_MARKINGS'],\n    [MONGOCRYPT_CTX_NEED_MONGO_KEYS, 'MONGOCRYPT_CTX_NEED_MONGO_KEYS'],\n    [MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS, 'MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS'],\n    [MONGOCRYPT_CTX_NEED_KMS, 'MONGOCRYPT_CTX_NEED_KMS'],\n    [MONGOCRYPT_CTX_READY, 'MONGOCRYPT_CTX_READY'],\n    [MONGOCRYPT_CTX_DONE, 'MONGOCRYPT_CTX_DONE']\n]);\nconst INSECURE_TLS_OPTIONS = [\n    'tlsInsecure',\n    'tlsAllowInvalidCertificates',\n    'tlsAllowInvalidHostnames',\n    // These options are disallowed by the spec, so we explicitly filter them out if provided, even\n    // though the StateMachine does not declare support for these options.\n    'tlsDisableOCSPEndpointCheck',\n    'tlsDisableCertificateRevocationCheck'\n];\n/**\n * Helper function for logging. Enabled by setting the environment flag MONGODB_CRYPT_DEBUG.\n * @param msg - Anything you want to be logged.\n */\nfunction debug(msg) {\n    if (process.env.MONGODB_CRYPT_DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error(msg);\n    }\n}\n/**\n * @internal\n * An internal class that executes across a MongoCryptContext until either\n * a finishing state or an error is reached. Do not instantiate directly.\n */\nclass StateMachine {\n    constructor(options, bsonOptions = (0, bson_1.pluckBSONSerializeOptions)(options)) {\n        this.options = options;\n        this.bsonOptions = bsonOptions;\n    }\n    /**\n     * Executes the state machine according to the specification\n     */\n    async execute(executor, context) {\n        const keyVaultNamespace = executor._keyVaultNamespace;\n        const keyVaultClient = executor._keyVaultClient;\n        const metaDataClient = executor._metaDataClient;\n        const mongocryptdClient = executor._mongocryptdClient;\n        const mongocryptdManager = executor._mongocryptdManager;\n        let result = null;\n        while (context.state !== MONGOCRYPT_CTX_DONE && context.state !== MONGOCRYPT_CTX_ERROR) {\n            debug(`[context#${context.id}] ${stateToString.get(context.state) || context.state}`);\n            switch (context.state) {\n                case MONGOCRYPT_CTX_NEED_MONGO_COLLINFO: {\n                    const filter = (0, bson_1.deserialize)(context.nextMongoOperation());\n                    if (!metaDataClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_COLLINFO but metadata client is undefined');\n                    }\n                    const collInfo = await this.fetchCollectionInfo(metaDataClient, context.ns, filter);\n                    if (collInfo) {\n                        context.addMongoOperationResponse(collInfo);\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_MARKINGS: {\n                    const command = context.nextMongoOperation();\n                    if (!mongocryptdClient) {\n                        throw new errors_1.MongoCryptError('unreachable state machine state: entered MONGOCRYPT_CTX_NEED_MONGO_MARKINGS but mongocryptdClient is undefined');\n                    }\n                    // When we are using the shared library, we don't have a mongocryptd manager.\n                    const markedCommand = mongocryptdManager\n                        ? await mongocryptdManager.withRespawn(this.markCommand.bind(this, mongocryptdClient, context.ns, command))\n                        : await this.markCommand(mongocryptdClient, context.ns, command);\n                    context.addMongoOperationResponse(markedCommand);\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_MONGO_KEYS: {\n                    const filter = context.nextMongoOperation();\n                    const keys = await this.fetchKeys(keyVaultClient, keyVaultNamespace, filter);\n                    if (keys.length === 0) {\n                        // This is kind of a hack.  For `rewrapManyDataKey`, we have tests that\n                        // guarantee that when there are no matching keys, `rewrapManyDataKey` returns\n                        // nothing.  We also have tests for auto encryption that guarantee for `encrypt`\n                        // we return an error when there are no matching keys.  This error is generated in\n                        // subsequent iterations of the state machine.\n                        // Some apis (`encrypt`) throw if there are no filter matches and others (`rewrapManyDataKey`)\n                        // do not.  We set the result manually here, and let the state machine continue.  `libmongocrypt`\n                        // will inform us if we need to error by setting the state to `MONGOCRYPT_CTX_ERROR` but\n                        // otherwise we'll return `{ v: [] }`.\n                        result = { v: [] };\n                    }\n                    for await (const key of keys) {\n                        context.addMongoOperationResponse((0, bson_1.serialize)(key));\n                    }\n                    context.finishMongoOperation();\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS_CREDENTIALS: {\n                    const kmsProviders = await executor.askForKMSCredentials();\n                    context.provideKMSProviders((0, bson_1.serialize)(kmsProviders));\n                    break;\n                }\n                case MONGOCRYPT_CTX_NEED_KMS: {\n                    const requests = Array.from(this.requests(context));\n                    await Promise.all(requests);\n                    context.finishKMSRequests();\n                    break;\n                }\n                case MONGOCRYPT_CTX_READY: {\n                    const finalizedContext = context.finalize();\n                    // @ts-expect-error finalize can change the state, check for error\n                    if (context.state === MONGOCRYPT_CTX_ERROR) {\n                        const message = context.status.message || 'Finalization error';\n                        throw new errors_1.MongoCryptError(message);\n                    }\n                    result = (0, bson_1.deserialize)(finalizedContext, this.options);\n                    break;\n                }\n                default:\n                    throw new errors_1.MongoCryptError(`Unknown state: ${context.state}`);\n            }\n        }\n        if (context.state === MONGOCRYPT_CTX_ERROR || result == null) {\n            const message = context.status.message;\n            if (!message) {\n                debug(`unidentifiable error in MongoCrypt - received an error status from \\`libmongocrypt\\` but received no error message.`);\n            }\n            throw new errors_1.MongoCryptError(message ??\n                'unidentifiable error in MongoCrypt - received an error status from `libmongocrypt` but received no error message.');\n        }\n        return result;\n    }\n    /**\n     * Handles the request to the KMS service. Exposed for testing purposes. Do not directly invoke.\n     * @param kmsContext - A C++ KMS context returned from the bindings\n     * @returns A promise that resolves when the KMS reply has be fully parsed\n     */\n    kmsRequest(request) {\n        const parsedUrl = request.endpoint.split(':');\n        const port = parsedUrl[1] != null ? Number.parseInt(parsedUrl[1], 10) : HTTPS_PORT;\n        const options = {\n            host: parsedUrl[0],\n            servername: parsedUrl[0],\n            port\n        };\n        const message = request.message;\n        // TODO(NODE-3959): We can adopt `for-await on(socket, 'data')` with logic to control abort\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises, no-async-promise-executor\n        return new Promise(async (resolve, reject) => {\n            const buffer = new utils_1.BufferPool();\n            // eslint-disable-next-line prefer-const\n            let socket;\n            let rawSocket;\n            function destroySockets() {\n                for (const sock of [socket, rawSocket]) {\n                    if (sock) {\n                        sock.removeAllListeners();\n                        sock.destroy();\n                    }\n                }\n            }\n            function ontimeout() {\n                destroySockets();\n                reject(new errors_1.MongoCryptError('KMS request timed out'));\n            }\n            function onerror(err) {\n                destroySockets();\n                const mcError = new errors_1.MongoCryptError('KMS request failed', { cause: err });\n                reject(mcError);\n            }\n            if (this.options.proxyOptions && this.options.proxyOptions.proxyHost) {\n                rawSocket = net.connect({\n                    host: this.options.proxyOptions.proxyHost,\n                    port: this.options.proxyOptions.proxyPort || 1080\n                });\n                rawSocket.on('timeout', ontimeout);\n                rawSocket.on('error', onerror);\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-var-requires\n                    const events = __webpack_require__(/*! events */ \"events\");\n                    await events.once(rawSocket, 'connect');\n                    socks ??= loadSocks();\n                    options.socket = (await socks.SocksClient.createConnection({\n                        existing_socket: rawSocket,\n                        command: 'connect',\n                        destination: { host: options.host, port: options.port },\n                        proxy: {\n                            // host and port are ignored because we pass existing_socket\n                            host: 'iLoveJavaScript',\n                            port: 0,\n                            type: 5,\n                            userId: this.options.proxyOptions.proxyUsername,\n                            password: this.options.proxyOptions.proxyPassword\n                        }\n                    })).socket;\n                }\n                catch (err) {\n                    return onerror(err);\n                }\n            }\n            const tlsOptions = this.options.tlsOptions;\n            if (tlsOptions) {\n                const kmsProvider = request.kmsProvider;\n                const providerTlsOptions = tlsOptions[kmsProvider];\n                if (providerTlsOptions) {\n                    const error = this.validateTlsOptions(kmsProvider, providerTlsOptions);\n                    if (error)\n                        reject(error);\n                    try {\n                        await this.setTlsOptions(providerTlsOptions, options);\n                    }\n                    catch (error) {\n                        return onerror(error);\n                    }\n                }\n            }\n            socket = tls.connect(options, () => {\n                socket.write(message);\n            });\n            socket.once('timeout', ontimeout);\n            socket.once('error', onerror);\n            socket.on('data', data => {\n                buffer.append(data);\n                while (request.bytesNeeded > 0 && buffer.length) {\n                    const bytesNeeded = Math.min(request.bytesNeeded, buffer.length);\n                    request.addResponse(buffer.read(bytesNeeded));\n                }\n                if (request.bytesNeeded <= 0) {\n                    // There's no need for any more activity on this socket at this point.\n                    destroySockets();\n                    resolve();\n                }\n            });\n        });\n    }\n    *requests(context) {\n        for (let request = context.nextKMSRequest(); request != null; request = context.nextKMSRequest()) {\n            yield this.kmsRequest(request);\n        }\n    }\n    /**\n     * Validates the provided TLS options are secure.\n     *\n     * @param kmsProvider - The KMS provider name.\n     * @param tlsOptions - The client TLS options for the provider.\n     *\n     * @returns An error if any option is invalid.\n     */\n    validateTlsOptions(kmsProvider, tlsOptions) {\n        const tlsOptionNames = Object.keys(tlsOptions);\n        for (const option of INSECURE_TLS_OPTIONS) {\n            if (tlsOptionNames.includes(option)) {\n                return new errors_1.MongoCryptError(`Insecure TLS options prohibited for ${kmsProvider}: ${option}`);\n            }\n        }\n    }\n    /**\n     * Sets only the valid secure TLS options.\n     *\n     * @param tlsOptions - The client TLS options for the provider.\n     * @param options - The existing connection options.\n     */\n    async setTlsOptions(tlsOptions, options) {\n        if (tlsOptions.tlsCertificateKeyFile) {\n            const cert = await fs.readFile(tlsOptions.tlsCertificateKeyFile);\n            options.cert = options.key = cert;\n        }\n        if (tlsOptions.tlsCAFile) {\n            options.ca = await fs.readFile(tlsOptions.tlsCAFile);\n        }\n        if (tlsOptions.tlsCertificateKeyFilePassword) {\n            options.passphrase = tlsOptions.tlsCertificateKeyFilePassword;\n        }\n    }\n    /**\n     * Fetches collection info for a provided namespace, when libmongocrypt\n     * enters the `MONGOCRYPT_CTX_NEED_MONGO_COLLINFO` state. The result is\n     * used to inform libmongocrypt of the schema associated with this\n     * namespace. Exposed for testing purposes. Do not directly invoke.\n     *\n     * @param client - A MongoClient connected to the topology\n     * @param ns - The namespace to list collections from\n     * @param filter - A filter for the listCollections command\n     * @param callback - Invoked with the info of the requested collection, or with an error\n     */\n    async fetchCollectionInfo(client, ns, filter) {\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const collections = await client\n            .db(db)\n            .listCollections(filter, {\n            promoteLongs: false,\n            promoteValues: false\n        })\n            .toArray();\n        const info = collections.length > 0 ? (0, bson_1.serialize)(collections[0]) : null;\n        return info;\n    }\n    /**\n     * Calls to the mongocryptd to provide markings for a command.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to a mongocryptd\n     * @param ns - The namespace (database.collection) the command is being executed on\n     * @param command - The command to execute.\n     * @param callback - Invoked with the serialized and marked bson command, or with an error\n     */\n    async markCommand(client, ns, command) {\n        const options = { promoteLongs: false, promoteValues: false };\n        const { db } = utils_1.MongoDBCollectionNamespace.fromString(ns);\n        const rawCommand = (0, bson_1.deserialize)(command, options);\n        const response = await client.db(db).command(rawCommand, options);\n        return (0, bson_1.serialize)(response, this.bsonOptions);\n    }\n    /**\n     * Requests keys from the keyVault collection on the topology.\n     * Exposed for testing purposes. Do not directly invoke.\n     * @param client - A MongoClient connected to the topology\n     * @param keyVaultNamespace - The namespace (database.collection) of the keyVault Collection\n     * @param filter - The filter for the find query against the keyVault Collection\n     * @param callback - Invoked with the found keys, or with an error\n     */\n    fetchKeys(client, keyVaultNamespace, filter) {\n        const { db: dbName, collection: collectionName } = utils_1.MongoDBCollectionNamespace.fromString(keyVaultNamespace);\n        return client\n            .db(dbName)\n            .collection(collectionName, { readConcern: { level: 'majority' } })\n            .find((0, bson_1.deserialize)(filter))\n            .toArray();\n    }\n}\nexports.StateMachine = StateMachine;\n//# sourceMappingURL=state_machine.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/state_machine.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthProvider = exports.AuthContext = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/**\n * Context used during authentication\n * @internal\n */\nclass AuthContext {\n    constructor(connection, credentials, options) {\n        /** If the context is for reauthentication. */\n        this.reauthenticating = false;\n        this.connection = connection;\n        this.credentials = credentials;\n        this.options = options;\n    }\n}\nexports.AuthContext = AuthContext;\nclass AuthProvider {\n    /**\n     * Prepare the handshake document before the initial handshake.\n     *\n     * @param handshakeDoc - The document used for the initial handshake on a connection\n     * @param authContext - Context for authentication flow\n     */\n    async prepare(handshakeDoc, _authContext) {\n        return handshakeDoc;\n    }\n    /**\n     * Reauthenticate.\n     * @param context - The shared auth context.\n     */\n    async reauth(context) {\n        if (context.reauthenticating) {\n            throw new error_1.MongoRuntimeError('Reauthentication already in progress.');\n        }\n        try {\n            context.reauthenticating = true;\n            await this.auth(context);\n        }\n        finally {\n            context.reauthenticating = false;\n        }\n    }\n}\nexports.AuthProvider = AuthProvider;\n//# sourceMappingURL=auth_provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9hdXRoX3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQixHQUFHLG1CQUFtQjtBQUMxQyxnQkFBZ0IsbUJBQU8sQ0FBQywyRUFBYTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL2F1dGhfcHJvdmlkZXIuanM/MThhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gZXhwb3J0cy5BdXRoQ29udGV4dCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG4vKipcbiAqIENvbnRleHQgdXNlZCBkdXJpbmcgYXV0aGVudGljYXRpb25cbiAqIEBpbnRlcm5hbFxuICovXG5jbGFzcyBBdXRoQ29udGV4dCB7XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIElmIHRoZSBjb250ZXh0IGlzIGZvciByZWF1dGhlbnRpY2F0aW9uLiAqL1xuICAgICAgICB0aGlzLnJlYXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5jcmVkZW50aWFscyA9IGNyZWRlbnRpYWxzO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQXV0aENvbnRleHQgPSBBdXRoQ29udGV4dDtcbmNsYXNzIEF1dGhQcm92aWRlciB7XG4gICAgLyoqXG4gICAgICogUHJlcGFyZSB0aGUgaGFuZHNoYWtlIGRvY3VtZW50IGJlZm9yZSB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaGFuZHNoYWtlRG9jIC0gVGhlIGRvY3VtZW50IHVzZWQgZm9yIHRoZSBpbml0aWFsIGhhbmRzaGFrZSBvbiBhIGNvbm5lY3Rpb25cbiAgICAgKiBAcGFyYW0gYXV0aENvbnRleHQgLSBDb250ZXh0IGZvciBhdXRoZW50aWNhdGlvbiBmbG93XG4gICAgICovXG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIF9hdXRoQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gaGFuZHNoYWtlRG9jO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWF1dGhlbnRpY2F0ZS5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBzaGFyZWQgYXV0aCBjb250ZXh0LlxuICAgICAqL1xuICAgIGFzeW5jIHJlYXV0aChjb250ZXh0KSB7XG4gICAgICAgIGlmIChjb250ZXh0LnJlYXV0aGVudGljYXRpbmcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdSZWF1dGhlbnRpY2F0aW9uIGFscmVhZHkgaW4gcHJvZ3Jlc3MuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnRleHQucmVhdXRoZW50aWNhdGluZyA9IHRydWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmF1dGgoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlYXV0aGVudGljYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQXV0aFByb3ZpZGVyID0gQXV0aFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aF9wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/gssapi.js":
/*!*******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/gssapi.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveCname = exports.performGSSAPICanonicalizeHostName = exports.GSSAPI = exports.GSSAPICanonicalizationValue = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\n/** @public */\nexports.GSSAPICanonicalizationValue = Object.freeze({\n    on: true,\n    off: false,\n    none: 'none',\n    forward: 'forward',\n    forwardAndReverse: 'forwardAndReverse'\n});\nasync function externalCommand(connection, command) {\n    return connection.commandAsync((0, utils_1.ns)('$external.$cmd'), command, undefined);\n}\nlet krb;\nclass GSSAPI extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (credentials == null) {\n            throw new error_1.MongoMissingCredentialsError('Credentials required for GSSAPI authentication');\n        }\n        const { username } = credentials;\n        const client = await makeKerberosClient(authContext);\n        const payload = await client.step('');\n        const saslStartResponse = await externalCommand(connection, saslStart(payload));\n        const negotiatedPayload = await negotiate(client, 10, saslStartResponse.payload);\n        const saslContinueResponse = await externalCommand(connection, saslContinue(negotiatedPayload, saslStartResponse.conversationId));\n        const finalizePayload = await finalize(client, username, saslContinueResponse.payload);\n        await externalCommand(connection, {\n            saslContinue: 1,\n            conversationId: saslContinueResponse.conversationId,\n            payload: finalizePayload\n        });\n    }\n}\nexports.GSSAPI = GSSAPI;\nasync function makeKerberosClient(authContext) {\n    const { hostAddress } = authContext.options;\n    const { credentials } = authContext;\n    if (!hostAddress || typeof hostAddress.host !== 'string' || !credentials) {\n        throw new error_1.MongoInvalidArgumentError('Connection must have host and port and credentials defined.');\n    }\n    loadKrb();\n    if ('kModuleError' in krb) {\n        throw krb['kModuleError'];\n    }\n    const { initializeClient } = krb;\n    const { username, password } = credentials;\n    const mechanismProperties = credentials.mechanismProperties;\n    const serviceName = mechanismProperties.SERVICE_NAME ?? 'mongodb';\n    const host = await performGSSAPICanonicalizeHostName(hostAddress.host, mechanismProperties);\n    const initOptions = {};\n    if (password != null) {\n        // TODO(NODE-5139): These do not match the typescript options in initializeClient\n        Object.assign(initOptions, { user: username, password: password });\n    }\n    const spnHost = mechanismProperties.SERVICE_HOST ?? host;\n    let spn = `${serviceName}${process.platform === 'win32' ? '/' : '@'}${spnHost}`;\n    if ('SERVICE_REALM' in mechanismProperties) {\n        spn = `${spn}@${mechanismProperties.SERVICE_REALM}`;\n    }\n    return initializeClient(spn, initOptions);\n}\nfunction saslStart(payload) {\n    return {\n        saslStart: 1,\n        mechanism: 'GSSAPI',\n        payload,\n        autoAuthorize: 1\n    };\n}\nfunction saslContinue(payload, conversationId) {\n    return {\n        saslContinue: 1,\n        conversationId,\n        payload\n    };\n}\nasync function negotiate(client, retries, payload) {\n    try {\n        const response = await client.step(payload);\n        return response || '';\n    }\n    catch (error) {\n        if (retries === 0) {\n            // Retries exhausted, raise error\n            throw error;\n        }\n        // Adjust number of retries and call step again\n        return negotiate(client, retries - 1, payload);\n    }\n}\nasync function finalize(client, user, payload) {\n    // GSS Client Unwrap\n    const response = await client.unwrap(payload);\n    return client.wrap(response || '', { user });\n}\nasync function performGSSAPICanonicalizeHostName(host, mechanismProperties) {\n    const mode = mechanismProperties.CANONICALIZE_HOST_NAME;\n    if (!mode || mode === exports.GSSAPICanonicalizationValue.none) {\n        return host;\n    }\n    // If forward and reverse or true\n    if (mode === exports.GSSAPICanonicalizationValue.on ||\n        mode === exports.GSSAPICanonicalizationValue.forwardAndReverse) {\n        // Perform the lookup of the ip address.\n        const { address } = await dns.promises.lookup(host);\n        try {\n            // Perform a reverse ptr lookup on the ip address.\n            const results = await dns.promises.resolvePtr(address);\n            // If the ptr did not error but had no results, return the host.\n            return results.length > 0 ? results[0] : host;\n        }\n        catch (error) {\n            // This can error as ptr records may not exist for all ips. In this case\n            // fallback to a cname lookup as dns.lookup() does not return the\n            // cname.\n            return resolveCname(host);\n        }\n    }\n    else {\n        // The case for forward is just to resolve the cname as dns.lookup()\n        // will not return it.\n        return resolveCname(host);\n    }\n}\nexports.performGSSAPICanonicalizeHostName = performGSSAPICanonicalizeHostName;\nasync function resolveCname(host) {\n    // Attempt to resolve the host name\n    try {\n        const results = await dns.promises.resolveCname(host);\n        // Get the first resolved host id\n        return results.length > 0 ? results[0] : host;\n    }\n    catch {\n        return host;\n    }\n}\nexports.resolveCname = resolveCname;\n/**\n * Load the Kerberos library.\n */\nfunction loadKrb() {\n    if (!krb) {\n        krb = (0, deps_1.getKerberos)();\n    }\n}\n//# sourceMappingURL=gssapi.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9nc3NhcGkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcseUNBQXlDLEdBQUcsY0FBYyxHQUFHLG1DQUFtQztBQUN2SCxZQUFZLG1CQUFPLENBQUMsZ0JBQUs7QUFDekIsZUFBZSxtQkFBTyxDQUFDLHlFQUFZO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3JDLHdCQUF3QixtQkFBTyxDQUFDLGlHQUFpQjtBQUNqRDtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFdBQVc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLFlBQVksY0FBYztBQUMxQixZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQixZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsb0NBQW9DO0FBQ3pFO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWSxFQUFFLHlDQUF5QyxFQUFFLFFBQVE7QUFDbEY7QUFDQSxpQkFBaUIsSUFBSSxHQUFHLGtDQUFrQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE1BQU07QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvZ3NzYXBpLmpzP2UzNGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlc29sdmVDbmFtZSA9IGV4cG9ydHMucGVyZm9ybUdTU0FQSUNhbm9uaWNhbGl6ZUhvc3ROYW1lID0gZXhwb3J0cy5HU1NBUEkgPSBleHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZSA9IHZvaWQgMDtcbmNvbnN0IGRucyA9IHJlcXVpcmUoXCJkbnNcIik7XG5jb25zdCBkZXBzXzEgPSByZXF1aXJlKFwiLi4vLi4vZGVwc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbi8qKiBAcHVibGljICovXG5leHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIG9uOiB0cnVlLFxuICAgIG9mZjogZmFsc2UsXG4gICAgbm9uZTogJ25vbmUnLFxuICAgIGZvcndhcmQ6ICdmb3J3YXJkJyxcbiAgICBmb3J3YXJkQW5kUmV2ZXJzZTogJ2ZvcndhcmRBbmRSZXZlcnNlJ1xufSk7XG5hc3luYyBmdW5jdGlvbiBleHRlcm5hbENvbW1hbmQoY29ubmVjdGlvbiwgY29tbWFuZCkge1xuICAgIHJldHVybiBjb25uZWN0aW9uLmNvbW1hbmRBc3luYygoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG59XG5sZXQga3JiO1xuY2xhc3MgR1NTQVBJIGV4dGVuZHMgYXV0aF9wcm92aWRlcl8xLkF1dGhQcm92aWRlciB7XG4gICAgYXN5bmMgYXV0aChhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0NyZWRlbnRpYWxzIHJlcXVpcmVkIGZvciBHU1NBUEkgYXV0aGVudGljYXRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lIH0gPSBjcmVkZW50aWFscztcbiAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgbWFrZUtlcmJlcm9zQ2xpZW50KGF1dGhDb250ZXh0KTtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IGNsaWVudC5zdGVwKCcnKTtcbiAgICAgICAgY29uc3Qgc2FzbFN0YXJ0UmVzcG9uc2UgPSBhd2FpdCBleHRlcm5hbENvbW1hbmQoY29ubmVjdGlvbiwgc2FzbFN0YXJ0KHBheWxvYWQpKTtcbiAgICAgICAgY29uc3QgbmVnb3RpYXRlZFBheWxvYWQgPSBhd2FpdCBuZWdvdGlhdGUoY2xpZW50LCAxMCwgc2FzbFN0YXJ0UmVzcG9uc2UucGF5bG9hZCk7XG4gICAgICAgIGNvbnN0IHNhc2xDb250aW51ZVJlc3BvbnNlID0gYXdhaXQgZXh0ZXJuYWxDb21tYW5kKGNvbm5lY3Rpb24sIHNhc2xDb250aW51ZShuZWdvdGlhdGVkUGF5bG9hZCwgc2FzbFN0YXJ0UmVzcG9uc2UuY29udmVyc2F0aW9uSWQpKTtcbiAgICAgICAgY29uc3QgZmluYWxpemVQYXlsb2FkID0gYXdhaXQgZmluYWxpemUoY2xpZW50LCB1c2VybmFtZSwgc2FzbENvbnRpbnVlUmVzcG9uc2UucGF5bG9hZCk7XG4gICAgICAgIGF3YWl0IGV4dGVybmFsQ29tbWFuZChjb25uZWN0aW9uLCB7XG4gICAgICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgICAgICBjb252ZXJzYXRpb25JZDogc2FzbENvbnRpbnVlUmVzcG9uc2UuY29udmVyc2F0aW9uSWQsXG4gICAgICAgICAgICBwYXlsb2FkOiBmaW5hbGl6ZVBheWxvYWRcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5HU1NBUEkgPSBHU1NBUEk7XG5hc3luYyBmdW5jdGlvbiBtYWtlS2VyYmVyb3NDbGllbnQoYXV0aENvbnRleHQpIHtcbiAgICBjb25zdCB7IGhvc3RBZGRyZXNzIH0gPSBhdXRoQ29udGV4dC5vcHRpb25zO1xuICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgIGlmICghaG9zdEFkZHJlc3MgfHwgdHlwZW9mIGhvc3RBZGRyZXNzLmhvc3QgIT09ICdzdHJpbmcnIHx8ICFjcmVkZW50aWFscykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDb25uZWN0aW9uIG11c3QgaGF2ZSBob3N0IGFuZCBwb3J0IGFuZCBjcmVkZW50aWFscyBkZWZpbmVkLicpO1xuICAgIH1cbiAgICBsb2FkS3JiKCk7XG4gICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIGtyYikge1xuICAgICAgICB0aHJvdyBrcmJbJ2tNb2R1bGVFcnJvciddO1xuICAgIH1cbiAgICBjb25zdCB7IGluaXRpYWxpemVDbGllbnQgfSA9IGtyYjtcbiAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gY3JlZGVudGlhbHM7XG4gICAgY29uc3QgbWVjaGFuaXNtUHJvcGVydGllcyA9IGNyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXM7XG4gICAgY29uc3Qgc2VydmljZU5hbWUgPSBtZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfTkFNRSA/PyAnbW9uZ29kYic7XG4gICAgY29uc3QgaG9zdCA9IGF3YWl0IHBlcmZvcm1HU1NBUElDYW5vbmljYWxpemVIb3N0TmFtZShob3N0QWRkcmVzcy5ob3N0LCBtZWNoYW5pc21Qcm9wZXJ0aWVzKTtcbiAgICBjb25zdCBpbml0T3B0aW9ucyA9IHt9O1xuICAgIGlmIChwYXNzd29yZCAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE8oTk9ERS01MTM5KTogVGhlc2UgZG8gbm90IG1hdGNoIHRoZSB0eXBlc2NyaXB0IG9wdGlvbnMgaW4gaW5pdGlhbGl6ZUNsaWVudFxuICAgICAgICBPYmplY3QuYXNzaWduKGluaXRPcHRpb25zLCB7IHVzZXI6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmQgfSk7XG4gICAgfVxuICAgIGNvbnN0IHNwbkhvc3QgPSBtZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfSE9TVCA/PyBob3N0O1xuICAgIGxldCBzcG4gPSBgJHtzZXJ2aWNlTmFtZX0ke3Byb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyAnLycgOiAnQCd9JHtzcG5Ib3N0fWA7XG4gICAgaWYgKCdTRVJWSUNFX1JFQUxNJyBpbiBtZWNoYW5pc21Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHNwbiA9IGAke3Nwbn1AJHttZWNoYW5pc21Qcm9wZXJ0aWVzLlNFUlZJQ0VfUkVBTE19YDtcbiAgICB9XG4gICAgcmV0dXJuIGluaXRpYWxpemVDbGllbnQoc3BuLCBpbml0T3B0aW9ucyk7XG59XG5mdW5jdGlvbiBzYXNsU3RhcnQocGF5bG9hZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgbWVjaGFuaXNtOiAnR1NTQVBJJyxcbiAgICAgICAgcGF5bG9hZCxcbiAgICAgICAgYXV0b0F1dGhvcml6ZTogMVxuICAgIH07XG59XG5mdW5jdGlvbiBzYXNsQ29udGludWUocGF5bG9hZCwgY29udmVyc2F0aW9uSWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzYXNsQ29udGludWU6IDEsXG4gICAgICAgIGNvbnZlcnNhdGlvbklkLFxuICAgICAgICBwYXlsb2FkXG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIG5lZ290aWF0ZShjbGllbnQsIHJldHJpZXMsIHBheWxvYWQpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5zdGVwKHBheWxvYWQpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UgfHwgJyc7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAocmV0cmllcyA9PT0gMCkge1xuICAgICAgICAgICAgLy8gUmV0cmllcyBleGhhdXN0ZWQsIHJhaXNlIGVycm9yXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGp1c3QgbnVtYmVyIG9mIHJldHJpZXMgYW5kIGNhbGwgc3RlcCBhZ2FpblxuICAgICAgICByZXR1cm4gbmVnb3RpYXRlKGNsaWVudCwgcmV0cmllcyAtIDEsIHBheWxvYWQpO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGZpbmFsaXplKGNsaWVudCwgdXNlciwgcGF5bG9hZCkge1xuICAgIC8vIEdTUyBDbGllbnQgVW53cmFwXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQudW53cmFwKHBheWxvYWQpO1xuICAgIHJldHVybiBjbGllbnQud3JhcChyZXNwb25zZSB8fCAnJywgeyB1c2VyIH0pO1xufVxuYXN5bmMgZnVuY3Rpb24gcGVyZm9ybUdTU0FQSUNhbm9uaWNhbGl6ZUhvc3ROYW1lKGhvc3QsIG1lY2hhbmlzbVByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBtb2RlID0gbWVjaGFuaXNtUHJvcGVydGllcy5DQU5PTklDQUxJWkVfSE9TVF9OQU1FO1xuICAgIGlmICghbW9kZSB8fCBtb2RlID09PSBleHBvcnRzLkdTU0FQSUNhbm9uaWNhbGl6YXRpb25WYWx1ZS5ub25lKSB7XG4gICAgICAgIHJldHVybiBob3N0O1xuICAgIH1cbiAgICAvLyBJZiBmb3J3YXJkIGFuZCByZXZlcnNlIG9yIHRydWVcbiAgICBpZiAobW9kZSA9PT0gZXhwb3J0cy5HU1NBUElDYW5vbmljYWxpemF0aW9uVmFsdWUub24gfHxcbiAgICAgICAgbW9kZSA9PT0gZXhwb3J0cy5HU1NBUElDYW5vbmljYWxpemF0aW9uVmFsdWUuZm9yd2FyZEFuZFJldmVyc2UpIHtcbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgbG9va3VwIG9mIHRoZSBpcCBhZGRyZXNzLlxuICAgICAgICBjb25zdCB7IGFkZHJlc3MgfSA9IGF3YWl0IGRucy5wcm9taXNlcy5sb29rdXAoaG9zdCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBQZXJmb3JtIGEgcmV2ZXJzZSBwdHIgbG9va3VwIG9uIHRoZSBpcCBhZGRyZXNzLlxuICAgICAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGRucy5wcm9taXNlcy5yZXNvbHZlUHRyKGFkZHJlc3MpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHB0ciBkaWQgbm90IGVycm9yIGJ1dCBoYWQgbm8gcmVzdWx0cywgcmV0dXJuIHRoZSBob3N0LlxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMubGVuZ3RoID4gMCA/IHJlc3VsdHNbMF0gOiBob3N0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVGhpcyBjYW4gZXJyb3IgYXMgcHRyIHJlY29yZHMgbWF5IG5vdCBleGlzdCBmb3IgYWxsIGlwcy4gSW4gdGhpcyBjYXNlXG4gICAgICAgICAgICAvLyBmYWxsYmFjayB0byBhIGNuYW1lIGxvb2t1cCBhcyBkbnMubG9va3VwKCkgZG9lcyBub3QgcmV0dXJuIHRoZVxuICAgICAgICAgICAgLy8gY25hbWUuXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUNuYW1lKGhvc3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBUaGUgY2FzZSBmb3IgZm9yd2FyZCBpcyBqdXN0IHRvIHJlc29sdmUgdGhlIGNuYW1lIGFzIGRucy5sb29rdXAoKVxuICAgICAgICAvLyB3aWxsIG5vdCByZXR1cm4gaXQuXG4gICAgICAgIHJldHVybiByZXNvbHZlQ25hbWUoaG9zdCk7XG4gICAgfVxufVxuZXhwb3J0cy5wZXJmb3JtR1NTQVBJQ2Fub25pY2FsaXplSG9zdE5hbWUgPSBwZXJmb3JtR1NTQVBJQ2Fub25pY2FsaXplSG9zdE5hbWU7XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlQ25hbWUoaG9zdCkge1xuICAgIC8vIEF0dGVtcHQgdG8gcmVzb2x2ZSB0aGUgaG9zdCBuYW1lXG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGRucy5wcm9taXNlcy5yZXNvbHZlQ25hbWUoaG9zdCk7XG4gICAgICAgIC8vIEdldCB0aGUgZmlyc3QgcmVzb2x2ZWQgaG9zdCBpZFxuICAgICAgICByZXR1cm4gcmVzdWx0cy5sZW5ndGggPiAwID8gcmVzdWx0c1swXSA6IGhvc3Q7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGhvc3Q7XG4gICAgfVxufVxuZXhwb3J0cy5yZXNvbHZlQ25hbWUgPSByZXNvbHZlQ25hbWU7XG4vKipcbiAqIExvYWQgdGhlIEtlcmJlcm9zIGxpYnJhcnkuXG4gKi9cbmZ1bmN0aW9uIGxvYWRLcmIoKSB7XG4gICAgaWYgKCFrcmIpIHtcbiAgICAgICAga3JiID0gKDAsIGRlcHNfMS5nZXRLZXJiZXJvcykoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nc3NhcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/gssapi.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongo_credentials.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongo_credentials.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCredentials = exports.DEFAULT_ALLOWED_HOSTS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst gssapi_1 = __webpack_require__(/*! ./gssapi */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\n// https://github.com/mongodb/specifications/blob/master/source/auth/auth.rst\nfunction getDefaultAuthMechanism(hello) {\n    if (hello) {\n        // If hello contains saslSupportedMechs, use scram-sha-256\n        // if it is available, else scram-sha-1\n        if (Array.isArray(hello.saslSupportedMechs)) {\n            return hello.saslSupportedMechs.includes(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256)\n                ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA256\n                : providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n        // Fallback to legacy selection method. If wire version >= 3, use scram-sha-1\n        if (hello.maxWireVersion >= 3) {\n            return providers_1.AuthMechanism.MONGODB_SCRAM_SHA1;\n        }\n    }\n    // Default for wireprotocol < 3\n    return providers_1.AuthMechanism.MONGODB_CR;\n}\nconst ALLOWED_PROVIDER_NAMES = ['aws', 'azure'];\nconst ALLOWED_HOSTS_ERROR = 'Auth mechanism property ALLOWED_HOSTS must be an array of strings.';\n/** @internal */\nexports.DEFAULT_ALLOWED_HOSTS = [\n    '*.mongodb.net',\n    '*.mongodb-dev.net',\n    '*.mongodbgov.net',\n    'localhost',\n    '127.0.0.1',\n    '::1'\n];\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nclass MongoCredentials {\n    constructor(options) {\n        this.username = options.username ?? '';\n        this.password = options.password;\n        this.source = options.source;\n        if (!this.source && options.db) {\n            this.source = options.db;\n        }\n        this.mechanism = options.mechanism || providers_1.AuthMechanism.MONGODB_DEFAULT;\n        this.mechanismProperties = options.mechanismProperties || {};\n        if (this.mechanism.match(/MONGODB-AWS/i)) {\n            if (!this.username && process.env.AWS_ACCESS_KEY_ID) {\n                this.username = process.env.AWS_ACCESS_KEY_ID;\n            }\n            if (!this.password && process.env.AWS_SECRET_ACCESS_KEY) {\n                this.password = process.env.AWS_SECRET_ACCESS_KEY;\n            }\n            if (this.mechanismProperties.AWS_SESSION_TOKEN == null &&\n                process.env.AWS_SESSION_TOKEN != null) {\n                this.mechanismProperties = {\n                    ...this.mechanismProperties,\n                    AWS_SESSION_TOKEN: process.env.AWS_SESSION_TOKEN\n                };\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC && !this.mechanismProperties.ALLOWED_HOSTS) {\n            this.mechanismProperties = {\n                ...this.mechanismProperties,\n                ALLOWED_HOSTS: exports.DEFAULT_ALLOWED_HOSTS\n            };\n        }\n        Object.freeze(this.mechanismProperties);\n        Object.freeze(this);\n    }\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other) {\n        return (this.mechanism === other.mechanism &&\n            this.username === other.username &&\n            this.password === other.password &&\n            this.source === other.source);\n    }\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello) {\n        // If the mechanism is not \"default\", then it does not need to be resolved\n        if (this.mechanism.match(/DEFAULT/i)) {\n            return new MongoCredentials({\n                username: this.username,\n                password: this.password,\n                source: this.source,\n                mechanism: getDefaultAuthMechanism(hello),\n                mechanismProperties: this.mechanismProperties\n            });\n        }\n        return this;\n    }\n    validate() {\n        if ((this.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_CR ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 ||\n            this.mechanism === providers_1.AuthMechanism.MONGODB_SCRAM_SHA256) &&\n            !this.username) {\n            throw new error_1.MongoMissingCredentialsError(`Username required for mechanism '${this.mechanism}'`);\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            if (this.username && this.mechanismProperties.PROVIDER_NAME) {\n                throw new error_1.MongoInvalidArgumentError(`username and PROVIDER_NAME may not be used together for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME === 'azure' &&\n                !this.mechanismProperties.TOKEN_AUDIENCE) {\n                throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n            }\n            if (this.mechanismProperties.PROVIDER_NAME &&\n                !ALLOWED_PROVIDER_NAMES.includes(this.mechanismProperties.PROVIDER_NAME)) {\n                throw new error_1.MongoInvalidArgumentError(`Currently only a PROVIDER_NAME in ${ALLOWED_PROVIDER_NAMES.join(',')} is supported for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.REFRESH_TOKEN_CALLBACK &&\n                !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`A REQUEST_TOKEN_CALLBACK must be provided when using a REFRESH_TOKEN_CALLBACK for mechanism '${this.mechanism}'`);\n            }\n            if (!this.mechanismProperties.PROVIDER_NAME &&\n                !this.mechanismProperties.REQUEST_TOKEN_CALLBACK) {\n                throw new error_1.MongoInvalidArgumentError(`Either a PROVIDER_NAME or a REQUEST_TOKEN_CALLBACK must be specified for mechanism '${this.mechanism}'.`);\n            }\n            if (this.mechanismProperties.ALLOWED_HOSTS) {\n                const hosts = this.mechanismProperties.ALLOWED_HOSTS;\n                if (!Array.isArray(hosts)) {\n                    throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                }\n                for (const host of hosts) {\n                    if (typeof host !== 'string') {\n                        throw new error_1.MongoInvalidArgumentError(ALLOWED_HOSTS_ERROR);\n                    }\n                }\n            }\n        }\n        if (providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(this.mechanism)) {\n            if (this.source != null && this.source !== '$external') {\n                // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n                throw new error_1.MongoAPIError(`Invalid source '${this.source}' for mechanism '${this.mechanism}' specified.`);\n            }\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_PLAIN && this.source == null) {\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError('PLAIN Authentication Mechanism needs an auth source');\n        }\n        if (this.mechanism === providers_1.AuthMechanism.MONGODB_X509 && this.password != null) {\n            if (this.password === '') {\n                Reflect.set(this, 'password', undefined);\n                return;\n            }\n            // TODO(NODE-3485): Replace this with a MongoAuthValidationError\n            throw new error_1.MongoAPIError(`Password not allowed for mechanism MONGODB-X509`);\n        }\n        const canonicalization = this.mechanismProperties.CANONICALIZE_HOST_NAME ?? false;\n        if (!Object.values(gssapi_1.GSSAPICanonicalizationValue).includes(canonicalization)) {\n            throw new error_1.MongoAPIError(`Invalid CANONICALIZE_HOST_NAME value: ${canonicalization}`);\n        }\n    }\n    static merge(creds, options) {\n        return new MongoCredentials({\n            username: options.username ?? creds?.username ?? '',\n            password: options.password ?? creds?.password ?? '',\n            mechanism: options.mechanism ?? creds?.mechanism ?? providers_1.AuthMechanism.MONGODB_DEFAULT,\n            mechanismProperties: options.mechanismProperties ?? creds?.mechanismProperties ?? {},\n            source: options.source ?? options.db ?? creds?.source ?? 'admin'\n        });\n    }\n}\nexports.MongoCredentials = MongoCredentials;\n//# sourceMappingURL=mongo_credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongocr.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongocr.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoCR = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass MongoCR extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password, source } = credentials;\n        const { nonce } = await connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), { getnonce: 1 }, undefined);\n        const hashPassword = crypto\n            .createHash('md5')\n            .update(`${username}:mongo:${password}`, 'utf8')\n            .digest('hex');\n        // Final key\n        const key = crypto\n            .createHash('md5')\n            .update(`${nonce}${username}${hashPassword}`, 'utf8')\n            .digest('hex');\n        const authenticateCommand = {\n            authenticate: 1,\n            user: username,\n            nonce,\n            key\n        };\n        await connection.commandAsync((0, utils_1.ns)(`${source}.$cmd`), authenticateCommand, undefined);\n    }\n}\nexports.MongoCR = MongoCR;\n//# sourceMappingURL=mongocr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2NyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0IsZ0JBQWdCLG1CQUFPLENBQUMsMkVBQWE7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMsMkVBQWE7QUFDckMsd0JBQXdCLG1CQUFPLENBQUMsaUdBQWlCO0FBQ2pEO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiw2QkFBNkI7QUFDN0MsZ0JBQWdCLFFBQVEsbURBQW1ELE9BQU8sV0FBVyxhQUFhO0FBQzFHO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUyxTQUFTLFNBQVM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxhQUFhO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELE9BQU87QUFDaEU7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29jci5qcz9jMTFlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb0NSID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzXCIpO1xuY29uc3QgYXV0aF9wcm92aWRlcl8xID0gcmVxdWlyZShcIi4vYXV0aF9wcm92aWRlclwiKTtcbmNsYXNzIE1vbmdvQ1IgZXh0ZW5kcyBhdXRoX3Byb3ZpZGVyXzEuQXV0aFByb3ZpZGVyIHtcbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiwgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKCdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB1c2VybmFtZSwgcGFzc3dvcmQsIHNvdXJjZSB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgIGNvbnN0IHsgbm9uY2UgfSA9IGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZEFzeW5jKCgwLCB1dGlsc18xLm5zKShgJHtzb3VyY2V9LiRjbWRgKSwgeyBnZXRub25jZTogMSB9LCB1bmRlZmluZWQpO1xuICAgICAgICBjb25zdCBoYXNoUGFzc3dvcmQgPSBjcnlwdG9cbiAgICAgICAgICAgIC5jcmVhdGVIYXNoKCdtZDUnKVxuICAgICAgICAgICAgLnVwZGF0ZShgJHt1c2VybmFtZX06bW9uZ286JHtwYXNzd29yZH1gLCAndXRmOCcpXG4gICAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICAgICAgLy8gRmluYWwga2V5XG4gICAgICAgIGNvbnN0IGtleSA9IGNyeXB0b1xuICAgICAgICAgICAgLmNyZWF0ZUhhc2goJ21kNScpXG4gICAgICAgICAgICAudXBkYXRlKGAke25vbmNlfSR7dXNlcm5hbWV9JHtoYXNoUGFzc3dvcmR9YCwgJ3V0ZjgnKVxuICAgICAgICAgICAgLmRpZ2VzdCgnaGV4Jyk7XG4gICAgICAgIGNvbnN0IGF1dGhlbnRpY2F0ZUNvbW1hbmQgPSB7XG4gICAgICAgICAgICBhdXRoZW50aWNhdGU6IDEsXG4gICAgICAgICAgICB1c2VyOiB1c2VybmFtZSxcbiAgICAgICAgICAgIG5vbmNlLFxuICAgICAgICAgICAga2V5XG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZEFzeW5jKCgwLCB1dGlsc18xLm5zKShgJHtzb3VyY2V9LiRjbWRgKSwgYXV0aGVudGljYXRlQ29tbWFuZCwgdW5kZWZpbmVkKTtcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvQ1IgPSBNb25nb0NSO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9uZ29jci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongocr.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_aws.js":
/*!************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_aws.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBAWS = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst BSON = __webpack_require__(/*! ../../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./mongo_credentials */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * The following regions use the global AWS STS endpoint, sts.amazonaws.com, by default\n * https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html\n */\nconst LEGACY_REGIONS = new Set([\n    'ap-northeast-1',\n    'ap-south-1',\n    'ap-southeast-1',\n    'ap-southeast-2',\n    'aws-global',\n    'ca-central-1',\n    'eu-central-1',\n    'eu-north-1',\n    'eu-west-1',\n    'eu-west-2',\n    'eu-west-3',\n    'sa-east-1',\n    'us-east-1',\n    'us-east-2',\n    'us-west-1',\n    'us-west-2'\n]);\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n    useBigInt64: false,\n    promoteLongs: true,\n    promoteValues: true,\n    promoteBuffers: false,\n    bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n    constructor() {\n        super();\n        this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    }\n    async auth(authContext) {\n        const { connection } = authContext;\n        if (!authContext.credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        if ('kModuleError' in deps_1.aws4) {\n            throw deps_1.aws4['kModuleError'];\n        }\n        const { sign } = deps_1.aws4;\n        if ((0, utils_1.maxWireVersion)(connection) < 9) {\n            throw new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later');\n        }\n        if (!authContext.credentials.username) {\n            authContext.credentials = await makeTempCredentials(authContext.credentials);\n        }\n        const { credentials } = authContext;\n        const accessKeyId = credentials.username;\n        const secretAccessKey = credentials.password;\n        const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n        // If all three defined, include sessionToken, else include username and pass, else no credentials\n        const awsCredentials = accessKeyId && secretAccessKey && sessionToken\n            ? { accessKeyId, secretAccessKey, sessionToken }\n            : accessKeyId && secretAccessKey\n                ? { accessKeyId, secretAccessKey }\n                : undefined;\n        const db = credentials.source;\n        const nonce = await this.randomBytesAsync(32);\n        const saslStart = {\n            saslStart: 1,\n            mechanism: 'MONGODB-AWS',\n            payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n        };\n        const saslStartResponse = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined);\n        const serverResponse = BSON.deserialize(saslStartResponse.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`);\n        }\n        if (!utils_1.ByteUtils.equals(serverNonce.subarray(0, nonce.byteLength), nonce)) {\n            // throw because the serverNonce's leading 32 bytes must equal the client nonce's 32 bytes\n            // https://github.com/mongodb/specifications/blob/875446db44aade414011731840831f38a6c668df/source/auth/auth.rst#id11\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('Server nonce does not begin with client nonce');\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`);\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Content-Length': body.length,\n                'X-MongoDB-Server-Nonce': utils_1.ByteUtils.toBase64(serverNonce),\n                'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n        }, awsCredentials);\n        const payload = {\n            a: options.headers.Authorization,\n            d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n            payload.t = sessionToken;\n        }\n        const saslContinue = {\n            saslContinue: 1,\n            conversationId: 1,\n            payload: BSON.serialize(payload, bsonOptions)\n        };\n        await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined);\n    }\n}\nMongoDBAWS.credentialProvider = null;\nexports.MongoDBAWS = MongoDBAWS;\nasync function makeTempCredentials(credentials) {\n    function makeMongoCredentialsFromAWSTemp(creds) {\n        if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n            throw new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials');\n        }\n        return new mongo_credentials_1.MongoCredentials({\n            username: creds.AccessKeyId,\n            password: creds.SecretAccessKey,\n            source: credentials.source,\n            mechanism: providers_1.AuthMechanism.MONGODB_AWS,\n            mechanismProperties: {\n                AWS_SESSION_TOKEN: creds.Token\n            }\n        });\n    }\n    MongoDBAWS.credentialProvider ??= (0, deps_1.getAwsCredentialProvider)();\n    // Check if the AWS credential provider from the SDK is present. If not,\n    // use the old method.\n    if ('kModuleError' in MongoDBAWS.credentialProvider) {\n        // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n        // is set then drivers MUST assume that it was set by an AWS ECS agent\n        if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n            return makeMongoCredentialsFromAWSTemp(await (0, utils_1.request)(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`));\n        }\n        // Otherwise assume we are on an EC2 instance\n        // get a token\n        const token = await (0, utils_1.request)(`${AWS_EC2_URI}/latest/api/token`, {\n            method: 'PUT',\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 }\n        });\n        // get role name\n        const roleName = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n            json: false,\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        // get temp credentials\n        const creds = await (0, utils_1.request)(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n            headers: { 'X-aws-ec2-metadata-token': token }\n        });\n        return makeMongoCredentialsFromAWSTemp(creds);\n    }\n    else {\n        let { AWS_STS_REGIONAL_ENDPOINTS = '', AWS_REGION = '' } = process.env;\n        AWS_STS_REGIONAL_ENDPOINTS = AWS_STS_REGIONAL_ENDPOINTS.toLowerCase();\n        AWS_REGION = AWS_REGION.toLowerCase();\n        /** The option setting should work only for users who have explicit settings in their environment, the driver should not encode \"defaults\" */\n        const awsRegionSettingsExist = AWS_REGION.length !== 0 && AWS_STS_REGIONAL_ENDPOINTS.length !== 0;\n        /**\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to regional, users are opting into the new behavior of respecting the region settings\n         *\n         * If AWS_STS_REGIONAL_ENDPOINTS is set to legacy, then \"old\" regions need to keep using the global setting.\n         * Technically the SDK gets this wrong, it reaches out to 'sts.us-east-1.amazonaws.com' when it should be 'sts.amazonaws.com'.\n         * That is not our bug to fix here. We leave that up to the SDK.\n         */\n        const useRegionalSts = AWS_STS_REGIONAL_ENDPOINTS === 'regional' ||\n            (AWS_STS_REGIONAL_ENDPOINTS === 'legacy' && !LEGACY_REGIONS.has(AWS_REGION));\n        const provider = awsRegionSettingsExist && useRegionalSts\n            ? MongoDBAWS.credentialProvider.fromNodeProviderChain({\n                clientConfig: { region: AWS_REGION }\n            })\n            : MongoDBAWS.credentialProvider.fromNodeProviderChain();\n        /*\n         * Creates a credential provider that will attempt to find credentials from the\n         * following sources (listed in order of precedence):\n         *\n         * - Environment variables exposed via process.env\n         * - SSO credentials from token cache\n         * - Web identity token credentials\n         * - Shared credentials and config ini files\n         * - The EC2/ECS Instance Metadata Service\n         */\n        try {\n            const creds = await provider();\n            return makeMongoCredentialsFromAWSTemp({\n                AccessKeyId: creds.accessKeyId,\n                SecretAccessKey: creds.secretAccessKey,\n                Token: creds.sessionToken,\n                Expiration: creds.expiration\n            });\n        }\n        catch (error) {\n            throw new error_1.MongoAWSError(error.message);\n        }\n    }\n}\nfunction deriveRegion(host) {\n    const parts = host.split('.');\n    if (parts.length === 1 || parts[1] === 'amazonaws') {\n        return 'us-east-1';\n    }\n    return parts[1];\n}\n//# sourceMappingURL=mongodb_aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst aws_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/aws_service_workflow */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\");\nconst azure_service_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/azure_service_workflow */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\");\nconst callback_workflow_1 = __webpack_require__(/*! ./mongodb_oidc/callback_workflow */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\");\n/** Error when credentials are missing. */\nconst MISSING_CREDENTIALS_ERROR = 'AuthContext must provide credentials.';\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\nexports.OIDC_WORKFLOWS.set('azure', new azure_service_workflow_1.AzureServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n    /**\n     * Instantiate the auth provider.\n     */\n    constructor() {\n        super();\n    }\n    /**\n     * Authenticate using OIDC\n     */\n    async auth(authContext) {\n        const { connection, reauthenticating, response } = authContext;\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        await workflow.execute(connection, credentials, reauthenticating, response);\n    }\n    /**\n     * Add the speculative auth for the initial handshake.\n     */\n    async prepare(handshakeDoc, authContext) {\n        const credentials = getCredentials(authContext);\n        const workflow = getWorkflow(credentials);\n        const result = await workflow.speculativeAuth(credentials);\n        return { ...handshakeDoc, ...result };\n    }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Get credentials from the auth context, throwing if they do not exist.\n */\nfunction getCredentials(authContext) {\n    const { credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);\n    }\n    return credentials;\n}\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials) {\n    const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n    const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n    if (!workflow) {\n        throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n    }\n    return workflow;\n}\n//# sourceMappingURL=mongodb_oidc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUJBQW1CLEdBQUcsc0JBQXNCO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3JDLHdCQUF3QixtQkFBTyxDQUFDLGlHQUFpQjtBQUNqRCwrQkFBK0IsbUJBQU8sQ0FBQyx5SUFBcUM7QUFDNUUsaUNBQWlDLG1CQUFPLENBQUMsNklBQXVDO0FBQ2hGLDRCQUE0QixtQkFBTyxDQUFDLG1JQUFrQztBQUN0RTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlDQUF5QztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEZBQTRGLDhDQUE4QztBQUMxSTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjLmpzP2EyYzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1vbmdvREJPSURDID0gZXhwb3J0cy5PSURDX1dPUktGTE9XUyA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY29uc3QgYXdzX3NlcnZpY2Vfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9hd3Nfc2VydmljZV93b3JrZmxvd1wiKTtcbmNvbnN0IGF6dXJlX3NlcnZpY2Vfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9henVyZV9zZXJ2aWNlX3dvcmtmbG93XCIpO1xuY29uc3QgY2FsbGJhY2tfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL21vbmdvZGJfb2lkYy9jYWxsYmFja193b3JrZmxvd1wiKTtcbi8qKiBFcnJvciB3aGVuIGNyZWRlbnRpYWxzIGFyZSBtaXNzaW5nLiAqL1xuY29uc3QgTUlTU0lOR19DUkVERU5USUFMU19FUlJPUiA9ICdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJztcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1MgPSBuZXcgTWFwKCk7XG5leHBvcnRzLk9JRENfV09SS0ZMT1dTLnNldCgnY2FsbGJhY2snLCBuZXcgY2FsbGJhY2tfd29ya2Zsb3dfMS5DYWxsYmFja1dvcmtmbG93KCkpO1xuZXhwb3J0cy5PSURDX1dPUktGTE9XUy5zZXQoJ2F3cycsIG5ldyBhd3Nfc2VydmljZV93b3JrZmxvd18xLkF3c1NlcnZpY2VXb3JrZmxvdygpKTtcbmV4cG9ydHMuT0lEQ19XT1JLRkxPV1Muc2V0KCdhenVyZScsIG5ldyBhenVyZV9zZXJ2aWNlX3dvcmtmbG93XzEuQXp1cmVTZXJ2aWNlV29ya2Zsb3coKSk7XG4vKipcbiAqIE9JREMgYXV0aCBwcm92aWRlci5cbiAqIEBleHBlcmltZW50YWxcbiAqL1xuY2xhc3MgTW9uZ29EQk9JREMgZXh0ZW5kcyBhdXRoX3Byb3ZpZGVyXzEuQXV0aFByb3ZpZGVyIHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgYXV0aCBwcm92aWRlci5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXV0aGVudGljYXRlIHVzaW5nIE9JRENcbiAgICAgKi9cbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgY29ubmVjdGlvbiwgcmVhdXRoZW50aWNhdGluZywgcmVzcG9uc2UgfSA9IGF1dGhDb250ZXh0O1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGdldENyZWRlbnRpYWxzKGF1dGhDb250ZXh0KTtcbiAgICAgICAgY29uc3Qgd29ya2Zsb3cgPSBnZXRXb3JrZmxvdyhjcmVkZW50aWFscyk7XG4gICAgICAgIGF3YWl0IHdvcmtmbG93LmV4ZWN1dGUoY29ubmVjdGlvbiwgY3JlZGVudGlhbHMsIHJlYXV0aGVudGljYXRpbmcsIHJlc3BvbnNlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBzcGVjdWxhdGl2ZSBhdXRoIGZvciB0aGUgaW5pdGlhbCBoYW5kc2hha2UuXG4gICAgICovXG4gICAgYXN5bmMgcHJlcGFyZShoYW5kc2hha2VEb2MsIGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0gZ2V0Q3JlZGVudGlhbHMoYXV0aENvbnRleHQpO1xuICAgICAgICBjb25zdCB3b3JrZmxvdyA9IGdldFdvcmtmbG93KGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd29ya2Zsb3cuc3BlY3VsYXRpdmVBdXRoKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgcmV0dXJuIHsgLi4uaGFuZHNoYWtlRG9jLCAuLi5yZXN1bHQgfTtcbiAgICB9XG59XG5leHBvcnRzLk1vbmdvREJPSURDID0gTW9uZ29EQk9JREM7XG4vKipcbiAqIEdldCBjcmVkZW50aWFscyBmcm9tIHRoZSBhdXRoIGNvbnRleHQsIHRocm93aW5nIGlmIHRoZXkgZG8gbm90IGV4aXN0LlxuICovXG5mdW5jdGlvbiBnZXRDcmVkZW50aWFscyhhdXRoQ29udGV4dCkge1xuICAgIGNvbnN0IHsgY3JlZGVudGlhbHMgfSA9IGF1dGhDb250ZXh0O1xuICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcihNSVNTSU5HX0NSRURFTlRJQUxTX0VSUk9SKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWRlbnRpYWxzO1xufVxuLyoqXG4gKiBHZXRzIGVpdGhlciBhIGRldmljZSB3b3JrZmxvdyBvciBjYWxsYmFjayB3b3JrZmxvdy5cbiAqL1xuZnVuY3Rpb24gZ2V0V29ya2Zsb3coY3JlZGVudGlhbHMpIHtcbiAgICBjb25zdCBwcm92aWRlck5hbWUgPSBjcmVkZW50aWFscy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUU7XG4gICAgY29uc3Qgd29ya2Zsb3cgPSBleHBvcnRzLk9JRENfV09SS0ZMT1dTLmdldChwcm92aWRlck5hbWUgfHwgJ2NhbGxiYWNrJyk7XG4gICAgaWYgKCF3b3JrZmxvdykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBDb3VsZCBub3QgbG9hZCB3b3JrZmxvdyBmb3IgcHJvdmlkZXIgJHtjcmVkZW50aWFscy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlBST1ZJREVSX05BTUV9YCk7XG4gICAgfVxuICAgIHJldHVybiB3b3JrZmxvdztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvZGJfb2lkYy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js":
/*!**********************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AwsServiceWorkflow = void 0;\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Error for when the token is missing in the environment. */\nconst TOKEN_MISSING_ERROR = 'AWS_WEB_IDENTITY_TOKEN_FILE must be set in the environment.';\n/**\n * Device workflow implementation for AWS.\n *\n * @internal\n */\nclass AwsServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor() {\n        super();\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken() {\n        const tokenFile = process.env.AWS_WEB_IDENTITY_TOKEN_FILE;\n        if (!tokenFile) {\n            throw new error_1.MongoAWSError(TOKEN_MISSING_ERROR);\n        }\n        return fs.promises.readFile(tokenFile, 'utf8');\n    }\n}\nexports.AwsServiceWorkflow = AwsServiceWorkflow;\n//# sourceMappingURL=aws_service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXdzX3NlcnZpY2Vfd29ya2Zsb3cuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGdCQUFnQixtQkFBTyxDQUFDLDhFQUFnQjtBQUN4QywyQkFBMkIsbUJBQU8sQ0FBQyxvSEFBb0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9hd3Nfc2VydmljZV93b3JrZmxvdy5qcz9kOTZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bd3NTZXJ2aWNlV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZXJyb3JcIik7XG5jb25zdCBzZXJ2aWNlX3dvcmtmbG93XzEgPSByZXF1aXJlKFwiLi9zZXJ2aWNlX3dvcmtmbG93XCIpO1xuLyoqIEVycm9yIGZvciB3aGVuIHRoZSB0b2tlbiBpcyBtaXNzaW5nIGluIHRoZSBlbnZpcm9ubWVudC4gKi9cbmNvbnN0IFRPS0VOX01JU1NJTkdfRVJST1IgPSAnQVdTX1dFQl9JREVOVElUWV9UT0tFTl9GSUxFIG11c3QgYmUgc2V0IGluIHRoZSBlbnZpcm9ubWVudC4nO1xuLyoqXG4gKiBEZXZpY2Ugd29ya2Zsb3cgaW1wbGVtZW50YXRpb24gZm9yIEFXUy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXdzU2VydmljZVdvcmtmbG93IGV4dGVuZHMgc2VydmljZV93b3JrZmxvd18xLlNlcnZpY2VXb3JrZmxvdyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdG9rZW4gZnJvbSB0aGUgZW52aXJvbm1lbnQuXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VG9rZW4oKSB7XG4gICAgICAgIGNvbnN0IHRva2VuRmlsZSA9IHByb2Nlc3MuZW52LkFXU19XRUJfSURFTlRJVFlfVE9LRU5fRklMRTtcbiAgICAgICAgaWYgKCF0b2tlbkZpbGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVdTRXJyb3IoVE9LRU5fTUlTU0lOR19FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZzLnByb21pc2VzLnJlYWRGaWxlKHRva2VuRmlsZSwgJ3V0ZjgnKTtcbiAgICB9XG59XG5leHBvcnRzLkF3c1NlcnZpY2VXb3JrZmxvdyA9IEF3c1NlcnZpY2VXb3JrZmxvdztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF3c19zZXJ2aWNlX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/aws_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js":
/*!************************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureServiceWorkflow = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst azure_token_cache_1 = __webpack_require__(/*! ./azure_token_cache */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\");\nconst service_workflow_1 = __webpack_require__(/*! ./service_workflow */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\");\n/** Base URL for getting Azure tokens. */\nconst AZURE_BASE_URL = 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01';\n/** Azure request headers. */\nconst AZURE_HEADERS = Object.freeze({ Metadata: 'true', Accept: 'application/json' });\n/** Invalid endpoint result error. */\nconst ENDPOINT_RESULT_ERROR = 'Azure endpoint did not return a value with only access_token and expires_in properties';\n/** Error for when the token audience is missing in the environment. */\nconst TOKEN_AUDIENCE_MISSING_ERROR = 'TOKEN_AUDIENCE must be set in the auth mechanism properties when PROVIDER_NAME is azure.';\n/**\n * Device workflow implementation for Azure.\n *\n * @internal\n */\nclass AzureServiceWorkflow extends service_workflow_1.ServiceWorkflow {\n    constructor() {\n        super(...arguments);\n        this.cache = new azure_token_cache_1.AzureTokenCache();\n    }\n    /**\n     * Get the token from the environment.\n     */\n    async getToken(credentials) {\n        const tokenAudience = credentials?.mechanismProperties.TOKEN_AUDIENCE;\n        if (!tokenAudience) {\n            throw new error_1.MongoAzureError(TOKEN_AUDIENCE_MISSING_ERROR);\n        }\n        let token;\n        const entry = this.cache.getEntry(tokenAudience);\n        if (entry?.isValid()) {\n            token = entry.token;\n        }\n        else {\n            this.cache.deleteEntry(tokenAudience);\n            const response = await getAzureTokenData(tokenAudience);\n            if (!isEndpointResultValid(response)) {\n                throw new error_1.MongoAzureError(ENDPOINT_RESULT_ERROR);\n            }\n            this.cache.addEntry(tokenAudience, response);\n            token = response.access_token;\n        }\n        return token;\n    }\n}\nexports.AzureServiceWorkflow = AzureServiceWorkflow;\n/**\n * Hit the Azure endpoint to get the token data.\n */\nasync function getAzureTokenData(tokenAudience) {\n    const url = `${AZURE_BASE_URL}&resource=${tokenAudience}`;\n    const data = await (0, utils_1.request)(url, {\n        json: true,\n        headers: AZURE_HEADERS\n    });\n    return data;\n}\n/**\n * Determines if a result returned from the endpoint is valid.\n * This means the result is not nullish, contains the access_token required field\n * and the expires_in required field.\n */\nfunction isEndpointResultValid(token) {\n    if (token == null || typeof token !== 'object')\n        return false;\n    return 'access_token' in token && 'expires_in' in token;\n}\n//# sourceMappingURL=azure_service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXp1cmVfc2VydmljZV93b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsZ0JBQWdCLG1CQUFPLENBQUMsOEVBQWdCO0FBQ3hDLGdCQUFnQixtQkFBTyxDQUFDLDhFQUFnQjtBQUN4Qyw0QkFBNEIsbUJBQU8sQ0FBQyxzSEFBcUI7QUFDekQsMkJBQTJCLG1CQUFPLENBQUMsb0hBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyw4Q0FBOEM7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGVBQWUsWUFBWSxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL2F6dXJlX3NlcnZpY2Vfd29ya2Zsb3cuanM/NGJkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXp1cmVTZXJ2aWNlV29ya2Zsb3cgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi91dGlsc1wiKTtcbmNvbnN0IGF6dXJlX3Rva2VuX2NhY2hlXzEgPSByZXF1aXJlKFwiLi9henVyZV90b2tlbl9jYWNoZVwiKTtcbmNvbnN0IHNlcnZpY2Vfd29ya2Zsb3dfMSA9IHJlcXVpcmUoXCIuL3NlcnZpY2Vfd29ya2Zsb3dcIik7XG4vKiogQmFzZSBVUkwgZm9yIGdldHRpbmcgQXp1cmUgdG9rZW5zLiAqL1xuY29uc3QgQVpVUkVfQkFTRV9VUkwgPSAnaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9tZXRhZGF0YS9pZGVudGl0eS9vYXV0aDIvdG9rZW4/YXBpLXZlcnNpb249MjAxOC0wMi0wMSc7XG4vKiogQXp1cmUgcmVxdWVzdCBoZWFkZXJzLiAqL1xuY29uc3QgQVpVUkVfSEVBREVSUyA9IE9iamVjdC5mcmVlemUoeyBNZXRhZGF0YTogJ3RydWUnLCBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyB9KTtcbi8qKiBJbnZhbGlkIGVuZHBvaW50IHJlc3VsdCBlcnJvci4gKi9cbmNvbnN0IEVORFBPSU5UX1JFU1VMVF9FUlJPUiA9ICdBenVyZSBlbmRwb2ludCBkaWQgbm90IHJldHVybiBhIHZhbHVlIHdpdGggb25seSBhY2Nlc3NfdG9rZW4gYW5kIGV4cGlyZXNfaW4gcHJvcGVydGllcyc7XG4vKiogRXJyb3IgZm9yIHdoZW4gdGhlIHRva2VuIGF1ZGllbmNlIGlzIG1pc3NpbmcgaW4gdGhlIGVudmlyb25tZW50LiAqL1xuY29uc3QgVE9LRU5fQVVESUVOQ0VfTUlTU0lOR19FUlJPUiA9ICdUT0tFTl9BVURJRU5DRSBtdXN0IGJlIHNldCBpbiB0aGUgYXV0aCBtZWNoYW5pc20gcHJvcGVydGllcyB3aGVuIFBST1ZJREVSX05BTUUgaXMgYXp1cmUuJztcbi8qKlxuICogRGV2aWNlIHdvcmtmbG93IGltcGxlbWVudGF0aW9uIGZvciBBenVyZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXp1cmVTZXJ2aWNlV29ya2Zsb3cgZXh0ZW5kcyBzZXJ2aWNlX3dvcmtmbG93XzEuU2VydmljZVdvcmtmbG93IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG5ldyBhenVyZV90b2tlbl9jYWNoZV8xLkF6dXJlVG9rZW5DYWNoZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHRva2VuIGZyb20gdGhlIGVudmlyb25tZW50LlxuICAgICAqL1xuICAgIGFzeW5jIGdldFRva2VuKGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGNvbnN0IHRva2VuQXVkaWVuY2UgPSBjcmVkZW50aWFscz8ubWVjaGFuaXNtUHJvcGVydGllcy5UT0tFTl9BVURJRU5DRTtcbiAgICAgICAgaWYgKCF0b2tlbkF1ZGllbmNlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0F6dXJlRXJyb3IoVE9LRU5fQVVESUVOQ0VfTUlTU0lOR19FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRva2VuO1xuICAgICAgICBjb25zdCBlbnRyeSA9IHRoaXMuY2FjaGUuZ2V0RW50cnkodG9rZW5BdWRpZW5jZSk7XG4gICAgICAgIGlmIChlbnRyeT8uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICB0b2tlbiA9IGVudHJ5LnRva2VuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5kZWxldGVFbnRyeSh0b2tlbkF1ZGllbmNlKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2V0QXp1cmVUb2tlbkRhdGEodG9rZW5BdWRpZW5jZSk7XG4gICAgICAgICAgICBpZiAoIWlzRW5kcG9pbnRSZXN1bHRWYWxpZChyZXNwb25zZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0F6dXJlRXJyb3IoRU5EUE9JTlRfUkVTVUxUX0VSUk9SKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2FjaGUuYWRkRW50cnkodG9rZW5BdWRpZW5jZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgdG9rZW4gPSByZXNwb25zZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cbn1cbmV4cG9ydHMuQXp1cmVTZXJ2aWNlV29ya2Zsb3cgPSBBenVyZVNlcnZpY2VXb3JrZmxvdztcbi8qKlxuICogSGl0IHRoZSBBenVyZSBlbmRwb2ludCB0byBnZXQgdGhlIHRva2VuIGRhdGEuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGdldEF6dXJlVG9rZW5EYXRhKHRva2VuQXVkaWVuY2UpIHtcbiAgICBjb25zdCB1cmwgPSBgJHtBWlVSRV9CQVNFX1VSTH0mcmVzb3VyY2U9JHt0b2tlbkF1ZGllbmNlfWA7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0ICgwLCB1dGlsc18xLnJlcXVlc3QpKHVybCwge1xuICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICBoZWFkZXJzOiBBWlVSRV9IRUFERVJTXG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYSByZXN1bHQgcmV0dXJuZWQgZnJvbSB0aGUgZW5kcG9pbnQgaXMgdmFsaWQuXG4gKiBUaGlzIG1lYW5zIHRoZSByZXN1bHQgaXMgbm90IG51bGxpc2gsIGNvbnRhaW5zIHRoZSBhY2Nlc3NfdG9rZW4gcmVxdWlyZWQgZmllbGRcbiAqIGFuZCB0aGUgZXhwaXJlc19pbiByZXF1aXJlZCBmaWVsZC5cbiAqL1xuZnVuY3Rpb24gaXNFbmRwb2ludFJlc3VsdFZhbGlkKHRva2VuKSB7XG4gICAgaWYgKHRva2VuID09IG51bGwgfHwgdHlwZW9mIHRva2VuICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiAnYWNjZXNzX3Rva2VuJyBpbiB0b2tlbiAmJiAnZXhwaXJlc19pbicgaW4gdG9rZW47XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1henVyZV9zZXJ2aWNlX3dvcmtmbG93LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_service_workflow.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js":
/*!*******************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AzureTokenCache = exports.AzureTokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** @internal */\nclass AzureTokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */\n    constructor(token, expiration) {\n        super(expiration);\n        this.token = token;\n    }\n}\nexports.AzureTokenEntry = AzureTokenEntry;\n/**\n * A cache of access tokens from Azure.\n * @internal\n */\nclass AzureTokenCache extends cache_1.Cache {\n    /**\n     * Add an entry to the cache.\n     */\n    addEntry(tokenAudience, token) {\n        const entry = new AzureTokenEntry(token.access_token, token.expires_in);\n        this.entries.set(tokenAudience, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key.\n     */\n    cacheKey(tokenAudience) {\n        return tokenAudience;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n    deleteEntry(tokenAudience) {\n        this.entries.delete(tokenAudience);\n    }\n    /**\n     * Get an Azure token entry from the cache.\n     */\n    getEntry(tokenAudience) {\n        return this.entries.get(tokenAudience);\n    }\n}\nexports.AzureTokenCache = AzureTokenCache;\n//# sourceMappingURL=azure_token_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvYXp1cmVfdG9rZW5fY2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsdUJBQXVCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLDhGQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9henVyZV90b2tlbl9jYWNoZS5qcz80MWFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BenVyZVRva2VuQ2FjaGUgPSBleHBvcnRzLkF6dXJlVG9rZW5FbnRyeSA9IHZvaWQgMDtcbmNvbnN0IGNhY2hlXzEgPSByZXF1aXJlKFwiLi9jYWNoZVwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEF6dXJlVG9rZW5FbnRyeSBleHRlbmRzIGNhY2hlXzEuRXhwaXJpbmdDYWNoZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgZW50cnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodG9rZW4sIGV4cGlyYXRpb24pIHtcbiAgICAgICAgc3VwZXIoZXhwaXJhdGlvbik7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB9XG59XG5leHBvcnRzLkF6dXJlVG9rZW5FbnRyeSA9IEF6dXJlVG9rZW5FbnRyeTtcbi8qKlxuICogQSBjYWNoZSBvZiBhY2Nlc3MgdG9rZW5zIGZyb20gQXp1cmUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQXp1cmVUb2tlbkNhY2hlIGV4dGVuZHMgY2FjaGVfMS5DYWNoZSB7XG4gICAgLyoqXG4gICAgICogQWRkIGFuIGVudHJ5IHRvIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBhZGRFbnRyeSh0b2tlbkF1ZGllbmNlLCB0b2tlbikge1xuICAgICAgICBjb25zdCBlbnRyeSA9IG5ldyBBenVyZVRva2VuRW50cnkodG9rZW4uYWNjZXNzX3Rva2VuLCB0b2tlbi5leHBpcmVzX2luKTtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnNldCh0b2tlbkF1ZGllbmNlLCBlbnRyeSk7XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY2FjaGUga2V5LlxuICAgICAqL1xuICAgIGNhY2hlS2V5KHRva2VuQXVkaWVuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuQXVkaWVuY2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBkZWxldGVFbnRyeSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgICAgIHRoaXMuZW50cmllcy5kZWxldGUodG9rZW5BdWRpZW5jZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBBenVyZSB0b2tlbiBlbnRyeSBmcm9tIHRoZSBjYWNoZS5cbiAgICAgKi9cbiAgICBnZXRFbnRyeSh0b2tlbkF1ZGllbmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMuZ2V0KHRva2VuQXVkaWVuY2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuQXp1cmVUb2tlbkNhY2hlID0gQXp1cmVUb2tlbkNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXp1cmVfdG9rZW5fY2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/azure_token_cache.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js":
/*!*******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Cache = exports.ExpiringCacheEntry = void 0;\n/* 5 minutes in milliseconds */\nconst EXPIRATION_BUFFER_MS = 300000;\n/**\n * An entry in a cache that can expire in a certain amount of time.\n */\nclass ExpiringCacheEntry {\n    /**\n     * Create a new expiring token entry.\n     */\n    constructor(expiration) {\n        this.expiration = this.expirationTime(expiration);\n    }\n    /**\n     * The entry is still valid if the expiration is more than\n     * 5 minutes from the expiration time.\n     */\n    isValid() {\n        return this.expiration - Date.now() > EXPIRATION_BUFFER_MS;\n    }\n    /**\n     * Get an expiration time in milliseconds past epoch.\n     */\n    expirationTime(expiresInSeconds) {\n        return Date.now() + expiresInSeconds * 1000;\n    }\n}\nexports.ExpiringCacheEntry = ExpiringCacheEntry;\n/**\n * Base class for OIDC caches.\n */\nclass Cache {\n    /**\n     * Create a new cache.\n     */\n    constructor() {\n        this.entries = new Map();\n    }\n    /**\n     * Clear the cache.\n     */\n    clear() {\n        this.entries.clear();\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    hashedCacheKey(address, username, callbackHash) {\n        return JSON.stringify([address, username, callbackHash]);\n    }\n}\nexports.Cache = Cache;\n//# sourceMappingURL=cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvY2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9jYWNoZS5qcz9kM2I5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYWNoZSA9IGV4cG9ydHMuRXhwaXJpbmdDYWNoZUVudHJ5ID0gdm9pZCAwO1xuLyogNSBtaW51dGVzIGluIG1pbGxpc2Vjb25kcyAqL1xuY29uc3QgRVhQSVJBVElPTl9CVUZGRVJfTVMgPSAzMDAwMDA7XG4vKipcbiAqIEFuIGVudHJ5IGluIGEgY2FjaGUgdGhhdCBjYW4gZXhwaXJlIGluIGEgY2VydGFpbiBhbW91bnQgb2YgdGltZS5cbiAqL1xuY2xhc3MgRXhwaXJpbmdDYWNoZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgZXhwaXJpbmcgdG9rZW4gZW50cnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZXhwaXJhdGlvbikge1xuICAgICAgICB0aGlzLmV4cGlyYXRpb24gPSB0aGlzLmV4cGlyYXRpb25UaW1lKGV4cGlyYXRpb24pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgZW50cnkgaXMgc3RpbGwgdmFsaWQgaWYgdGhlIGV4cGlyYXRpb24gaXMgbW9yZSB0aGFuXG4gICAgICogNSBtaW51dGVzIGZyb20gdGhlIGV4cGlyYXRpb24gdGltZS5cbiAgICAgKi9cbiAgICBpc1ZhbGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBpcmF0aW9uIC0gRGF0ZS5ub3coKSA+IEVYUElSQVRJT05fQlVGRkVSX01TO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYW4gZXhwaXJhdGlvbiB0aW1lIGluIG1pbGxpc2Vjb25kcyBwYXN0IGVwb2NoLlxuICAgICAqL1xuICAgIGV4cGlyYXRpb25UaW1lKGV4cGlyZXNJblNlY29uZHMpIHtcbiAgICAgICAgcmV0dXJuIERhdGUubm93KCkgKyBleHBpcmVzSW5TZWNvbmRzICogMTAwMDtcbiAgICB9XG59XG5leHBvcnRzLkV4cGlyaW5nQ2FjaGVFbnRyeSA9IEV4cGlyaW5nQ2FjaGVFbnRyeTtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgT0lEQyBjYWNoZXMuXG4gKi9cbmNsYXNzIENhY2hlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY2FjaGUuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmVudHJpZXMuY2xlYXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgY2FjaGUga2V5IGZyb20gdGhlIGFkZHJlc3MgYW5kIHVzZXJuYW1lLlxuICAgICAqL1xuICAgIGhhc2hlZENhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KFthZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoXSk7XG4gICAgfVxufVxuZXhwb3J0cy5DYWNoZSA9IENhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js":
/*!*********************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallbackLockCache = void 0;\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/** Error message for when request callback is missing. */\nconst REQUEST_CALLBACK_REQUIRED_ERROR = 'Auth mechanism property REQUEST_TOKEN_CALLBACK is required.';\n/* Counter for function \"hashes\".*/\nlet FN_HASH_COUNTER = 0;\n/* No function present function */\nconst NO_FUNCTION = async () => ({ accessToken: 'test' });\n/* The map of function hashes */\nconst FN_HASHES = new WeakMap();\n/* Put the no function hash in the map. */\nFN_HASHES.set(NO_FUNCTION, FN_HASH_COUNTER);\n/**\n * A cache of request and refresh callbacks per server/user.\n */\nclass CallbackLockCache extends cache_1.Cache {\n    /**\n     * Get the callbacks for the connection and credentials. If an entry does not\n     * exist a new one will get set.\n     */\n    getEntry(connection, credentials) {\n        const requestCallback = credentials.mechanismProperties.REQUEST_TOKEN_CALLBACK;\n        const refreshCallback = credentials.mechanismProperties.REFRESH_TOKEN_CALLBACK;\n        if (!requestCallback) {\n            throw new error_1.MongoInvalidArgumentError(REQUEST_CALLBACK_REQUIRED_ERROR);\n        }\n        const callbackHash = hashFunctions(requestCallback, refreshCallback);\n        const key = this.cacheKey(connection.address, credentials.username, callbackHash);\n        const entry = this.entries.get(key);\n        if (entry) {\n            return entry;\n        }\n        return this.addEntry(key, callbackHash, requestCallback, refreshCallback);\n    }\n    /**\n     * Set locked callbacks on for connection and credentials.\n     */\n    addEntry(key, callbackHash, requestCallback, refreshCallback) {\n        const entry = {\n            requestCallback: withLock(requestCallback),\n            refreshCallback: refreshCallback ? withLock(refreshCallback) : undefined,\n            callbackHash: callbackHash\n        };\n        this.entries.set(key, entry);\n        return entry;\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.CallbackLockCache = CallbackLockCache;\n/**\n * Ensure the callback is only executed one at a time.\n */\nfunction withLock(callback) {\n    let lock = Promise.resolve();\n    return async (info, context) => {\n        await lock;\n        lock = lock.then(() => callback(info, context));\n        return lock;\n    };\n}\n/**\n * Get the hash string for the request and refresh functions.\n */\nfunction hashFunctions(requestFn, refreshFn) {\n    let requestHash = FN_HASHES.get(requestFn);\n    let refreshHash = FN_HASHES.get(refreshFn ?? NO_FUNCTION);\n    if (requestHash == null) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        requestHash = FN_HASH_COUNTER;\n        FN_HASHES.set(requestFn, FN_HASH_COUNTER);\n    }\n    if (refreshHash == null && refreshFn) {\n        // Create a new one for the function and put it in the map.\n        FN_HASH_COUNTER++;\n        refreshHash = FN_HASH_COUNTER;\n        FN_HASHES.set(refreshFn, FN_HASH_COUNTER);\n    }\n    return `${requestHash}-${refreshHash}`;\n}\n//# sourceMappingURL=callback_lock_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvY2FsbGJhY2tfbG9ja19jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx5QkFBeUI7QUFDekIsZ0JBQWdCLG1CQUFPLENBQUMsOEVBQWdCO0FBQ3hDLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMscUJBQXFCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxZQUFZLEdBQUcsWUFBWTtBQUN6QztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvY2FsbGJhY2tfbG9ja19jYWNoZS5qcz80MmYwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DYWxsYmFja0xvY2tDYWNoZSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZXJyb3JcIik7XG5jb25zdCBjYWNoZV8xID0gcmVxdWlyZShcIi4vY2FjaGVcIik7XG4vKiogRXJyb3IgbWVzc2FnZSBmb3Igd2hlbiByZXF1ZXN0IGNhbGxiYWNrIGlzIG1pc3NpbmcuICovXG5jb25zdCBSRVFVRVNUX0NBTExCQUNLX1JFUVVJUkVEX0VSUk9SID0gJ0F1dGggbWVjaGFuaXNtIHByb3BlcnR5IFJFUVVFU1RfVE9LRU5fQ0FMTEJBQ0sgaXMgcmVxdWlyZWQuJztcbi8qIENvdW50ZXIgZm9yIGZ1bmN0aW9uIFwiaGFzaGVzXCIuKi9cbmxldCBGTl9IQVNIX0NPVU5URVIgPSAwO1xuLyogTm8gZnVuY3Rpb24gcHJlc2VudCBmdW5jdGlvbiAqL1xuY29uc3QgTk9fRlVOQ1RJT04gPSBhc3luYyAoKSA9PiAoeyBhY2Nlc3NUb2tlbjogJ3Rlc3QnIH0pO1xuLyogVGhlIG1hcCBvZiBmdW5jdGlvbiBoYXNoZXMgKi9cbmNvbnN0IEZOX0hBU0hFUyA9IG5ldyBXZWFrTWFwKCk7XG4vKiBQdXQgdGhlIG5vIGZ1bmN0aW9uIGhhc2ggaW4gdGhlIG1hcC4gKi9cbkZOX0hBU0hFUy5zZXQoTk9fRlVOQ1RJT04sIEZOX0hBU0hfQ09VTlRFUik7XG4vKipcbiAqIEEgY2FjaGUgb2YgcmVxdWVzdCBhbmQgcmVmcmVzaCBjYWxsYmFja3MgcGVyIHNlcnZlci91c2VyLlxuICovXG5jbGFzcyBDYWxsYmFja0xvY2tDYWNoZSBleHRlbmRzIGNhY2hlXzEuQ2FjaGUge1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY2FsbGJhY2tzIGZvciB0aGUgY29ubmVjdGlvbiBhbmQgY3JlZGVudGlhbHMuIElmIGFuIGVudHJ5IGRvZXMgbm90XG4gICAgICogZXhpc3QgYSBuZXcgb25lIHdpbGwgZ2V0IHNldC5cbiAgICAgKi9cbiAgICBnZXRFbnRyeShjb25uZWN0aW9uLCBjcmVkZW50aWFscykge1xuICAgICAgICBjb25zdCByZXF1ZXN0Q2FsbGJhY2sgPSBjcmVkZW50aWFscy5tZWNoYW5pc21Qcm9wZXJ0aWVzLlJFUVVFU1RfVE9LRU5fQ0FMTEJBQ0s7XG4gICAgICAgIGNvbnN0IHJlZnJlc2hDYWxsYmFjayA9IGNyZWRlbnRpYWxzLm1lY2hhbmlzbVByb3BlcnRpZXMuUkVGUkVTSF9UT0tFTl9DQUxMQkFDSztcbiAgICAgICAgaWYgKCFyZXF1ZXN0Q2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoUkVRVUVTVF9DQUxMQkFDS19SRVFVSVJFRF9FUlJPUik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2FsbGJhY2tIYXNoID0gaGFzaEZ1bmN0aW9ucyhyZXF1ZXN0Q2FsbGJhY2ssIHJlZnJlc2hDYWxsYmFjayk7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuY2FjaGVLZXkoY29ubmVjdGlvbi5hZGRyZXNzLCBjcmVkZW50aWFscy51c2VybmFtZSwgY2FsbGJhY2tIYXNoKTtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmVudHJpZXMuZ2V0KGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFkZEVudHJ5KGtleSwgY2FsbGJhY2tIYXNoLCByZXF1ZXN0Q2FsbGJhY2ssIHJlZnJlc2hDYWxsYmFjayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBsb2NrZWQgY2FsbGJhY2tzIG9uIGZvciBjb25uZWN0aW9uIGFuZCBjcmVkZW50aWFscy5cbiAgICAgKi9cbiAgICBhZGRFbnRyeShrZXksIGNhbGxiYWNrSGFzaCwgcmVxdWVzdENhbGxiYWNrLCByZWZyZXNoQ2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICByZXF1ZXN0Q2FsbGJhY2s6IHdpdGhMb2NrKHJlcXVlc3RDYWxsYmFjayksXG4gICAgICAgICAgICByZWZyZXNoQ2FsbGJhY2s6IHJlZnJlc2hDYWxsYmFjayA/IHdpdGhMb2NrKHJlZnJlc2hDYWxsYmFjaykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBjYWxsYmFja0hhc2g6IGNhbGxiYWNrSGFzaFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmVudHJpZXMuc2V0KGtleSwgZW50cnkpO1xuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNhY2hlIGtleSBmcm9tIHRoZSBhZGRyZXNzIGFuZCB1c2VybmFtZS5cbiAgICAgKi9cbiAgICBjYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hlZENhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2FsbGJhY2tMb2NrQ2FjaGUgPSBDYWxsYmFja0xvY2tDYWNoZTtcbi8qKlxuICogRW5zdXJlIHRoZSBjYWxsYmFjayBpcyBvbmx5IGV4ZWN1dGVkIG9uZSBhdCBhIHRpbWUuXG4gKi9cbmZ1bmN0aW9uIHdpdGhMb2NrKGNhbGxiYWNrKSB7XG4gICAgbGV0IGxvY2sgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICByZXR1cm4gYXN5bmMgKGluZm8sIGNvbnRleHQpID0+IHtcbiAgICAgICAgYXdhaXQgbG9jaztcbiAgICAgICAgbG9jayA9IGxvY2sudGhlbigoKSA9PiBjYWxsYmFjayhpbmZvLCBjb250ZXh0KSk7XG4gICAgICAgIHJldHVybiBsb2NrO1xuICAgIH07XG59XG4vKipcbiAqIEdldCB0aGUgaGFzaCBzdHJpbmcgZm9yIHRoZSByZXF1ZXN0IGFuZCByZWZyZXNoIGZ1bmN0aW9ucy5cbiAqL1xuZnVuY3Rpb24gaGFzaEZ1bmN0aW9ucyhyZXF1ZXN0Rm4sIHJlZnJlc2hGbikge1xuICAgIGxldCByZXF1ZXN0SGFzaCA9IEZOX0hBU0hFUy5nZXQocmVxdWVzdEZuKTtcbiAgICBsZXQgcmVmcmVzaEhhc2ggPSBGTl9IQVNIRVMuZ2V0KHJlZnJlc2hGbiA/PyBOT19GVU5DVElPTik7XG4gICAgaWYgKHJlcXVlc3RIYXNoID09IG51bGwpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IG9uZSBmb3IgdGhlIGZ1bmN0aW9uIGFuZCBwdXQgaXQgaW4gdGhlIG1hcC5cbiAgICAgICAgRk5fSEFTSF9DT1VOVEVSKys7XG4gICAgICAgIHJlcXVlc3RIYXNoID0gRk5fSEFTSF9DT1VOVEVSO1xuICAgICAgICBGTl9IQVNIRVMuc2V0KHJlcXVlc3RGbiwgRk5fSEFTSF9DT1VOVEVSKTtcbiAgICB9XG4gICAgaWYgKHJlZnJlc2hIYXNoID09IG51bGwgJiYgcmVmcmVzaEZuKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhIG5ldyBvbmUgZm9yIHRoZSBmdW5jdGlvbiBhbmQgcHV0IGl0IGluIHRoZSBtYXAuXG4gICAgICAgIEZOX0hBU0hfQ09VTlRFUisrO1xuICAgICAgICByZWZyZXNoSGFzaCA9IEZOX0hBU0hfQ09VTlRFUjtcbiAgICAgICAgRk5fSEFTSEVTLnNldChyZWZyZXNoRm4sIEZOX0hBU0hfQ09VTlRFUik7XG4gICAgfVxuICAgIHJldHVybiBgJHtyZXF1ZXN0SGFzaH0tJHtyZWZyZXNoSGFzaH1gO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FsbGJhY2tfbG9ja19jYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js":
/*!*******************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CallbackWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/../../../../../node_modules/bson/lib/bson.cjs\");\nconst error_1 = __webpack_require__(/*! ../../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst callback_lock_cache_1 = __webpack_require__(/*! ./callback_lock_cache */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_lock_cache.js\");\nconst token_entry_cache_1 = __webpack_require__(/*! ./token_entry_cache */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\");\n/** The current version of OIDC implementation. */\nconst OIDC_VERSION = 0;\n/** 5 minutes in seconds */\nconst TIMEOUT_S = 300;\n/** Properties allowed on results of callbacks. */\nconst RESULT_PROPERTIES = ['accessToken', 'expiresInSeconds', 'refreshToken'];\n/** Error message when the callback result is invalid. */\nconst CALLBACK_RESULT_ERROR = 'User provided OIDC callbacks must return a valid object with an accessToken.';\n/**\n * OIDC implementation of a callback based workflow.\n * @internal\n */\nclass CallbackWorkflow {\n    /**\n     * Instantiate the workflow\n     */\n    constructor() {\n        this.cache = new token_entry_cache_1.TokenEntryCache();\n        this.callbackCache = new callback_lock_cache_1.CallbackLockCache();\n    }\n    /**\n     * Get the document to add for speculative authentication. This also needs\n     * to add a db field from the credentials source.\n     */\n    async speculativeAuth(credentials) {\n        const document = startCommandDocument(credentials);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n    /**\n     * Execute the OIDC callback workflow.\n     */\n    async execute(connection, credentials, reauthenticating, response) {\n        // Get the callbacks with locks from the callback lock cache.\n        const { requestCallback, refreshCallback, callbackHash } = this.callbackCache.getEntry(connection, credentials);\n        // Look for an existing entry in the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        if (entry) {\n            // Reauthentication cannot use a token from the cache since the server has\n            // stated it is invalid by the request for reauthentication.\n            if (entry.isValid() && !reauthenticating) {\n                // Presence of a valid cache entry means we can skip to the finishing step.\n                result = await this.finishAuthentication(connection, credentials, entry.tokenResult, response?.speculativeAuthenticate?.conversationId);\n            }\n            else {\n                // Presence of an expired cache entry means we must fetch a new one and\n                // then execute the final step.\n                const tokenResult = await this.fetchAccessToken(connection, credentials, entry.serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback);\n                try {\n                    result = await this.finishAuthentication(connection, credentials, tokenResult, reauthenticating ? undefined : response?.speculativeAuthenticate?.conversationId);\n                }\n                catch (error) {\n                    // If we are reauthenticating and this errors with reauthentication\n                    // required, we need to do the entire process over again and clear\n                    // the cache entry.\n                    if (reauthenticating &&\n                        error instanceof error_1.MongoError &&\n                        error.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n                        this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n                        result = await this.execute(connection, credentials, reauthenticating);\n                    }\n                    else {\n                        throw error;\n                    }\n                }\n            }\n        }\n        else {\n            // No entry in the cache requires us to do all authentication steps\n            // from start to finish, including getting a fresh token for the cache.\n            const startDocument = await this.startAuthentication(connection, credentials, reauthenticating, response);\n            const conversationId = startDocument.conversationId;\n            const serverResult = bson_1.BSON.deserialize(startDocument.payload.buffer);\n            const tokenResult = await this.fetchAccessToken(connection, credentials, serverResult, reauthenticating, callbackHash, requestCallback, refreshCallback);\n            result = await this.finishAuthentication(connection, credentials, tokenResult, conversationId);\n        }\n        return result;\n    }\n    /**\n     * Starts the callback authentication process. If there is a speculative\n     * authentication document from the initial handshake, then we will use that\n     * value to get the issuer, otherwise we will send the saslStart command.\n     */\n    async startAuthentication(connection, credentials, reauthenticating, response) {\n        let result;\n        if (!reauthenticating && response?.speculativeAuthenticate) {\n            result = response.speculativeAuthenticate;\n        }\n        else {\n            result = await connection.commandAsync((0, utils_1.ns)(credentials.source), startCommandDocument(credentials), undefined);\n        }\n        return result;\n    }\n    /**\n     * Finishes the callback authentication process.\n     */\n    async finishAuthentication(connection, credentials, tokenResult, conversationId) {\n        const result = await connection.commandAsync((0, utils_1.ns)(credentials.source), finishCommandDocument(tokenResult.accessToken, conversationId), undefined);\n        return result;\n    }\n    /**\n     * Fetches an access token using either the request or refresh callbacks and\n     * puts it in the cache.\n     */\n    async fetchAccessToken(connection, credentials, serverInfo, reauthenticating, callbackHash, requestCallback, refreshCallback) {\n        // Get the token from the cache.\n        const entry = this.cache.getEntry(connection.address, credentials.username, callbackHash);\n        let result;\n        const context = { timeoutSeconds: TIMEOUT_S, version: OIDC_VERSION };\n        // Check if there's a token in the cache.\n        if (entry) {\n            // If the cache entry is valid, return the token result.\n            if (entry.isValid() && !reauthenticating) {\n                return entry.tokenResult;\n            }\n            // If the cache entry is not valid, remove it from the cache and first attempt\n            // to use the refresh callback to get a new token. If no refresh callback\n            // exists, then fallback to the request callback.\n            if (refreshCallback) {\n                context.refreshToken = entry.tokenResult.refreshToken;\n                result = await refreshCallback(serverInfo, context);\n            }\n            else {\n                result = await requestCallback(serverInfo, context);\n            }\n        }\n        else {\n            // With no token in the cache we use the request callback.\n            result = await requestCallback(serverInfo, context);\n        }\n        // Validate that the result returned by the callback is acceptable. If it is not\n        // we must clear the token result from the cache.\n        if (isCallbackResultInvalid(result)) {\n            this.cache.deleteEntry(connection.address, credentials.username, callbackHash);\n            throw new error_1.MongoMissingCredentialsError(CALLBACK_RESULT_ERROR);\n        }\n        // Cleanup the cache.\n        this.cache.deleteExpiredEntries();\n        // Put the new entry into the cache.\n        this.cache.addEntry(connection.address, credentials.username || '', callbackHash, result, serverInfo);\n        return result;\n    }\n}\nexports.CallbackWorkflow = CallbackWorkflow;\n/**\n * Generate the finishing command document for authentication. Will be a\n * saslStart or saslContinue depending on the presence of a conversation id.\n */\nfunction finishCommandDocument(token, conversationId) {\n    if (conversationId != null && typeof conversationId === 'number') {\n        return {\n            saslContinue: 1,\n            conversationId: conversationId,\n            payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n        };\n    }\n    // saslContinue requires a conversationId in the command to be valid so in this\n    // case the server allows \"step two\" to actually be a saslStart with the token\n    // as the jwt since the use of the cached value has no correlating conversating\n    // on the particular connection.\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize({ jwt: token }))\n    };\n}\n/**\n * Determines if a result returned from a request or refresh callback\n * function is invalid. This means the result is nullish, doesn't contain\n * the accessToken required field, and does not contain extra fields.\n */\nfunction isCallbackResultInvalid(tokenResult) {\n    if (tokenResult == null || typeof tokenResult !== 'object')\n        return true;\n    if (!('accessToken' in tokenResult))\n        return true;\n    return !Object.getOwnPropertyNames(tokenResult).every(prop => RESULT_PROPERTIES.includes(prop));\n}\n/**\n * Generate the saslStart command document.\n */\nfunction startCommandDocument(credentials) {\n    const payload = {};\n    if (credentials.username) {\n        payload.n = credentials.username;\n    }\n    return {\n        saslStart: 1,\n        autoAuthorize: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: new bson_1.Binary(bson_1.BSON.serialize(payload))\n    };\n}\n//# sourceMappingURL=callback_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/callback_workflow.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js":
/*!******************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.commandDocument = exports.ServiceWorkflow = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/../../../../../node_modules/bson/lib/bson.cjs\");\nconst utils_1 = __webpack_require__(/*! ../../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst providers_1 = __webpack_require__(/*! ../providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\n/**\n * Common behaviour for OIDC device workflows.\n * @internal\n */\nclass ServiceWorkflow {\n    /**\n     * Execute the workflow. Looks for AWS_WEB_IDENTITY_TOKEN_FILE in the environment\n     * and then attempts to read the token from that path.\n     */\n    async execute(connection, credentials) {\n        const token = await this.getToken(credentials);\n        const command = commandDocument(token);\n        return connection.commandAsync((0, utils_1.ns)(credentials.source), command, undefined);\n    }\n    /**\n     * Get the document to add for speculative authentication.\n     */\n    async speculativeAuth(credentials) {\n        const token = await this.getToken(credentials);\n        const document = commandDocument(token);\n        document.db = credentials.source;\n        return { speculativeAuthenticate: document };\n    }\n}\nexports.ServiceWorkflow = ServiceWorkflow;\n/**\n * Create the saslStart command document.\n */\nfunction commandDocument(token) {\n    return {\n        saslStart: 1,\n        mechanism: providers_1.AuthMechanism.MONGODB_OIDC,\n        payload: bson_1.BSON.serialize({ jwt: token })\n    };\n}\nexports.commandDocument = commandDocument;\n//# sourceMappingURL=service_workflow.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvc2VydmljZV93b3JrZmxvdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRyx1QkFBdUI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLGlFQUFNO0FBQzdCLGdCQUFnQixtQkFBTyxDQUFDLDhFQUFnQjtBQUN4QyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxZQUFZO0FBQ3JEO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL21vbmdvZGJfb2lkYy9zZXJ2aWNlX3dvcmtmbG93LmpzPzkzMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbW1hbmREb2N1bWVudCA9IGV4cG9ydHMuU2VydmljZVdvcmtmbG93ID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcImJzb25cIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL3V0aWxzXCIpO1xuY29uc3QgcHJvdmlkZXJzXzEgPSByZXF1aXJlKFwiLi4vcHJvdmlkZXJzXCIpO1xuLyoqXG4gKiBDb21tb24gYmVoYXZpb3VyIGZvciBPSURDIGRldmljZSB3b3JrZmxvd3MuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgU2VydmljZVdvcmtmbG93IHtcbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSB3b3JrZmxvdy4gTG9va3MgZm9yIEFXU19XRUJfSURFTlRJVFlfVE9LRU5fRklMRSBpbiB0aGUgZW52aXJvbm1lbnRcbiAgICAgKiBhbmQgdGhlbiBhdHRlbXB0cyB0byByZWFkIHRoZSB0b2tlbiBmcm9tIHRoYXQgcGF0aC5cbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKGNvbm5lY3Rpb24sIGNyZWRlbnRpYWxzKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy5nZXRUb2tlbihjcmVkZW50aWFscyk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBjb21tYW5kRG9jdW1lbnQodG9rZW4pO1xuICAgICAgICByZXR1cm4gY29ubmVjdGlvbi5jb21tYW5kQXN5bmMoKDAsIHV0aWxzXzEubnMpKGNyZWRlbnRpYWxzLnNvdXJjZSksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgZG9jdW1lbnQgdG8gYWRkIGZvciBzcGVjdWxhdGl2ZSBhdXRoZW50aWNhdGlvbi5cbiAgICAgKi9cbiAgICBhc3luYyBzcGVjdWxhdGl2ZUF1dGgoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB0aGlzLmdldFRva2VuKGNyZWRlbnRpYWxzKTtcbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBjb21tYW5kRG9jdW1lbnQodG9rZW4pO1xuICAgICAgICBkb2N1bWVudC5kYiA9IGNyZWRlbnRpYWxzLnNvdXJjZTtcbiAgICAgICAgcmV0dXJuIHsgc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU6IGRvY3VtZW50IH07XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2aWNlV29ya2Zsb3cgPSBTZXJ2aWNlV29ya2Zsb3c7XG4vKipcbiAqIENyZWF0ZSB0aGUgc2FzbFN0YXJ0IGNvbW1hbmQgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGNvbW1hbmREb2N1bWVudCh0b2tlbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNhc2xTdGFydDogMSxcbiAgICAgICAgbWVjaGFuaXNtOiBwcm92aWRlcnNfMS5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQyxcbiAgICAgICAgcGF5bG9hZDogYnNvbl8xLkJTT04uc2VyaWFsaXplKHsgand0OiB0b2tlbiB9KVxuICAgIH07XG59XG5leHBvcnRzLmNvbW1hbmREb2N1bWVudCA9IGNvbW1hbmREb2N1bWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZpY2Vfd29ya2Zsb3cuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/service_workflow.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js":
/*!*******************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TokenEntryCache = exports.TokenEntry = void 0;\nconst cache_1 = __webpack_require__(/*! ./cache */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/cache.js\");\n/* Default expiration is now for when no expiration provided */\nconst DEFAULT_EXPIRATION_SECS = 0;\n/** @internal */\nclass TokenEntry extends cache_1.ExpiringCacheEntry {\n    /**\n     * Instantiate the entry.\n     */\n    constructor(tokenResult, serverInfo, expiration) {\n        super(expiration);\n        this.tokenResult = tokenResult;\n        this.serverInfo = serverInfo;\n    }\n}\nexports.TokenEntry = TokenEntry;\n/**\n * Cache of OIDC token entries.\n * @internal\n */\nclass TokenEntryCache extends cache_1.Cache {\n    /**\n     * Set an entry in the token cache.\n     */\n    addEntry(address, username, callbackHash, tokenResult, serverInfo) {\n        const entry = new TokenEntry(tokenResult, serverInfo, tokenResult.expiresInSeconds ?? DEFAULT_EXPIRATION_SECS);\n        this.entries.set(this.cacheKey(address, username, callbackHash), entry);\n        return entry;\n    }\n    /**\n     * Delete an entry from the cache.\n     */\n    deleteEntry(address, username, callbackHash) {\n        this.entries.delete(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Get an entry from the cache.\n     */\n    getEntry(address, username, callbackHash) {\n        return this.entries.get(this.cacheKey(address, username, callbackHash));\n    }\n    /**\n     * Delete all expired entries from the cache.\n     */\n    deleteExpiredEntries() {\n        for (const [key, entry] of this.entries) {\n            if (!entry.isValid()) {\n                this.entries.delete(key);\n            }\n        }\n    }\n    /**\n     * Create a cache key from the address and username.\n     */\n    cacheKey(address, username, callbackHash) {\n        return this.hashedCacheKey(address, username, callbackHash);\n    }\n}\nexports.TokenEntryCache = TokenEntryCache;\n//# sourceMappingURL=token_entry_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9tb25nb2RiX29pZGMvdG9rZW5fZW50cnlfY2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsa0JBQWtCO0FBQzVDLGdCQUFnQixtQkFBTyxDQUFDLDhGQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvbW9uZ29kYl9vaWRjL3Rva2VuX2VudHJ5X2NhY2hlLmpzPzhiMGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRva2VuRW50cnlDYWNoZSA9IGV4cG9ydHMuVG9rZW5FbnRyeSA9IHZvaWQgMDtcbmNvbnN0IGNhY2hlXzEgPSByZXF1aXJlKFwiLi9jYWNoZVwiKTtcbi8qIERlZmF1bHQgZXhwaXJhdGlvbiBpcyBub3cgZm9yIHdoZW4gbm8gZXhwaXJhdGlvbiBwcm92aWRlZCAqL1xuY29uc3QgREVGQVVMVF9FWFBJUkFUSU9OX1NFQ1MgPSAwO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgVG9rZW5FbnRyeSBleHRlbmRzIGNhY2hlXzEuRXhwaXJpbmdDYWNoZUVudHJ5IHtcbiAgICAvKipcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgZW50cnkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodG9rZW5SZXN1bHQsIHNlcnZlckluZm8sIGV4cGlyYXRpb24pIHtcbiAgICAgICAgc3VwZXIoZXhwaXJhdGlvbik7XG4gICAgICAgIHRoaXMudG9rZW5SZXN1bHQgPSB0b2tlblJlc3VsdDtcbiAgICAgICAgdGhpcy5zZXJ2ZXJJbmZvID0gc2VydmVySW5mbztcbiAgICB9XG59XG5leHBvcnRzLlRva2VuRW50cnkgPSBUb2tlbkVudHJ5O1xuLyoqXG4gKiBDYWNoZSBvZiBPSURDIHRva2VuIGVudHJpZXMuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgVG9rZW5FbnRyeUNhY2hlIGV4dGVuZHMgY2FjaGVfMS5DYWNoZSB7XG4gICAgLyoqXG4gICAgICogU2V0IGFuIGVudHJ5IGluIHRoZSB0b2tlbiBjYWNoZS5cbiAgICAgKi9cbiAgICBhZGRFbnRyeShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoLCB0b2tlblJlc3VsdCwgc2VydmVySW5mbykge1xuICAgICAgICBjb25zdCBlbnRyeSA9IG5ldyBUb2tlbkVudHJ5KHRva2VuUmVzdWx0LCBzZXJ2ZXJJbmZvLCB0b2tlblJlc3VsdC5leHBpcmVzSW5TZWNvbmRzID8/IERFRkFVTFRfRVhQSVJBVElPTl9TRUNTKTtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnNldCh0aGlzLmNhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpLCBlbnRyeSk7XG4gICAgICAgIHJldHVybiBlbnRyeTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlIGFuIGVudHJ5IGZyb20gdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGRlbGV0ZUVudHJ5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzLmRlbGV0ZSh0aGlzLmNhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFuIGVudHJ5IGZyb20gdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGdldEVudHJ5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50cmllcy5nZXQodGhpcy5jYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBhbGwgZXhwaXJlZCBlbnRyaWVzIGZyb20gdGhlIGNhY2hlLlxuICAgICAqL1xuICAgIGRlbGV0ZUV4cGlyZWRFbnRyaWVzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIGVudHJ5XSBvZiB0aGlzLmVudHJpZXMpIHtcbiAgICAgICAgICAgIGlmICghZW50cnkuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbnRyaWVzLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNhY2hlIGtleSBmcm9tIHRoZSBhZGRyZXNzIGFuZCB1c2VybmFtZS5cbiAgICAgKi9cbiAgICBjYWNoZUtleShhZGRyZXNzLCB1c2VybmFtZSwgY2FsbGJhY2tIYXNoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc2hlZENhY2hlS2V5KGFkZHJlc3MsIHVzZXJuYW1lLCBjYWxsYmFja0hhc2gpO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9rZW5FbnRyeUNhY2hlID0gVG9rZW5FbnRyeUNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9rZW5fZW50cnlfY2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc/token_entry_cache.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/plain.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/plain.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Plain = void 0;\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass Plain extends auth_provider_1.AuthProvider {\n    async auth(authContext) {\n        const { connection, credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const { username, password } = credentials;\n        const payload = new bson_1.Binary(Buffer.from(`\\x00${username}\\x00${password}`));\n        const command = {\n            saslStart: 1,\n            mechanism: 'PLAIN',\n            payload: payload,\n            autoAuthorize: 1\n        };\n        await connection.commandAsync((0, utils_1.ns)('$external.$cmd'), command, undefined);\n    }\n}\nexports.Plain = Plain;\n//# sourceMappingURL=plain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9wbGFpbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2IsZUFBZSxtQkFBTyxDQUFDLHlFQUFZO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3JDLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3JDLHdCQUF3QixtQkFBTyxDQUFDLGlHQUFpQjtBQUNqRDtBQUNBO0FBQ0EsZ0JBQWdCLDBCQUEwQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUJBQXFCO0FBQ3JDLDZEQUE2RCxTQUFTLE1BQU0sU0FBUztBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9hdXRoL3BsYWluLmpzPzA5OTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlBsYWluID0gdm9pZCAwO1xuY29uc3QgYnNvbl8xID0gcmVxdWlyZShcIi4uLy4uL2Jzb25cIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsc1wiKTtcbmNvbnN0IGF1dGhfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2F1dGhfcHJvdmlkZXJcIik7XG5jbGFzcyBQbGFpbiBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIGF1dGgoYXV0aENvbnRleHQpIHtcbiAgICAgICAgY29uc3QgeyBjb25uZWN0aW9uLCBjcmVkZW50aWFscyB9ID0gYXV0aENvbnRleHQ7XG4gICAgICAgIGlmICghY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvTWlzc2luZ0NyZWRlbnRpYWxzRXJyb3IoJ0F1dGhDb250ZXh0IG11c3QgcHJvdmlkZSBjcmVkZW50aWFscy4nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gY3JlZGVudGlhbHM7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgYnNvbl8xLkJpbmFyeShCdWZmZXIuZnJvbShgXFx4MDAke3VzZXJuYW1lfVxceDAwJHtwYXNzd29yZH1gKSk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBzYXNsU3RhcnQ6IDEsXG4gICAgICAgICAgICBtZWNoYW5pc206ICdQTEFJTicsXG4gICAgICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxuICAgICAgICAgICAgYXV0b0F1dGhvcml6ZTogMVxuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmNvbW1hbmRBc3luYygoMCwgdXRpbHNfMS5ucykoJyRleHRlcm5hbC4kY21kJyksIGNvbW1hbmQsIHVuZGVmaW5lZCk7XG4gICAgfVxufVxuZXhwb3J0cy5QbGFpbiA9IFBsYWluO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGxhaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/plain.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js":
/*!**********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/providers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = exports.AuthMechanism = void 0;\n/** @public */\nexports.AuthMechanism = Object.freeze({\n    MONGODB_AWS: 'MONGODB-AWS',\n    MONGODB_CR: 'MONGODB-CR',\n    MONGODB_DEFAULT: 'DEFAULT',\n    MONGODB_GSSAPI: 'GSSAPI',\n    MONGODB_PLAIN: 'PLAIN',\n    MONGODB_SCRAM_SHA1: 'SCRAM-SHA-1',\n    MONGODB_SCRAM_SHA256: 'SCRAM-SHA-256',\n    MONGODB_X509: 'MONGODB-X509',\n    /** @experimental */\n    MONGODB_OIDC: 'MONGODB-OIDC'\n});\n/** @internal */\nexports.AUTH_MECHS_AUTH_SRC_EXTERNAL = new Set([\n    exports.AuthMechanism.MONGODB_GSSAPI,\n    exports.AuthMechanism.MONGODB_AWS,\n    exports.AuthMechanism.MONGODB_OIDC,\n    exports.AuthMechanism.MONGODB_X509\n]);\n//# sourceMappingURL=providers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC9wcm92aWRlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0NBQW9DLEdBQUcscUJBQXFCO0FBQzVEO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgvcHJvdmlkZXJzLmpzP2QzNjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFVVEhfTUVDSFNfQVVUSF9TUkNfRVhURVJOQUwgPSBleHBvcnRzLkF1dGhNZWNoYW5pc20gPSB2b2lkIDA7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5BdXRoTWVjaGFuaXNtID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgTU9OR09EQl9BV1M6ICdNT05HT0RCLUFXUycsXG4gICAgTU9OR09EQl9DUjogJ01PTkdPREItQ1InLFxuICAgIE1PTkdPREJfREVGQVVMVDogJ0RFRkFVTFQnLFxuICAgIE1PTkdPREJfR1NTQVBJOiAnR1NTQVBJJyxcbiAgICBNT05HT0RCX1BMQUlOOiAnUExBSU4nLFxuICAgIE1PTkdPREJfU0NSQU1fU0hBMTogJ1NDUkFNLVNIQS0xJyxcbiAgICBNT05HT0RCX1NDUkFNX1NIQTI1NjogJ1NDUkFNLVNIQS0yNTYnLFxuICAgIE1PTkdPREJfWDUwOTogJ01PTkdPREItWDUwOScsXG4gICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICBNT05HT0RCX09JREM6ICdNT05HT0RCLU9JREMnXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuQVVUSF9NRUNIU19BVVRIX1NSQ19FWFRFUk5BTCA9IG5ldyBTZXQoW1xuICAgIGV4cG9ydHMuQXV0aE1lY2hhbmlzbS5NT05HT0RCX0dTU0FQSSxcbiAgICBleHBvcnRzLkF1dGhNZWNoYW5pc20uTU9OR09EQl9BV1MsXG4gICAgZXhwb3J0cy5BdXRoTWVjaGFuaXNtLk1PTkdPREJfT0lEQyxcbiAgICBleHBvcnRzLkF1dGhNZWNoYW5pc20uTU9OR09EQl9YNTA5XG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3ZpZGVycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/scram.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/scram.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ScramSHA256 = exports.ScramSHA1 = void 0;\nconst saslprep_1 = __webpack_require__(/*! @mongodb-js/saslprep */ \"(ssr)/../../../../../node_modules/@mongodb-js/saslprep/dist/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst providers_1 = __webpack_require__(/*! ./providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\nclass ScramSHA extends auth_provider_1.AuthProvider {\n    constructor(cryptoMethod) {\n        super();\n        this.cryptoMethod = cryptoMethod || 'sha1';\n        this.randomBytesAsync = (0, util_1.promisify)(crypto.randomBytes);\n    }\n    async prepare(handshakeDoc, authContext) {\n        const cryptoMethod = this.cryptoMethod;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const nonce = await this.randomBytesAsync(24);\n        // store the nonce for later use\n        authContext.nonce = nonce;\n        const request = {\n            ...handshakeDoc,\n            speculativeAuthenticate: {\n                ...makeFirstMessage(cryptoMethod, credentials, nonce),\n                db: credentials.source\n            }\n        };\n        return request;\n    }\n    async auth(authContext) {\n        const { reauthenticating, response } = authContext;\n        if (response?.speculativeAuthenticate && !reauthenticating) {\n            return continueScramConversation(this.cryptoMethod, response.speculativeAuthenticate, authContext);\n        }\n        return executeScram(this.cryptoMethod, authContext);\n    }\n}\nfunction cleanUsername(username) {\n    return username.replace('=', '=3D').replace(',', '=2C');\n}\nfunction clientFirstMessageBare(username, nonce) {\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return Buffer.concat([\n        Buffer.from('n=', 'utf8'),\n        Buffer.from(username, 'utf8'),\n        Buffer.from(',r=', 'utf8'),\n        Buffer.from(nonce.toString('base64'), 'utf8')\n    ]);\n}\nfunction makeFirstMessage(cryptoMethod, credentials, nonce) {\n    const username = cleanUsername(credentials.username);\n    const mechanism = cryptoMethod === 'sha1' ? providers_1.AuthMechanism.MONGODB_SCRAM_SHA1 : providers_1.AuthMechanism.MONGODB_SCRAM_SHA256;\n    // NOTE: This is done b/c Javascript uses UTF-16, but the server is hashing in UTF-8.\n    // Since the username is not sasl-prep-d, we need to do this here.\n    return {\n        saslStart: 1,\n        mechanism,\n        payload: new bson_1.Binary(Buffer.concat([Buffer.from('n,,', 'utf8'), clientFirstMessageBare(username, nonce)])),\n        autoAuthorize: 1,\n        options: { skipEmptyExchange: true }\n    };\n}\nasync function executeScram(cryptoMethod, authContext) {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('AuthContext must contain a valid nonce property');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const saslStartCmd = makeFirstMessage(cryptoMethod, credentials, nonce);\n    const response = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslStartCmd, undefined);\n    await continueScramConversation(cryptoMethod, response, authContext);\n}\nasync function continueScramConversation(cryptoMethod, response, authContext) {\n    const connection = authContext.connection;\n    const credentials = authContext.credentials;\n    if (!credentials) {\n        throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    if (!authContext.nonce) {\n        throw new error_1.MongoInvalidArgumentError('Unable to continue SCRAM without valid nonce');\n    }\n    const nonce = authContext.nonce;\n    const db = credentials.source;\n    const username = cleanUsername(credentials.username);\n    const password = credentials.password;\n    const processedPassword = cryptoMethod === 'sha256' ? (0, saslprep_1.saslprep)(password) : passwordDigest(username, password);\n    const payload = Buffer.isBuffer(response.payload)\n        ? new bson_1.Binary(response.payload)\n        : response.payload;\n    const dict = parsePayload(payload);\n    const iterations = parseInt(dict.i, 10);\n    if (iterations && iterations < 4096) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid iteration count ${iterations}`);\n    }\n    const salt = dict.s;\n    const rnonce = dict.r;\n    if (rnonce.startsWith('nonce')) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Server returned an invalid nonce: ${rnonce}`);\n    }\n    // Set up start of proof\n    const withoutProof = `c=biws,r=${rnonce}`;\n    const saltedPassword = HI(processedPassword, Buffer.from(salt, 'base64'), iterations, cryptoMethod);\n    const clientKey = HMAC(cryptoMethod, saltedPassword, 'Client Key');\n    const serverKey = HMAC(cryptoMethod, saltedPassword, 'Server Key');\n    const storedKey = H(cryptoMethod, clientKey);\n    const authMessage = [\n        clientFirstMessageBare(username, nonce),\n        payload.toString('utf8'),\n        withoutProof\n    ].join(',');\n    const clientSignature = HMAC(cryptoMethod, storedKey, authMessage);\n    const clientProof = `p=${xor(clientKey, clientSignature)}`;\n    const clientFinal = [withoutProof, clientProof].join(',');\n    const serverSignature = HMAC(cryptoMethod, serverKey, authMessage);\n    const saslContinueCmd = {\n        saslContinue: 1,\n        conversationId: response.conversationId,\n        payload: new bson_1.Binary(Buffer.from(clientFinal))\n    };\n    const r = await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), saslContinueCmd, undefined);\n    const parsedResponse = parsePayload(r.payload);\n    if (!compareDigest(Buffer.from(parsedResponse.v, 'base64'), serverSignature)) {\n        throw new error_1.MongoRuntimeError('Server returned an invalid signature');\n    }\n    if (r.done !== false) {\n        // If the server sends r.done === true we can save one RTT\n        return;\n    }\n    const retrySaslContinueCmd = {\n        saslContinue: 1,\n        conversationId: r.conversationId,\n        payload: Buffer.alloc(0)\n    };\n    await connection.commandAsync((0, utils_1.ns)(`${db}.$cmd`), retrySaslContinueCmd, undefined);\n}\nfunction parsePayload(payload) {\n    const payloadStr = payload.toString('utf8');\n    const dict = {};\n    const parts = payloadStr.split(',');\n    for (let i = 0; i < parts.length; i++) {\n        const valueParts = parts[i].split('=');\n        dict[valueParts[0]] = valueParts[1];\n    }\n    return dict;\n}\nfunction passwordDigest(username, password) {\n    if (typeof username !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Username must be a string');\n    }\n    if (typeof password !== 'string') {\n        throw new error_1.MongoInvalidArgumentError('Password must be a string');\n    }\n    if (password.length === 0) {\n        throw new error_1.MongoInvalidArgumentError('Password cannot be empty');\n    }\n    let md5;\n    try {\n        md5 = crypto.createHash('md5');\n    }\n    catch (err) {\n        if (crypto.getFips()) {\n            // This error is (slightly) more helpful than what comes from OpenSSL directly, e.g.\n            // 'Error: error:060800C8:digital envelope routines:EVP_DigestInit_ex:disabled for FIPS'\n            throw new Error('Auth mechanism SCRAM-SHA-1 is not supported in FIPS mode');\n        }\n        throw err;\n    }\n    md5.update(`${username}:mongo:${password}`, 'utf8');\n    return md5.digest('hex');\n}\n// XOR two buffers\nfunction xor(a, b) {\n    if (!Buffer.isBuffer(a)) {\n        a = Buffer.from(a);\n    }\n    if (!Buffer.isBuffer(b)) {\n        b = Buffer.from(b);\n    }\n    const length = Math.max(a.length, b.length);\n    const res = [];\n    for (let i = 0; i < length; i += 1) {\n        res.push(a[i] ^ b[i]);\n    }\n    return Buffer.from(res).toString('base64');\n}\nfunction H(method, text) {\n    return crypto.createHash(method).update(text).digest();\n}\nfunction HMAC(method, key, text) {\n    return crypto.createHmac(method, key).update(text).digest();\n}\nlet _hiCache = {};\nlet _hiCacheCount = 0;\nfunction _hiCachePurge() {\n    _hiCache = {};\n    _hiCacheCount = 0;\n}\nconst hiLengthMap = {\n    sha256: 32,\n    sha1: 20\n};\nfunction HI(data, salt, iterations, cryptoMethod) {\n    // omit the work if already generated\n    const key = [data, salt.toString('base64'), iterations].join('_');\n    if (_hiCache[key] != null) {\n        return _hiCache[key];\n    }\n    // generate the salt\n    const saltedData = crypto.pbkdf2Sync(data, salt, iterations, hiLengthMap[cryptoMethod], cryptoMethod);\n    // cache a copy to speed up the next lookup, but prevent unbounded cache growth\n    if (_hiCacheCount >= 200) {\n        _hiCachePurge();\n    }\n    _hiCache[key] = saltedData;\n    _hiCacheCount += 1;\n    return saltedData;\n}\nfunction compareDigest(lhs, rhs) {\n    if (lhs.length !== rhs.length) {\n        return false;\n    }\n    if (typeof crypto.timingSafeEqual === 'function') {\n        return crypto.timingSafeEqual(lhs, rhs);\n    }\n    let result = 0;\n    for (let i = 0; i < lhs.length; i++) {\n        result |= lhs[i] ^ rhs[i];\n    }\n    return result === 0;\n}\nclass ScramSHA1 extends ScramSHA {\n    constructor() {\n        super('sha1');\n    }\n}\nexports.ScramSHA1 = ScramSHA1;\nclass ScramSHA256 extends ScramSHA {\n    constructor() {\n        super('sha256');\n    }\n}\nexports.ScramSHA256 = ScramSHA256;\n//# sourceMappingURL=scram.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/scram.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/x509.js":
/*!*****************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/auth/x509.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.X509 = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth_provider */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nclass X509 extends auth_provider_1.AuthProvider {\n    async prepare(handshakeDoc, authContext) {\n        const { credentials } = authContext;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        return { ...handshakeDoc, speculativeAuthenticate: x509AuthenticateCommand(credentials) };\n    }\n    async auth(authContext) {\n        const connection = authContext.connection;\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n        }\n        const response = authContext.response;\n        if (response?.speculativeAuthenticate) {\n            return;\n        }\n        await connection.commandAsync((0, utils_1.ns)('$external.$cmd'), x509AuthenticateCommand(credentials), undefined);\n    }\n}\nexports.X509 = X509;\nfunction x509AuthenticateCommand(credentials) {\n    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };\n    if (credentials.username) {\n        command.user = credentials.username;\n    }\n    return command;\n}\n//# sourceMappingURL=x509.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvYXV0aC94NTA5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVk7QUFDWixnQkFBZ0IsbUJBQU8sQ0FBQywyRUFBYTtBQUNyQyxnQkFBZ0IsbUJBQU8sQ0FBQywyRUFBYTtBQUNyQyx3QkFBd0IsbUJBQU8sQ0FBQyxpR0FBaUI7QUFDakQ7QUFDQTtBQUNBLGdCQUFnQixjQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL2F1dGgveDUwOS5qcz84OWZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5YNTA5ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5jb25zdCBhdXRoX3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9hdXRoX3Byb3ZpZGVyXCIpO1xuY2xhc3MgWDUwOSBleHRlbmRzIGF1dGhfcHJvdmlkZXJfMS5BdXRoUHJvdmlkZXIge1xuICAgIGFzeW5jIHByZXBhcmUoaGFuZHNoYWtlRG9jLCBhdXRoQ29udGV4dCkge1xuICAgICAgICBjb25zdCB7IGNyZWRlbnRpYWxzIH0gPSBhdXRoQ29udGV4dDtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nQ3JlZGVudGlhbHNFcnJvcignQXV0aENvbnRleHQgbXVzdCBwcm92aWRlIGNyZWRlbnRpYWxzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IC4uLmhhbmRzaGFrZURvYywgc3BlY3VsYXRpdmVBdXRoZW50aWNhdGU6IHg1MDlBdXRoZW50aWNhdGVDb21tYW5kKGNyZWRlbnRpYWxzKSB9O1xuICAgIH1cbiAgICBhc3luYyBhdXRoKGF1dGhDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhdXRoQ29udGV4dC5jb25uZWN0aW9uO1xuICAgICAgICBjb25zdCBjcmVkZW50aWFscyA9IGF1dGhDb250ZXh0LmNyZWRlbnRpYWxzO1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb01pc3NpbmdDcmVkZW50aWFsc0Vycm9yKCdBdXRoQ29udGV4dCBtdXN0IHByb3ZpZGUgY3JlZGVudGlhbHMuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhdXRoQ29udGV4dC5yZXNwb25zZTtcbiAgICAgICAgaWYgKHJlc3BvbnNlPy5zcGVjdWxhdGl2ZUF1dGhlbnRpY2F0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IGNvbm5lY3Rpb24uY29tbWFuZEFzeW5jKCgwLCB1dGlsc18xLm5zKSgnJGV4dGVybmFsLiRjbWQnKSwgeDUwOUF1dGhlbnRpY2F0ZUNvbW1hbmQoY3JlZGVudGlhbHMpLCB1bmRlZmluZWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuWDUwOSA9IFg1MDk7XG5mdW5jdGlvbiB4NTA5QXV0aGVudGljYXRlQ29tbWFuZChjcmVkZW50aWFscykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSB7IGF1dGhlbnRpY2F0ZTogMSwgbWVjaGFuaXNtOiAnTU9OR09EQi1YNTA5JyB9O1xuICAgIGlmIChjcmVkZW50aWFscy51c2VybmFtZSkge1xuICAgICAgICBjb21tYW5kLnVzZXIgPSBjcmVkZW50aWFscy51c2VybmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1hbmQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD14NTA5LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/x509.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/command_monitoring_events.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/command_monitoring_events.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SENSITIVE_COMMANDS = exports.CommandFailedEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/commands.js\");\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nclass CommandStartedEvent {\n    /**\n     * Create a started event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     */\n    constructor(connection, command) {\n        /** @internal */\n        this.name = constants_1.COMMAND_STARTED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        // TODO: remove in major revision, this is not spec behavior\n        if (exports.SENSITIVE_COMMANDS.has(commandName)) {\n            this.commandObj = {};\n            this.commandObj[commandName] = true;\n        }\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.databaseName = databaseName(command);\n        this.commandName = commandName;\n        this.command = maybeRedact(commandName, cmd, cmd);\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandStartedEvent = CommandStartedEvent;\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nclass CommandSucceededEvent {\n    /**\n     * Create a succeeded event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param reply - the reply for this command from the server\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, reply, started) {\n        /** @internal */\n        this.name = constants_1.COMMAND_SUCCEEDED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.reply = maybeRedact(commandName, cmd, extractReply(command, reply));\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandSucceededEvent = CommandSucceededEvent;\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nclass CommandFailedEvent {\n    /**\n     * Create a failure event\n     *\n     * @internal\n     * @param pool - the pool that originated the command\n     * @param command - the command\n     * @param error - the generated error or a server error response\n     * @param started - a high resolution tuple timestamp of when the command was first sent, to calculate duration\n     */\n    constructor(connection, command, error, started) {\n        /** @internal */\n        this.name = constants_1.COMMAND_FAILED;\n        const cmd = extractCommand(command);\n        const commandName = extractCommandName(cmd);\n        const { address, connectionId, serviceId } = extractConnectionDetails(connection);\n        this.address = address;\n        this.connectionId = connectionId;\n        this.serviceId = serviceId;\n        this.requestId = command.requestId;\n        this.commandName = commandName;\n        this.duration = (0, utils_1.calculateDurationInMs)(started);\n        this.failure = maybeRedact(commandName, cmd, error);\n    }\n    /* @internal */\n    get hasServiceId() {\n        return !!this.serviceId;\n    }\n}\nexports.CommandFailedEvent = CommandFailedEvent;\n/**\n * Commands that we want to redact because of the sensitive nature of their contents\n * @internal\n */\nexports.SENSITIVE_COMMANDS = new Set([\n    'authenticate',\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'createUser',\n    'updateUser',\n    'copydbgetnonce',\n    'copydbsaslstart',\n    'copydb'\n]);\nconst HELLO_COMMANDS = new Set(['hello', constants_1.LEGACY_HELLO_COMMAND, constants_1.LEGACY_HELLO_COMMAND_CAMEL_CASE]);\n// helper methods\nconst extractCommandName = (commandDoc) => Object.keys(commandDoc)[0];\nconst namespace = (command) => command.ns;\nconst databaseName = (command) => command.ns.split('.')[0];\nconst collectionName = (command) => command.ns.split('.')[1];\nconst maybeRedact = (commandName, commandDoc, result) => exports.SENSITIVE_COMMANDS.has(commandName) ||\n    (HELLO_COMMANDS.has(commandName) && commandDoc.speculativeAuthenticate)\n    ? {}\n    : result;\nconst LEGACY_FIND_QUERY_MAP = {\n    $query: 'filter',\n    $orderby: 'sort',\n    $hint: 'hint',\n    $comment: 'comment',\n    $maxScan: 'maxScan',\n    $max: 'max',\n    $min: 'min',\n    $returnKey: 'returnKey',\n    $showDiskLoc: 'showRecordId',\n    $maxTimeMS: 'maxTimeMS',\n    $snapshot: 'snapshot'\n};\nconst LEGACY_FIND_OPTIONS_MAP = {\n    numberToSkip: 'skip',\n    numberToReturn: 'batchSize',\n    returnFieldSelector: 'projection'\n};\nconst OP_QUERY_KEYS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'partial',\n    'exhaust'\n];\n/** Extract the actual command from the query, possibly up-converting if it's a legacy format */\nfunction extractCommand(command) {\n    if (command instanceof commands_1.Msg) {\n        return (0, utils_1.deepCopy)(command.command);\n    }\n    if (command.query?.$query) {\n        let result;\n        if (command.ns === 'admin.$cmd') {\n            // up-convert legacy command\n            result = Object.assign({}, command.query.$query);\n        }\n        else {\n            // up-convert legacy find command\n            result = { find: collectionName(command) };\n            Object.keys(LEGACY_FIND_QUERY_MAP).forEach(key => {\n                if (command.query[key] != null) {\n                    result[LEGACY_FIND_QUERY_MAP[key]] = (0, utils_1.deepCopy)(command.query[key]);\n                }\n            });\n        }\n        Object.keys(LEGACY_FIND_OPTIONS_MAP).forEach(key => {\n            const legacyKey = key;\n            if (command[legacyKey] != null) {\n                result[LEGACY_FIND_OPTIONS_MAP[legacyKey]] = (0, utils_1.deepCopy)(command[legacyKey]);\n            }\n        });\n        OP_QUERY_KEYS.forEach(key => {\n            if (command[key]) {\n                result[key] = command[key];\n            }\n        });\n        if (command.pre32Limit != null) {\n            result.limit = command.pre32Limit;\n        }\n        if (command.query.$explain) {\n            return { explain: result };\n        }\n        return result;\n    }\n    const clonedQuery = {};\n    const clonedCommand = {};\n    if (command.query) {\n        for (const k in command.query) {\n            clonedQuery[k] = (0, utils_1.deepCopy)(command.query[k]);\n        }\n        clonedCommand.query = clonedQuery;\n    }\n    for (const k in command) {\n        if (k === 'query')\n            continue;\n        clonedCommand[k] = (0, utils_1.deepCopy)(command[k]);\n    }\n    return command.query ? clonedQuery : clonedCommand;\n}\nfunction extractReply(command, reply) {\n    if (!reply) {\n        return reply;\n    }\n    if (command instanceof commands_1.Msg) {\n        return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n    }\n    // is this a legacy find command?\n    if (command.query && command.query.$query != null) {\n        return {\n            ok: 1,\n            cursor: {\n                id: (0, utils_1.deepCopy)(reply.cursorId),\n                ns: namespace(command),\n                firstBatch: (0, utils_1.deepCopy)(reply.documents)\n            }\n        };\n    }\n    return (0, utils_1.deepCopy)(reply.result ? reply.result : reply);\n}\nfunction extractConnectionDetails(connection) {\n    let connectionId;\n    if ('id' in connection) {\n        connectionId = connection.id;\n    }\n    return {\n        address: connection.address,\n        serviceId: connection.serviceId,\n        connectionId\n    };\n}\n//# sourceMappingURL=command_monitoring_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/command_monitoring_events.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/commands.js":
/*!****************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/commands.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BinMsg = exports.Msg = exports.Response = exports.Query = void 0;\nconst BSON = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n// Incrementing request id\nlet _requestId = 0;\n// Query flags\nconst OPTS_TAILABLE_CURSOR = 2;\nconst OPTS_SECONDARY = 4;\nconst OPTS_OPLOG_REPLAY = 8;\nconst OPTS_NO_CURSOR_TIMEOUT = 16;\nconst OPTS_AWAIT_DATA = 32;\nconst OPTS_EXHAUST = 64;\nconst OPTS_PARTIAL = 128;\n// Response flags\nconst CURSOR_NOT_FOUND = 1;\nconst QUERY_FAILURE = 2;\nconst SHARD_CONFIG_STALE = 4;\nconst AWAIT_CAPABLE = 8;\n/**************************************************************\n * QUERY\n **************************************************************/\n/** @internal */\nclass Query {\n    constructor(ns, query, options) {\n        // Basic options needed to be passed in\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (ns == null)\n            throw new error_1.MongoRuntimeError('Namespace must be specified for query');\n        // TODO(NODE-3483): Replace with MongoCommandError\n        if (query == null)\n            throw new error_1.MongoRuntimeError('A query document must be specified for query');\n        // Validate that we are not passing 0x00 in the collection name\n        if (ns.indexOf('\\x00') !== -1) {\n            // TODO(NODE-3483): Use MongoNamespace static method\n            throw new error_1.MongoRuntimeError('Namespace cannot contain a null character');\n        }\n        // Basic options\n        this.ns = ns;\n        this.query = query;\n        // Additional options\n        this.numberToSkip = options.numberToSkip || 0;\n        this.numberToReturn = options.numberToReturn || 0;\n        this.returnFieldSelector = options.returnFieldSelector || undefined;\n        this.requestId = Query.getRequestId();\n        // special case for pre-3.2 find commands, delete ASAP\n        this.pre32Limit = options.pre32Limit;\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.batchSize = this.numberToReturn;\n        // Flags\n        this.tailable = false;\n        this.secondaryOk = typeof options.secondaryOk === 'boolean' ? options.secondaryOk : false;\n        this.oplogReplay = false;\n        this.noCursorTimeout = false;\n        this.awaitData = false;\n        this.exhaust = false;\n        this.partial = false;\n    }\n    /** Assign next request Id. */\n    incRequestId() {\n        this.requestId = _requestId++;\n    }\n    /** Peek next request Id. */\n    nextRequestId() {\n        return _requestId + 1;\n    }\n    /** Increment then return next request Id. */\n    static getRequestId() {\n        return ++_requestId;\n    }\n    // Uses a single allocated buffer for the process, avoiding multiple memory allocations\n    toBin() {\n        const buffers = [];\n        let projection = null;\n        // Set up the flags\n        let flags = 0;\n        if (this.tailable) {\n            flags |= OPTS_TAILABLE_CURSOR;\n        }\n        if (this.secondaryOk) {\n            flags |= OPTS_SECONDARY;\n        }\n        if (this.oplogReplay) {\n            flags |= OPTS_OPLOG_REPLAY;\n        }\n        if (this.noCursorTimeout) {\n            flags |= OPTS_NO_CURSOR_TIMEOUT;\n        }\n        if (this.awaitData) {\n            flags |= OPTS_AWAIT_DATA;\n        }\n        if (this.exhaust) {\n            flags |= OPTS_EXHAUST;\n        }\n        if (this.partial) {\n            flags |= OPTS_PARTIAL;\n        }\n        // If batchSize is different to this.numberToReturn\n        if (this.batchSize !== this.numberToReturn)\n            this.numberToReturn = this.batchSize;\n        // Allocate write protocol header buffer\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 + // Flags\n            Buffer.byteLength(this.ns) +\n            1 + // namespace\n            4 + // numberToSkip\n            4 // numberToReturn\n        );\n        // Add header to buffers\n        buffers.push(header);\n        // Serialize the query\n        const query = BSON.serialize(this.query, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n        // Add query document\n        buffers.push(query);\n        if (this.returnFieldSelector && Object.keys(this.returnFieldSelector).length > 0) {\n            // Serialize the projection document\n            projection = BSON.serialize(this.returnFieldSelector, {\n                checkKeys: this.checkKeys,\n                serializeFunctions: this.serializeFunctions,\n                ignoreUndefined: this.ignoreUndefined\n            });\n            // Add projection document\n            buffers.push(projection);\n        }\n        // Total message size\n        const totalLength = header.length + query.length + (projection ? projection.length : 0);\n        // Set up the index\n        let index = 4;\n        // Write total document length\n        header[3] = (totalLength >> 24) & 0xff;\n        header[2] = (totalLength >> 16) & 0xff;\n        header[1] = (totalLength >> 8) & 0xff;\n        header[0] = totalLength & 0xff;\n        // Write header information requestId\n        header[index + 3] = (this.requestId >> 24) & 0xff;\n        header[index + 2] = (this.requestId >> 16) & 0xff;\n        header[index + 1] = (this.requestId >> 8) & 0xff;\n        header[index] = this.requestId & 0xff;\n        index = index + 4;\n        // Write header information responseTo\n        header[index + 3] = (0 >> 24) & 0xff;\n        header[index + 2] = (0 >> 16) & 0xff;\n        header[index + 1] = (0 >> 8) & 0xff;\n        header[index] = 0 & 0xff;\n        index = index + 4;\n        // Write header information OP_QUERY\n        header[index + 3] = (constants_1.OP_QUERY >> 24) & 0xff;\n        header[index + 2] = (constants_1.OP_QUERY >> 16) & 0xff;\n        header[index + 1] = (constants_1.OP_QUERY >> 8) & 0xff;\n        header[index] = constants_1.OP_QUERY & 0xff;\n        index = index + 4;\n        // Write header information flags\n        header[index + 3] = (flags >> 24) & 0xff;\n        header[index + 2] = (flags >> 16) & 0xff;\n        header[index + 1] = (flags >> 8) & 0xff;\n        header[index] = flags & 0xff;\n        index = index + 4;\n        // Write collection name\n        index = index + header.write(this.ns, index, 'utf8') + 1;\n        header[index - 1] = 0;\n        // Write header information flags numberToSkip\n        header[index + 3] = (this.numberToSkip >> 24) & 0xff;\n        header[index + 2] = (this.numberToSkip >> 16) & 0xff;\n        header[index + 1] = (this.numberToSkip >> 8) & 0xff;\n        header[index] = this.numberToSkip & 0xff;\n        index = index + 4;\n        // Write header information flags numberToReturn\n        header[index + 3] = (this.numberToReturn >> 24) & 0xff;\n        header[index + 2] = (this.numberToReturn >> 16) & 0xff;\n        header[index + 1] = (this.numberToReturn >> 8) & 0xff;\n        header[index] = this.numberToReturn & 0xff;\n        index = index + 4;\n        // Return the buffers\n        return buffers;\n    }\n}\nexports.Query = Query;\n/** @internal */\nclass Response {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.documents = new Array(0);\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Flag values\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options ?? {};\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        let bsonSize;\n        // Set up the options\n        const _options = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp\n        };\n        // Position within OP_REPLY at which documents start\n        // (See https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#wire-op-reply)\n        this.index = 20;\n        // Read the message body\n        this.responseFlags = this.data.readInt32LE(0);\n        this.cursorId = new BSON.Long(this.data.readInt32LE(4), this.data.readInt32LE(8));\n        this.startingFrom = this.data.readInt32LE(12);\n        this.numberReturned = this.data.readInt32LE(16);\n        // Preallocate document array\n        this.documents = new Array(this.numberReturned);\n        this.cursorNotFound = (this.responseFlags & CURSOR_NOT_FOUND) !== 0;\n        this.queryFailure = (this.responseFlags & QUERY_FAILURE) !== 0;\n        this.shardConfigStale = (this.responseFlags & SHARD_CONFIG_STALE) !== 0;\n        this.awaitCapable = (this.responseFlags & AWAIT_CAPABLE) !== 0;\n        // Parse Body\n        for (let i = 0; i < this.numberReturned; i++) {\n            bsonSize =\n                this.data[this.index] |\n                    (this.data[this.index + 1] << 8) |\n                    (this.data[this.index + 2] << 16) |\n                    (this.data[this.index + 3] << 24);\n            // If we have raw results specified slice the return document\n            if (raw) {\n                this.documents[i] = this.data.slice(this.index, this.index + bsonSize);\n            }\n            else {\n                this.documents[i] = BSON.deserialize(this.data.slice(this.index, this.index + bsonSize), _options);\n            }\n            // Adjust the index\n            this.index = this.index + bsonSize;\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            _options.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], _options);\n            this.documents = [doc];\n        }\n        // Set parsed\n        this.parsed = true;\n    }\n}\nexports.Response = Response;\n// Implementation of OP_MSG spec:\n// https://github.com/mongodb/specifications/blob/master/source/message/OP_MSG.rst\n//\n// struct Section {\n//   uint8 payloadType;\n//   union payload {\n//       document  document; // payloadType == 0\n//       struct sequence { // payloadType == 1\n//           int32      size;\n//           cstring    identifier;\n//           document*  documents;\n//       };\n//   };\n// };\n// struct OP_MSG {\n//   struct MsgHeader {\n//       int32  messageLength;\n//       int32  requestID;\n//       int32  responseTo;\n//       int32  opCode = 2013;\n//   };\n//   uint32      flagBits;\n//   Section+    sections;\n//   [uint32     checksum;]\n// };\n// Msg Flags\nconst OPTS_CHECKSUM_PRESENT = 1;\nconst OPTS_MORE_TO_COME = 2;\nconst OPTS_EXHAUST_ALLOWED = 1 << 16;\n/** @internal */\nclass Msg {\n    constructor(ns, command, options) {\n        // Basic options needed to be passed in\n        if (command == null)\n            throw new error_1.MongoInvalidArgumentError('Query document must be specified for query');\n        // Basic options\n        this.ns = ns;\n        this.command = command;\n        this.command.$db = (0, utils_1.databaseNamespace)(ns);\n        if (options.readPreference && options.readPreference.mode !== read_preference_1.ReadPreference.PRIMARY) {\n            this.command.$readPreference = options.readPreference.toJSON();\n        }\n        // Ensure empty options\n        this.options = options ?? {};\n        // Additional options\n        this.requestId = options.requestId ? options.requestId : Msg.getRequestId();\n        // Serialization option\n        this.serializeFunctions =\n            typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n        this.ignoreUndefined =\n            typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : false;\n        this.checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n        this.maxBsonSize = options.maxBsonSize || 1024 * 1024 * 16;\n        // flags\n        this.checksumPresent = false;\n        this.moreToCome = options.moreToCome || false;\n        this.exhaustAllowed =\n            typeof options.exhaustAllowed === 'boolean' ? options.exhaustAllowed : false;\n    }\n    toBin() {\n        const buffers = [];\n        let flags = 0;\n        if (this.checksumPresent) {\n            flags |= OPTS_CHECKSUM_PRESENT;\n        }\n        if (this.moreToCome) {\n            flags |= OPTS_MORE_TO_COME;\n        }\n        if (this.exhaustAllowed) {\n            flags |= OPTS_EXHAUST_ALLOWED;\n        }\n        const header = Buffer.alloc(4 * 4 + // Header\n            4 // Flags\n        );\n        buffers.push(header);\n        let totalLength = header.length;\n        const command = this.command;\n        totalLength += this.makeDocumentSegment(buffers, command);\n        header.writeInt32LE(totalLength, 0); // messageLength\n        header.writeInt32LE(this.requestId, 4); // requestID\n        header.writeInt32LE(0, 8); // responseTo\n        header.writeInt32LE(constants_1.OP_MSG, 12); // opCode\n        header.writeUInt32LE(flags, 16); // flags\n        return buffers;\n    }\n    makeDocumentSegment(buffers, document) {\n        const payloadTypeBuffer = Buffer.alloc(1);\n        payloadTypeBuffer[0] = 0;\n        const documentBuffer = this.serializeBson(document);\n        buffers.push(payloadTypeBuffer);\n        buffers.push(documentBuffer);\n        return payloadTypeBuffer.length + documentBuffer.length;\n    }\n    serializeBson(document) {\n        return BSON.serialize(document, {\n            checkKeys: this.checkKeys,\n            serializeFunctions: this.serializeFunctions,\n            ignoreUndefined: this.ignoreUndefined\n        });\n    }\n    static getRequestId() {\n        _requestId = (_requestId + 1) & 0x7fffffff;\n        return _requestId;\n    }\n}\nexports.Msg = Msg;\n/** @internal */\nclass BinMsg {\n    constructor(message, msgHeader, msgBody, opts) {\n        this.parsed = false;\n        this.raw = message;\n        this.data = msgBody;\n        this.opts = opts ?? {\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: false,\n            bsonRegExp: false\n        };\n        // Read the message header\n        this.length = msgHeader.length;\n        this.requestId = msgHeader.requestId;\n        this.responseTo = msgHeader.responseTo;\n        this.opCode = msgHeader.opCode;\n        this.fromCompressed = msgHeader.fromCompressed;\n        // Read response flags\n        this.responseFlags = msgBody.readInt32LE(0);\n        this.checksumPresent = (this.responseFlags & OPTS_CHECKSUM_PRESENT) !== 0;\n        this.moreToCome = (this.responseFlags & OPTS_MORE_TO_COME) !== 0;\n        this.exhaustAllowed = (this.responseFlags & OPTS_EXHAUST_ALLOWED) !== 0;\n        this.useBigInt64 = typeof this.opts.useBigInt64 === 'boolean' ? this.opts.useBigInt64 : false;\n        this.promoteLongs = typeof this.opts.promoteLongs === 'boolean' ? this.opts.promoteLongs : true;\n        this.promoteValues =\n            typeof this.opts.promoteValues === 'boolean' ? this.opts.promoteValues : true;\n        this.promoteBuffers =\n            typeof this.opts.promoteBuffers === 'boolean' ? this.opts.promoteBuffers : false;\n        this.bsonRegExp = typeof this.opts.bsonRegExp === 'boolean' ? this.opts.bsonRegExp : false;\n        this.documents = [];\n    }\n    isParsed() {\n        return this.parsed;\n    }\n    parse(options) {\n        // Don't parse again if not needed\n        if (this.parsed)\n            return;\n        options = options ?? {};\n        this.index = 4;\n        // Allow the return of raw documents instead of parsing\n        const raw = options.raw || false;\n        const documentsReturnedIn = options.documentsReturnedIn || null;\n        const useBigInt64 = options.useBigInt64 ?? this.opts.useBigInt64;\n        const promoteLongs = options.promoteLongs ?? this.opts.promoteLongs;\n        const promoteValues = options.promoteValues ?? this.opts.promoteValues;\n        const promoteBuffers = options.promoteBuffers ?? this.opts.promoteBuffers;\n        const bsonRegExp = options.bsonRegExp ?? this.opts.bsonRegExp;\n        const validation = this.parseBsonSerializationOptions(options);\n        // Set up the options\n        const bsonOptions = {\n            useBigInt64,\n            promoteLongs,\n            promoteValues,\n            promoteBuffers,\n            bsonRegExp,\n            validation\n            // Due to the strictness of the BSON libraries validation option we need this cast\n        };\n        while (this.index < this.data.length) {\n            const payloadType = this.data.readUInt8(this.index++);\n            if (payloadType === 0) {\n                const bsonSize = this.data.readUInt32LE(this.index);\n                const bin = this.data.slice(this.index, this.index + bsonSize);\n                this.documents.push(raw ? bin : BSON.deserialize(bin, bsonOptions));\n                this.index += bsonSize;\n            }\n            else if (payloadType === 1) {\n                // It was decided that no driver makes use of payload type 1\n                // TODO(NODE-3483): Replace with MongoDeprecationError\n                throw new error_1.MongoRuntimeError('OP_MSG Payload Type 1 detected unsupported protocol');\n            }\n        }\n        if (this.documents.length === 1 && documentsReturnedIn != null && raw) {\n            const fieldsAsRaw = {};\n            fieldsAsRaw[documentsReturnedIn] = true;\n            bsonOptions.fieldsAsRaw = fieldsAsRaw;\n            const doc = BSON.deserialize(this.documents[0], bsonOptions);\n            this.documents = [doc];\n        }\n        this.parsed = true;\n    }\n    parseBsonSerializationOptions({ enableUtf8Validation }) {\n        if (enableUtf8Validation === false) {\n            return { utf8: false };\n        }\n        return { utf8: { writeErrors: false } };\n    }\n}\nexports.BinMsg = BinMsg;\n//# sourceMappingURL=commands.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/commands.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/connect.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/connect.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LEGAL_TCP_SOCKET_OPTIONS = exports.LEGAL_TLS_SOCKET_OPTIONS = exports.prepareHandshakeDocument = exports.connect = exports.AUTH_PROVIDERS = void 0;\nconst net = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst auth_provider_1 = __webpack_require__(/*! ./auth/auth_provider */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/auth_provider.js\");\nconst gssapi_1 = __webpack_require__(/*! ./auth/gssapi */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nconst mongocr_1 = __webpack_require__(/*! ./auth/mongocr */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongocr.js\");\nconst mongodb_aws_1 = __webpack_require__(/*! ./auth/mongodb_aws */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_aws.js\");\nconst mongodb_oidc_1 = __webpack_require__(/*! ./auth/mongodb_oidc */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongodb_oidc.js\");\nconst plain_1 = __webpack_require__(/*! ./auth/plain */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/plain.js\");\nconst providers_1 = __webpack_require__(/*! ./auth/providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst scram_1 = __webpack_require__(/*! ./auth/scram */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/scram.js\");\nconst x509_1 = __webpack_require__(/*! ./auth/x509 */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/x509.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection.js\");\nconst constants_2 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\n/** @internal */\nexports.AUTH_PROVIDERS = new Map([\n    [providers_1.AuthMechanism.MONGODB_AWS, new mongodb_aws_1.MongoDBAWS()],\n    [providers_1.AuthMechanism.MONGODB_CR, new mongocr_1.MongoCR()],\n    [providers_1.AuthMechanism.MONGODB_GSSAPI, new gssapi_1.GSSAPI()],\n    [providers_1.AuthMechanism.MONGODB_OIDC, new mongodb_oidc_1.MongoDBOIDC()],\n    [providers_1.AuthMechanism.MONGODB_PLAIN, new plain_1.Plain()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA1, new scram_1.ScramSHA1()],\n    [providers_1.AuthMechanism.MONGODB_SCRAM_SHA256, new scram_1.ScramSHA256()],\n    [providers_1.AuthMechanism.MONGODB_X509, new x509_1.X509()]\n]);\nfunction connect(options, callback) {\n    makeConnection({ ...options, existingSocket: undefined }, (err, socket) => {\n        if (err || !socket) {\n            return callback(err);\n        }\n        let ConnectionType = options.connectionType ?? connection_1.Connection;\n        if (options.autoEncrypter) {\n            ConnectionType = connection_1.CryptoConnection;\n        }\n        const connection = new ConnectionType(socket, options);\n        performInitialHandshake(connection, options).then(() => callback(undefined, connection), error => {\n            connection.destroy({ force: false });\n            callback(error);\n        });\n    });\n}\nexports.connect = connect;\nfunction checkSupportedServer(hello, options) {\n    const maxWireVersion = Number(hello.maxWireVersion);\n    const minWireVersion = Number(hello.minWireVersion);\n    const serverVersionHighEnough = !Number.isNaN(maxWireVersion) && maxWireVersion >= constants_2.MIN_SUPPORTED_WIRE_VERSION;\n    const serverVersionLowEnough = !Number.isNaN(minWireVersion) && minWireVersion <= constants_2.MAX_SUPPORTED_WIRE_VERSION;\n    if (serverVersionHighEnough) {\n        if (serverVersionLowEnough) {\n            return null;\n        }\n        const message = `Server at ${options.hostAddress} reports minimum wire version ${JSON.stringify(hello.minWireVersion)}, but this version of the Node.js Driver requires at most ${constants_2.MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MAX_SUPPORTED_SERVER_VERSION})`;\n        return new error_1.MongoCompatibilityError(message);\n    }\n    const message = `Server at ${options.hostAddress} reports maximum wire version ${JSON.stringify(hello.maxWireVersion) ?? 0}, but this version of the Node.js Driver requires at least ${constants_2.MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${constants_2.MIN_SUPPORTED_SERVER_VERSION})`;\n    return new error_1.MongoCompatibilityError(message);\n}\nasync function performInitialHandshake(conn, options) {\n    const credentials = options.credentials;\n    if (credentials) {\n        if (!(credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT) &&\n            !exports.AUTH_PROVIDERS.get(credentials.mechanism)) {\n            throw new error_1.MongoInvalidArgumentError(`AuthMechanism '${credentials.mechanism}' not supported`);\n        }\n    }\n    const authContext = new auth_provider_1.AuthContext(conn, credentials, options);\n    conn.authContext = authContext;\n    const handshakeDoc = await prepareHandshakeDocument(authContext);\n    // @ts-expect-error: TODO(NODE-5141): The options need to be filtered properly, Connection options differ from Command options\n    const handshakeOptions = { ...options };\n    if (typeof options.connectTimeoutMS === 'number') {\n        // The handshake technically is a monitoring check, so its socket timeout should be connectTimeoutMS\n        handshakeOptions.socketTimeoutMS = options.connectTimeoutMS;\n    }\n    const start = new Date().getTime();\n    const response = await conn.commandAsync((0, utils_1.ns)('admin.$cmd'), handshakeDoc, handshakeOptions);\n    if (!('isWritablePrimary' in response)) {\n        // Provide hello-style response document.\n        response.isWritablePrimary = response[constants_1.LEGACY_HELLO_COMMAND];\n    }\n    if (response.helloOk) {\n        conn.helloOk = true;\n    }\n    const supportedServerErr = checkSupportedServer(response, options);\n    if (supportedServerErr) {\n        throw supportedServerErr;\n    }\n    if (options.loadBalanced) {\n        if (!response.serviceId) {\n            throw new error_1.MongoCompatibilityError('Driver attempted to initialize in load balancing mode, ' +\n                'but the server does not support this mode.');\n        }\n    }\n    // NOTE: This is metadata attached to the connection while porting away from\n    //       handshake being done in the `Server` class. Likely, it should be\n    //       relocated, or at very least restructured.\n    conn.hello = response;\n    conn.lastHelloMS = new Date().getTime() - start;\n    if (!response.arbiterOnly && credentials) {\n        // store the response on auth context\n        authContext.response = response;\n        const resolvedCredentials = credentials.resolveAuthMechanism(response);\n        const provider = exports.AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${resolvedCredentials.mechanism} defined.`);\n        }\n        try {\n            await provider.auth(authContext);\n        }\n        catch (error) {\n            if (error instanceof error_1.MongoError) {\n                error.addErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n                if ((0, error_1.needsRetryableWriteLabel)(error, response.maxWireVersion)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n                }\n            }\n            throw error;\n        }\n    }\n}\n/**\n * @internal\n *\n * This function is only exposed for testing purposes.\n */\nasync function prepareHandshakeDocument(authContext) {\n    const options = authContext.options;\n    const compressors = options.compressors ? options.compressors : [];\n    const { serverApi } = authContext.connection;\n    const handshakeDoc = {\n        [serverApi?.version ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n        helloOk: true,\n        client: options.metadata,\n        compression: compressors\n    };\n    if (options.loadBalanced === true) {\n        handshakeDoc.loadBalanced = true;\n    }\n    const credentials = authContext.credentials;\n    if (credentials) {\n        if (credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && credentials.username) {\n            handshakeDoc.saslSupportedMechs = `${credentials.source}.${credentials.username}`;\n            const provider = exports.AUTH_PROVIDERS.get(providers_1.AuthMechanism.MONGODB_SCRAM_SHA256);\n            if (!provider) {\n                // This auth mechanism is always present.\n                throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${providers_1.AuthMechanism.MONGODB_SCRAM_SHA256} defined.`);\n            }\n            return provider.prepare(handshakeDoc, authContext);\n        }\n        const provider = exports.AUTH_PROVIDERS.get(credentials.mechanism);\n        if (!provider) {\n            throw new error_1.MongoInvalidArgumentError(`No AuthProvider for ${credentials.mechanism} defined.`);\n        }\n        return provider.prepare(handshakeDoc, authContext);\n    }\n    return handshakeDoc;\n}\nexports.prepareHandshakeDocument = prepareHandshakeDocument;\n/** @public */\nexports.LEGAL_TLS_SOCKET_OPTIONS = [\n    'ALPNProtocols',\n    'ca',\n    'cert',\n    'checkServerIdentity',\n    'ciphers',\n    'crl',\n    'ecdhCurve',\n    'key',\n    'minDHSize',\n    'passphrase',\n    'pfx',\n    'rejectUnauthorized',\n    'secureContext',\n    'secureProtocol',\n    'servername',\n    'session'\n];\n/** @public */\nexports.LEGAL_TCP_SOCKET_OPTIONS = [\n    'family',\n    'hints',\n    'localAddress',\n    'localPort',\n    'lookup'\n];\nfunction parseConnectOptions(options) {\n    const hostAddress = options.hostAddress;\n    if (!hostAddress)\n        throw new error_1.MongoInvalidArgumentError('Option \"hostAddress\" is required');\n    const result = {};\n    for (const name of exports.LEGAL_TCP_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (typeof hostAddress.socketPath === 'string') {\n        result.path = hostAddress.socketPath;\n        return result;\n    }\n    else if (typeof hostAddress.host === 'string') {\n        result.host = hostAddress.host;\n        result.port = hostAddress.port;\n        return result;\n    }\n    else {\n        // This should never happen since we set up HostAddresses\n        // But if we don't throw here the socket could hang until timeout\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError(`Unexpected HostAddress ${JSON.stringify(hostAddress)}`);\n    }\n}\nfunction parseSslOptions(options) {\n    const result = parseConnectOptions(options);\n    // Merge in valid SSL options\n    for (const name of exports.LEGAL_TLS_SOCKET_OPTIONS) {\n        if (options[name] != null) {\n            result[name] = options[name];\n        }\n    }\n    if (options.existingSocket) {\n        result.socket = options.existingSocket;\n    }\n    // Set default sni servername to be the same as host\n    if (result.servername == null && result.host && !net.isIP(result.host)) {\n        result.servername = result.host;\n    }\n    return result;\n}\nconst SOCKET_ERROR_EVENT_LIST = ['error', 'close', 'timeout', 'parseError'];\nconst SOCKET_ERROR_EVENTS = new Set(SOCKET_ERROR_EVENT_LIST);\nfunction makeConnection(options, _callback) {\n    const useTLS = options.tls ?? false;\n    const noDelay = options.noDelay ?? true;\n    const connectTimeoutMS = options.connectTimeoutMS ?? 30000;\n    const rejectUnauthorized = options.rejectUnauthorized ?? true;\n    const existingSocket = options.existingSocket;\n    let socket;\n    const callback = function (err, ret) {\n        if (err && socket) {\n            socket.destroy();\n        }\n        _callback(err, ret);\n    };\n    if (options.proxyHost != null) {\n        // Currently, only Socks5 is supported.\n        return makeSocks5Connection({\n            ...options,\n            connectTimeoutMS // Should always be present for Socks5\n        }, callback);\n    }\n    if (useTLS) {\n        const tlsSocket = tls.connect(parseSslOptions(options));\n        if (typeof tlsSocket.disableRenegotiation === 'function') {\n            tlsSocket.disableRenegotiation();\n        }\n        socket = tlsSocket;\n    }\n    else if (existingSocket) {\n        // In the TLS case, parseSslOptions() sets options.socket to existingSocket,\n        // so we only need to handle the non-TLS case here (where existingSocket\n        // gives us all we need out of the box).\n        socket = existingSocket;\n    }\n    else {\n        socket = net.createConnection(parseConnectOptions(options));\n    }\n    socket.setKeepAlive(true, 300000);\n    socket.setTimeout(connectTimeoutMS);\n    socket.setNoDelay(noDelay);\n    const connectEvent = useTLS ? 'secureConnect' : 'connect';\n    let cancellationHandler;\n    function errorHandler(eventName) {\n        return (err) => {\n            SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n            if (cancellationHandler && options.cancellationToken) {\n                options.cancellationToken.removeListener('cancel', cancellationHandler);\n            }\n            socket.removeListener(connectEvent, connectHandler);\n            callback(connectionFailureError(eventName, err));\n        };\n    }\n    function connectHandler() {\n        SOCKET_ERROR_EVENTS.forEach(event => socket.removeAllListeners(event));\n        if (cancellationHandler && options.cancellationToken) {\n            options.cancellationToken.removeListener('cancel', cancellationHandler);\n        }\n        if ('authorizationError' in socket) {\n            if (socket.authorizationError && rejectUnauthorized) {\n                // TODO(NODE-5192): wrap this with a MongoError subclass\n                return callback(socket.authorizationError);\n            }\n        }\n        socket.setTimeout(0);\n        callback(undefined, socket);\n    }\n    SOCKET_ERROR_EVENTS.forEach(event => socket.once(event, errorHandler(event)));\n    if (options.cancellationToken) {\n        cancellationHandler = errorHandler('cancel');\n        options.cancellationToken.once('cancel', cancellationHandler);\n    }\n    if (existingSocket) {\n        process.nextTick(connectHandler);\n    }\n    else {\n        socket.once(connectEvent, connectHandler);\n    }\n}\nlet socks = null;\nfunction loadSocks() {\n    if (socks == null) {\n        const socksImport = (0, deps_1.getSocks)();\n        if ('kModuleError' in socksImport) {\n            throw socksImport.kModuleError;\n        }\n        socks = socksImport;\n    }\n    return socks;\n}\nfunction makeSocks5Connection(options, callback) {\n    const hostAddress = utils_1.HostAddress.fromHostPort(options.proxyHost ?? '', // proxyHost is guaranteed to set here\n    options.proxyPort ?? 1080);\n    // First, connect to the proxy server itself:\n    makeConnection({\n        ...options,\n        hostAddress,\n        tls: false,\n        proxyHost: undefined\n    }, (err, rawSocket) => {\n        if (err || !rawSocket) {\n            return callback(err);\n        }\n        const destination = parseConnectOptions(options);\n        if (typeof destination.host !== 'string' || typeof destination.port !== 'number') {\n            return callback(new error_1.MongoInvalidArgumentError('Can only make Socks5 connections to TCP hosts'));\n        }\n        try {\n            socks ??= loadSocks();\n        }\n        catch (error) {\n            return callback(error);\n        }\n        // Then, establish the Socks5 proxy connection:\n        socks.SocksClient.createConnection({\n            existing_socket: rawSocket,\n            timeout: options.connectTimeoutMS,\n            command: 'connect',\n            destination: {\n                host: destination.host,\n                port: destination.port\n            },\n            proxy: {\n                // host and port are ignored because we pass existing_socket\n                host: 'iLoveJavaScript',\n                port: 0,\n                type: 5,\n                userId: options.proxyUsername || undefined,\n                password: options.proxyPassword || undefined\n            }\n        }).then(({ socket }) => {\n            // Finally, now treat the resulting duplex stream as the\n            // socket over which we send and receive wire protocol messages:\n            makeConnection({\n                ...options,\n                existingSocket: socket,\n                proxyHost: undefined\n            }, callback);\n        }, error => callback(connectionFailureError('error', error)));\n    });\n}\nfunction connectionFailureError(type, err) {\n    switch (type) {\n        case 'error':\n            return new error_1.MongoNetworkError(error_1.MongoError.buildErrorMessage(err), { cause: err });\n        case 'timeout':\n            return new error_1.MongoNetworkTimeoutError('connection timed out');\n        case 'close':\n            return new error_1.MongoNetworkError('connection closed');\n        case 'cancel':\n            return new error_1.MongoNetworkError('connection establishment was cancelled');\n        default:\n            return new error_1.MongoNetworkError('unknown network error');\n    }\n}\n//# sourceMappingURL=connect.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/connect.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/connection.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.hasSessionSupport = exports.CryptoConnection = exports.Connection = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/../../../../../node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_monitoring_events_1 = __webpack_require__(/*! ./command_monitoring_events */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/commands.js\");\nconst message_stream_1 = __webpack_require__(/*! ./message_stream */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/message_stream.js\");\nconst stream_description_1 = __webpack_require__(/*! ./stream_description */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/stream_description.js\");\nconst shared_1 = __webpack_require__(/*! ./wire_protocol/shared */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\nconst INVALID_QUEUE_SIZE = 'Connection internal queue contains more than 1 operation description';\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n    constructor(stream, options) {\n        super();\n        this.commandAsync = (0, util_1.promisify)((ns, cmd, options, callback) => this.command(ns, cmd, options, callback));\n        this.id = options.id;\n        this.address = streamIdentifier(stream, options);\n        this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n        this.monitorCommands = options.monitorCommands;\n        this.serverApi = options.serverApi;\n        this.closed = false;\n        this[kHello] = null;\n        this[kClusterTime] = null;\n        this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n        this[kGeneration] = options.generation;\n        this[kLastUseTime] = (0, utils_1.now)();\n        // setup parser stream and message handling\n        this[kQueue] = new Map();\n        this[kMessageStream] = new message_stream_1.MessageStream({\n            ...options,\n            maxBsonMessageSize: this.hello?.maxBsonMessageSize\n        });\n        this[kStream] = stream;\n        this[kDelayedTimeoutId] = null;\n        this[kMessageStream].on('message', message => this.onMessage(message));\n        this[kMessageStream].on('error', error => this.onError(error));\n        this[kStream].on('close', () => this.onClose());\n        this[kStream].on('timeout', () => this.onTimeout());\n        this[kStream].on('error', () => {\n            /* ignore errors, listen to `close` instead */\n        });\n        // hook the message stream up to the passed in stream\n        this[kStream].pipe(this[kMessageStream]);\n        this[kMessageStream].pipe(this[kStream]);\n    }\n    get description() {\n        return this[kDescription];\n    }\n    get hello() {\n        return this[kHello];\n    }\n    // the `connect` method stores the result of the handshake hello on the connection\n    set hello(response) {\n        this[kDescription].receiveResponse(response);\n        this[kDescription] = Object.freeze(this[kDescription]);\n        // TODO: remove this, and only use the `StreamDescription` in the future\n        this[kHello] = response;\n    }\n    // Set the whether the message stream is for a monitoring connection.\n    set isMonitoringConnection(value) {\n        this[kMessageStream].isMonitoringConnection = value;\n    }\n    get isMonitoringConnection() {\n        return this[kMessageStream].isMonitoringConnection;\n    }\n    get serviceId() {\n        return this.hello?.serviceId;\n    }\n    get loadBalanced() {\n        return this.description.loadBalanced;\n    }\n    get generation() {\n        return this[kGeneration] || 0;\n    }\n    set generation(generation) {\n        this[kGeneration] = generation;\n    }\n    get idleTime() {\n        return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n    }\n    get clusterTime() {\n        return this[kClusterTime];\n    }\n    get stream() {\n        return this[kStream];\n    }\n    markAvailable() {\n        this[kLastUseTime] = (0, utils_1.now)();\n    }\n    onError(error) {\n        this.cleanup(true, error);\n    }\n    onClose() {\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(true, new error_1.MongoNetworkError(message));\n    }\n    onTimeout() {\n        this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(() => {\n            const message = `connection ${this.id} to ${this.address} timed out`;\n            const beforeHandshake = this.hello == null;\n            this.cleanup(true, new error_1.MongoNetworkTimeoutError(message, { beforeHandshake }));\n        }, 1).unref(); // No need for this timer to hold the event loop open\n    }\n    onMessage(message) {\n        const delayedTimeoutId = this[kDelayedTimeoutId];\n        if (delayedTimeoutId != null) {\n            (0, timers_1.clearTimeout)(delayedTimeoutId);\n            this[kDelayedTimeoutId] = null;\n        }\n        const socketTimeoutMS = this[kStream].timeout ?? 0;\n        this[kStream].setTimeout(0);\n        // always emit the message, in case we are streaming\n        this.emit('message', message);\n        let operationDescription = this[kQueue].get(message.responseTo);\n        if (!operationDescription && this.isMonitoringConnection) {\n            // This is how we recover when the initial hello's requestId is not\n            // the responseTo when hello responses have been skipped:\n            // First check if the map is of invalid size\n            if (this[kQueue].size > 1) {\n                this.cleanup(true, new error_1.MongoRuntimeError(INVALID_QUEUE_SIZE));\n            }\n            else {\n                // Get the first orphaned operation description.\n                const entry = this[kQueue].entries().next();\n                if (entry.value != null) {\n                    const [requestId, orphaned] = entry.value;\n                    // If the orphaned operation description exists then set it.\n                    operationDescription = orphaned;\n                    // Remove the entry with the bad request id from the queue.\n                    this[kQueue].delete(requestId);\n                }\n            }\n        }\n        if (!operationDescription) {\n            return;\n        }\n        const callback = operationDescription.cb;\n        // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n        // track response, however the server currently synthetically produces remote requests\n        // making the `responseTo` change on each response\n        this[kQueue].delete(message.responseTo);\n        if ('moreToCome' in message && message.moreToCome) {\n            // If the operation description check above does find an orphaned\n            // description and sets the operationDescription then this line will put one\n            // back in the queue with the correct requestId and will resolve not being able\n            // to find the next one via the responseTo of the next streaming hello.\n            this[kQueue].set(message.requestId, operationDescription);\n            this[kStream].setTimeout(socketTimeoutMS);\n        }\n        try {\n            // Pass in the entire description because it has BSON parsing options\n            message.parse(operationDescription);\n        }\n        catch (err) {\n            // If this error is generated by our own code, it will already have the correct class applied\n            // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n            // in either case, it should not be wrapped\n            callback(err);\n            return;\n        }\n        if (message.documents[0]) {\n            const document = message.documents[0];\n            const session = operationDescription.session;\n            if (session) {\n                (0, sessions_1.updateSessionFromResponse)(session, document);\n            }\n            if (document.$clusterTime) {\n                this[kClusterTime] = document.$clusterTime;\n                this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n            }\n            if (document.writeConcernError) {\n                callback(new error_1.MongoWriteConcernError(document.writeConcernError, document), document);\n                return;\n            }\n            if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n                callback(new error_1.MongoServerError(document));\n                return;\n            }\n        }\n        callback(undefined, message.documents[0]);\n    }\n    destroy(options, callback) {\n        if (this.closed) {\n            process.nextTick(() => callback?.());\n            return;\n        }\n        if (typeof callback === 'function') {\n            this.once('close', () => process.nextTick(() => callback()));\n        }\n        // load balanced mode requires that these listeners remain on the connection\n        // after cleanup on timeouts, errors or close so we remove them before calling\n        // cleanup.\n        this.removeAllListeners(Connection.PINNED);\n        this.removeAllListeners(Connection.UNPINNED);\n        const message = `connection ${this.id} to ${this.address} closed`;\n        this.cleanup(options.force, new error_1.MongoNetworkError(message));\n    }\n    /**\n     * A method that cleans up the connection.  When `force` is true, this method\n     * forcibly destroys the socket.\n     *\n     * If an error is provided, any in-flight operations will be closed with the error.\n     *\n     * This method does nothing if the connection is already closed.\n     */\n    cleanup(force, error) {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        const completeCleanup = () => {\n            for (const op of this[kQueue].values()) {\n                op.cb(error);\n            }\n            this[kQueue].clear();\n            this.emit(Connection.CLOSE);\n        };\n        this[kStream].removeAllListeners();\n        this[kMessageStream].removeAllListeners();\n        this[kMessageStream].destroy();\n        if (force) {\n            this[kStream].destroy();\n            completeCleanup();\n            return;\n        }\n        if (!this[kStream].writableEnded) {\n            this[kStream].end(() => {\n                this[kStream].destroy();\n                completeCleanup();\n            });\n        }\n        else {\n            completeCleanup();\n        }\n    }\n    command(ns, command, options, callback) {\n        let cmd = { ...command };\n        const readPreference = (0, shared_1.getReadPreference)(options);\n        const shouldUseOpMsg = supportsOpMsg(this);\n        const session = options?.session;\n        let clusterTime = this.clusterTime;\n        if (this.serverApi) {\n            const { version, strict, deprecationErrors } = this.serverApi;\n            cmd.apiVersion = version;\n            if (strict != null)\n                cmd.apiStrict = strict;\n            if (deprecationErrors != null)\n                cmd.apiDeprecationErrors = deprecationErrors;\n        }\n        if (hasSessionSupport(this) && session) {\n            if (session.clusterTime &&\n                clusterTime &&\n                session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n                clusterTime = session.clusterTime;\n            }\n            const err = (0, sessions_1.applySession)(session, cmd, options);\n            if (err) {\n                return callback(err);\n            }\n        }\n        else if (session?.explicit) {\n            return callback(new error_1.MongoCompatibilityError('Current topology does not support sessions'));\n        }\n        // if we have a known cluster time, gossip it\n        if (clusterTime) {\n            cmd.$clusterTime = clusterTime;\n        }\n        if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n            cmd = {\n                $query: cmd,\n                $readPreference: readPreference.toJSON()\n            };\n        }\n        const commandOptions = Object.assign({\n            numberToSkip: 0,\n            numberToReturn: -1,\n            checkKeys: false,\n            // This value is not overridable\n            secondaryOk: readPreference.secondaryOk()\n        }, options);\n        const cmdNs = `${ns.db}.$cmd`;\n        const message = shouldUseOpMsg\n            ? new commands_1.Msg(cmdNs, cmd, commandOptions)\n            : new commands_1.Query(cmdNs, cmd, commandOptions);\n        try {\n            write(this, message, commandOptions, callback);\n        }\n        catch (err) {\n            callback(err);\n        }\n    }\n}\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\nexports.Connection = Connection;\n/** @internal */\nclass CryptoConnection extends Connection {\n    constructor(stream, options) {\n        super(stream, options);\n        this[kAutoEncrypter] = options.autoEncrypter;\n    }\n    /** @internal @override */\n    command(ns, cmd, options, callback) {\n        const autoEncrypter = this[kAutoEncrypter];\n        if (!autoEncrypter) {\n            return callback(new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n        }\n        const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n        if (serverWireVersion === 0) {\n            // This means the initial handshake hasn't happened yet\n            return super.command(ns, cmd, options, callback);\n        }\n        if (serverWireVersion < 8) {\n            callback(new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n            return;\n        }\n        // Save sort or indexKeys based on the command being run\n        // the encrypt API serializes our JS objects to BSON to pass to the native code layer\n        // and then deserializes the encrypted result, the protocol level components\n        // of the command (ex. sort) are then converted to JS objects potentially losing\n        // import key order information. These fields are never encrypted so we can save the values\n        // from before the encryption and replace them after encryption has been performed\n        const sort = cmd.find || cmd.findAndModify ? cmd.sort : null;\n        const indexKeys = cmd.createIndexes\n            ? cmd.indexes.map((index) => index.key)\n            : null;\n        autoEncrypter.encrypt(ns.toString(), cmd, options).then(encrypted => {\n            // Replace the saved values\n            if (sort != null && (cmd.find || cmd.findAndModify)) {\n                encrypted.sort = sort;\n            }\n            if (indexKeys != null && cmd.createIndexes) {\n                for (const [offset, index] of indexKeys.entries()) {\n                    // @ts-expect-error `encrypted` is a generic \"command\", but we've narrowed for only `createIndexes` commands here\n                    encrypted.indexes[offset].key = index;\n                }\n            }\n            super.command(ns, encrypted, options, (err, response) => {\n                if (err || response == null) {\n                    callback(err, response);\n                    return;\n                }\n                autoEncrypter.decrypt(response, options).then(res => callback(undefined, res), err => callback(err));\n            });\n        }, err => {\n            if (err) {\n                callback(err, null);\n            }\n        });\n    }\n}\nexports.CryptoConnection = CryptoConnection;\n/** @internal */\nfunction hasSessionSupport(conn) {\n    const description = conn.description;\n    return description.logicalSessionTimeoutMinutes != null;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction supportsOpMsg(conn) {\n    const description = conn.description;\n    if (description == null) {\n        return false;\n    }\n    return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\nfunction streamIdentifier(stream, options) {\n    if (options.proxyHost) {\n        // If proxy options are specified, the properties of `stream` itself\n        // will not accurately reflect what endpoint this is connected to.\n        return options.hostAddress.toString();\n    }\n    const { remoteAddress, remotePort } = stream;\n    if (typeof remoteAddress === 'string' && typeof remotePort === 'number') {\n        return utils_1.HostAddress.fromHostPort(remoteAddress, remotePort).toString();\n    }\n    return (0, utils_1.uuidV4)().toString('hex');\n}\nfunction write(conn, command, options, callback) {\n    options = options ?? {};\n    const operationDescription = {\n        requestId: command.requestId,\n        cb: callback,\n        session: options.session,\n        noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n        documentsReturnedIn: options.documentsReturnedIn,\n        // for BSON parsing\n        useBigInt64: typeof options.useBigInt64 === 'boolean' ? options.useBigInt64 : false,\n        promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n        promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n        promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n        bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n        enableUtf8Validation: typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n        raw: typeof options.raw === 'boolean' ? options.raw : false,\n        started: 0\n    };\n    if (conn[kDescription] && conn[kDescription].compressor) {\n        operationDescription.agreedCompressor = conn[kDescription].compressor;\n        if (conn[kDescription].zlibCompressionLevel) {\n            operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n        }\n    }\n    if (typeof options.socketTimeoutMS === 'number') {\n        conn[kStream].setTimeout(options.socketTimeoutMS);\n    }\n    else if (conn.socketTimeoutMS !== 0) {\n        conn[kStream].setTimeout(conn.socketTimeoutMS);\n    }\n    // if command monitoring is enabled we need to modify the callback here\n    if (conn.monitorCommands) {\n        conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n        operationDescription.started = (0, utils_1.now)();\n        operationDescription.cb = (err, reply) => {\n            // Command monitoring spec states that if ok is 1, then we must always emit\n            // a command succeeded event, even if there's an error. Write concern errors\n            // will have an ok: 1 in their reply.\n            if (err && reply?.ok !== 1) {\n                conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n            }\n            else {\n                if (reply && (reply.ok === 0 || reply.$err)) {\n                    conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n                }\n                else {\n                    conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n                }\n            }\n            if (typeof callback === 'function') {\n                // Since we're passing through the reply with the write concern error now, we\n                // need it not to be provided to the original callback in this case so\n                // retryability does not get tricked into thinking the command actually\n                // succeeded.\n                callback(err, err instanceof error_1.MongoWriteConcernError ? undefined : reply);\n            }\n        };\n    }\n    if (!operationDescription.noResponse) {\n        conn[kQueue].set(operationDescription.requestId, operationDescription);\n    }\n    try {\n        conn[kMessageStream].writeCommand(command, operationDescription);\n    }\n    catch (e) {\n        if (!operationDescription.noResponse) {\n            conn[kQueue].delete(operationDescription.requestId);\n            operationDescription.cb(e);\n            return;\n        }\n    }\n    if (operationDescription.noResponse) {\n        operationDescription.cb();\n    }\n}\n//# sourceMappingURL=connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection_pool.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/connection_pool.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPool = exports.PoolState = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst connect_1 = __webpack_require__(/*! ./connect */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_events_1 = __webpack_require__(/*! ./connection_pool_events */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/errors.js\");\nconst metrics_1 = __webpack_require__(/*! ./metrics */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/metrics.js\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n    paused: 'paused',\n    ready: 'ready',\n    closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n    constructor(server, options) {\n        super();\n        this.options = Object.freeze({\n            ...options,\n            connectionType: connection_1.Connection,\n            maxPoolSize: options.maxPoolSize ?? 100,\n            minPoolSize: options.minPoolSize ?? 0,\n            maxConnecting: options.maxConnecting ?? 2,\n            maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n            waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n            minPoolSizeCheckFrequencyMS: options.minPoolSizeCheckFrequencyMS ?? 100,\n            autoEncrypter: options.autoEncrypter,\n            metadata: options.metadata\n        });\n        if (this.options.minPoolSize > this.options.maxPoolSize) {\n            throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n        }\n        this[kPoolState] = exports.PoolState.paused;\n        this[kServer] = server;\n        this[kConnections] = new utils_1.List();\n        this[kPending] = 0;\n        this[kCheckedOut] = new Set();\n        this[kMinPoolSizeTimer] = undefined;\n        this[kGeneration] = 0;\n        this[kServiceGenerations] = new Map();\n        this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kWaitQueue] = new utils_1.List();\n        this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n        this[kProcessingWaitQueue] = false;\n        this.mongoLogger = this[kServer].topology.client.mongoLogger;\n        this.component = 'connection';\n        process.nextTick(() => {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n        });\n    }\n    /** The address of the endpoint the pool is connected to */\n    get address() {\n        return this.options.hostAddress.toString();\n    }\n    /**\n     * Check if the pool has been closed\n     *\n     * TODO(NODE-3263): We can remove this property once shell no longer needs it\n     */\n    get closed() {\n        return this[kPoolState] === exports.PoolState.closed;\n    }\n    /** An integer representing the SDAM generation of the pool */\n    get generation() {\n        return this[kGeneration];\n    }\n    /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n    get totalConnectionCount() {\n        return (this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount);\n    }\n    /** An integer expressing how many connections are currently available in the pool. */\n    get availableConnectionCount() {\n        return this[kConnections].length;\n    }\n    get pendingConnectionCount() {\n        return this[kPending];\n    }\n    get currentCheckedOutCount() {\n        return this[kCheckedOut].size;\n    }\n    get waitQueueSize() {\n        return this[kWaitQueue].length;\n    }\n    get loadBalanced() {\n        return this.options.loadBalanced;\n    }\n    get serviceGenerations() {\n        return this[kServiceGenerations];\n    }\n    get serverError() {\n        return this[kServer].description.error;\n    }\n    /**\n     * This is exposed ONLY for use in mongosh, to enable\n     * killing all connections if a user quits the shell with\n     * operations in progress.\n     *\n     * This property may be removed as a part of NODE-3263.\n     */\n    get checkedOutConnections() {\n        return this[kCheckedOut];\n    }\n    /**\n     * Get the metrics information for the pool when a wait queue timeout occurs.\n     */\n    waitQueueErrorMetrics() {\n        return this[kMetrics].info(this.options.maxPoolSize);\n    }\n    /**\n     * Set the pool state to \"ready\"\n     */\n    ready() {\n        if (this[kPoolState] !== exports.PoolState.paused) {\n            return;\n        }\n        this[kPoolState] = exports.PoolState.ready;\n        this.emitAndLog(ConnectionPool.CONNECTION_POOL_READY, new connection_pool_events_1.ConnectionPoolReadyEvent(this));\n        (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n        this.ensureMinPoolSize();\n    }\n    /**\n     * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n     * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n     * explicitly destroyed by the new owner.\n     */\n    checkOut(callback) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n        const waitQueueMember = { callback };\n        const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n        if (waitQueueTimeoutMS) {\n            waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n                waitQueueMember[kCancelled] = true;\n                waitQueueMember.timer = undefined;\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n                waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced\n                    ? this.waitQueueErrorMetrics()\n                    : 'Timed out while checking out a connection from connection pool', this.address));\n            }, waitQueueTimeoutMS);\n        }\n        this[kWaitQueue].push(waitQueueMember);\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Check a connection into the pool.\n     *\n     * @param connection - The connection to check in\n     */\n    checkIn(connection) {\n        if (!this[kCheckedOut].has(connection)) {\n            return;\n        }\n        const poolClosed = this.closed;\n        const stale = this.connectionIsStale(connection);\n        const willDestroy = !!(poolClosed || stale || connection.closed);\n        if (!willDestroy) {\n            connection.markAvailable();\n            this[kConnections].unshift(connection);\n        }\n        this[kCheckedOut].delete(connection);\n        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n        if (willDestroy) {\n            const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n            this.destroyConnection(connection, reason);\n        }\n        process.nextTick(() => this.processWaitQueue());\n    }\n    /**\n     * Clear the pool\n     *\n     * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n     * previous generation will eventually be pruned during subsequent checkouts.\n     */\n    clear(options = {}) {\n        if (this.closed) {\n            return;\n        }\n        // handle load balanced case\n        if (this.loadBalanced) {\n            const { serviceId } = options;\n            if (!serviceId) {\n                throw new error_1.MongoRuntimeError('ConnectionPool.clear() called in load balanced mode with no serviceId.');\n            }\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            // Only need to worry if the generation exists, since it should\n            // always be there but typescript needs the check.\n            if (generation == null) {\n                throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n            }\n            else {\n                // Increment the generation for the service id.\n                this.serviceGenerations.set(sid, generation + 1);\n            }\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, { serviceId }));\n            return;\n        }\n        // handle non load-balanced case\n        const interruptInUseConnections = options.interruptInUseConnections ?? false;\n        const oldGeneration = this[kGeneration];\n        this[kGeneration] += 1;\n        const alreadyPaused = this[kPoolState] === exports.PoolState.paused;\n        this[kPoolState] = exports.PoolState.paused;\n        this.clearMinPoolSizeTimer();\n        if (!alreadyPaused) {\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, {\n                interruptInUseConnections\n            }));\n        }\n        if (interruptInUseConnections) {\n            process.nextTick(() => this.interruptInUseConnections(oldGeneration));\n        }\n        this.processWaitQueue();\n    }\n    /**\n     * Closes all stale in-use connections in the pool with a resumable PoolClearedOnNetworkError.\n     *\n     * Only connections where `connection.generation <= minGeneration` are killed.\n     */\n    interruptInUseConnections(minGeneration) {\n        for (const connection of this[kCheckedOut]) {\n            if (connection.generation <= minGeneration) {\n                this.checkIn(connection);\n                connection.onError(new errors_1.PoolClearedOnNetworkError(this));\n            }\n        }\n    }\n    close(_options, _cb) {\n        let options = _options;\n        const callback = (_cb ?? _options);\n        if (typeof options === 'function') {\n            options = {};\n        }\n        options = Object.assign({ force: false }, options);\n        if (this.closed) {\n            return callback();\n        }\n        // immediately cancel any in-flight connections\n        this[kCancellationToken].emit('cancel');\n        // end the connection counter\n        if (typeof this[kConnectionCounter].return === 'function') {\n            this[kConnectionCounter].return(undefined);\n        }\n        this[kPoolState] = exports.PoolState.closed;\n        this.clearMinPoolSizeTimer();\n        this.processWaitQueue();\n        (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n            this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n            conn.destroy({ force: !!options.force }, cb);\n        }, err => {\n            this[kConnections].clear();\n            this.emitAndLog(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n            callback(err);\n        });\n    }\n    /**\n     * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n     * has completed by calling back.\n     *\n     * NOTE: please note the required signature of `fn`\n     *\n     * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n     *   In these cases we pass the connection in to this method to ensure it is used and a new\n     *   connection is not checked out.\n     *\n     * @param conn - A pinned connection for use in load balancing mode.\n     * @param fn - A function which operates on a managed connection\n     * @param callback - The original callback\n     */\n    withConnection(conn, fn, callback) {\n        if (conn) {\n            // use the provided connection, and do _not_ check it in after execution\n            fn(undefined, conn, (fnErr, result) => {\n                if (fnErr) {\n                    return this.withReauthentication(fnErr, conn, fn, callback);\n                }\n                callback(undefined, result);\n            });\n            return;\n        }\n        this.checkOut((err, conn) => {\n            // don't callback with `err` here, we might want to act upon it inside `fn`\n            fn(err, conn, (fnErr, result) => {\n                if (fnErr) {\n                    if (conn) {\n                        this.withReauthentication(fnErr, conn, fn, callback);\n                    }\n                    else {\n                        callback(fnErr);\n                    }\n                }\n                else {\n                    callback(undefined, result);\n                }\n                if (conn) {\n                    this.checkIn(conn);\n                }\n            });\n        });\n    }\n    withReauthentication(fnErr, conn, fn, callback) {\n        if (fnErr instanceof error_1.MongoError && fnErr.code === error_1.MONGODB_ERROR_CODES.Reauthenticate) {\n            this.reauthenticate(conn, fn, (error, res) => {\n                if (error) {\n                    return callback(error);\n                }\n                callback(undefined, res);\n            });\n        }\n        else {\n            callback(fnErr);\n        }\n    }\n    /**\n     * Reauthenticate on the same connection and then retry the operation.\n     */\n    reauthenticate(connection, fn, callback) {\n        const authContext = connection.authContext;\n        if (!authContext) {\n            return callback(new error_1.MongoRuntimeError('No auth context found on connection.'));\n        }\n        const credentials = authContext.credentials;\n        if (!credentials) {\n            return callback(new error_1.MongoMissingCredentialsError('Connection is missing credentials when asked to reauthenticate'));\n        }\n        const resolvedCredentials = credentials.resolveAuthMechanism(connection.hello || undefined);\n        const provider = connect_1.AUTH_PROVIDERS.get(resolvedCredentials.mechanism);\n        if (!provider) {\n            return callback(new error_1.MongoMissingCredentialsError(`Reauthenticate failed due to no auth provider for ${credentials.mechanism}`));\n        }\n        provider.reauth(authContext).then(() => {\n            fn(undefined, connection, (fnErr, fnResult) => {\n                if (fnErr) {\n                    return callback(fnErr);\n                }\n                callback(undefined, fnResult);\n            });\n        }, error => callback(error));\n    }\n    /** Clear the min pool size timer */\n    clearMinPoolSizeTimer() {\n        const minPoolSizeTimer = this[kMinPoolSizeTimer];\n        if (minPoolSizeTimer) {\n            (0, timers_1.clearTimeout)(minPoolSizeTimer);\n        }\n    }\n    destroyConnection(connection, reason) {\n        this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n        // destroy the connection\n        process.nextTick(() => connection.destroy({ force: false }));\n    }\n    connectionIsStale(connection) {\n        const serviceId = connection.serviceId;\n        if (this.loadBalanced && serviceId) {\n            const sid = serviceId.toHexString();\n            const generation = this.serviceGenerations.get(sid);\n            return connection.generation !== generation;\n        }\n        return connection.generation !== this[kGeneration];\n    }\n    connectionIsIdle(connection) {\n        return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n    }\n    /**\n     * Destroys a connection if the connection is perished.\n     *\n     * @returns `true` if the connection was destroyed, `false` otherwise.\n     */\n    destroyConnectionIfPerished(connection) {\n        const isStale = this.connectionIsStale(connection);\n        const isIdle = this.connectionIsIdle(connection);\n        if (!isStale && !isIdle && !connection.closed) {\n            return false;\n        }\n        const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n        this.destroyConnection(connection, reason);\n        return true;\n    }\n    createConnection(callback) {\n        const connectOptions = {\n            ...this.options,\n            id: this[kConnectionCounter].next().value,\n            generation: this[kGeneration],\n            cancellationToken: this[kCancellationToken]\n        };\n        this[kPending]++;\n        // This is our version of a \"virtual\" no-I/O connection as the spec requires\n        this.emitAndLog(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, { id: connectOptions.id }));\n        (0, connect_1.connect)(connectOptions, (err, connection) => {\n            if (err || !connection) {\n                this[kPending]--;\n                this.emitAndLog(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, { id: connectOptions.id, serviceId: undefined }, 'error', \n                // TODO(NODE-5192): Remove this cast\n                err));\n                if (err instanceof error_1.MongoNetworkError || err instanceof error_1.MongoServerError) {\n                    err.connectionGeneration = connectOptions.generation;\n                }\n                callback(err ?? new error_1.MongoRuntimeError('Connection creation failed without error'));\n                return;\n            }\n            // The pool might have closed since we started trying to create a connection\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                this[kPending]--;\n                connection.destroy({ force: true });\n                callback(this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this));\n                return;\n            }\n            // forward all events from the connection to the pool\n            for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n                connection.on(event, (e) => this.emit(event, e));\n            }\n            if (this.loadBalanced) {\n                connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n                connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n                const serviceId = connection.serviceId;\n                if (serviceId) {\n                    let generation;\n                    const sid = serviceId.toHexString();\n                    if ((generation = this.serviceGenerations.get(sid))) {\n                        connection.generation = generation;\n                    }\n                    else {\n                        this.serviceGenerations.set(sid, 0);\n                        connection.generation = 0;\n                    }\n                }\n            }\n            connection.markAvailable();\n            this.emitAndLog(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n            this[kPending]--;\n            callback(undefined, connection);\n            return;\n        });\n    }\n    ensureMinPoolSize() {\n        const minPoolSize = this.options.minPoolSize;\n        if (this[kPoolState] !== exports.PoolState.ready || minPoolSize === 0) {\n            return;\n        }\n        this[kConnections].prune(connection => this.destroyConnectionIfPerished(connection));\n        if (this.totalConnectionCount < minPoolSize &&\n            this.pendingConnectionCount < this.options.maxConnecting) {\n            // NOTE: ensureMinPoolSize should not try to get all the pending\n            // connection permits because that potentially delays the availability of\n            // the connection to a checkout request\n            this.createConnection((err, connection) => {\n                if (err) {\n                    this[kServer].handleError(err);\n                }\n                if (!err && connection) {\n                    this[kConnections].push(connection);\n                    process.nextTick(() => this.processWaitQueue());\n                }\n                if (this[kPoolState] === exports.PoolState.ready) {\n                    (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n                    this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n                }\n            });\n        }\n        else {\n            (0, timers_1.clearTimeout)(this[kMinPoolSizeTimer]);\n            this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), this.options.minPoolSizeCheckFrequencyMS);\n        }\n    }\n    processWaitQueue() {\n        if (this[kProcessingWaitQueue]) {\n            return;\n        }\n        this[kProcessingWaitQueue] = true;\n        while (this.waitQueueSize) {\n            const waitQueueMember = this[kWaitQueue].first();\n            if (!waitQueueMember) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (waitQueueMember[kCancelled]) {\n                this[kWaitQueue].shift();\n                continue;\n            }\n            if (this[kPoolState] !== exports.PoolState.ready) {\n                const reason = this.closed ? 'poolClosed' : 'connectionError';\n                const error = this.closed ? new errors_1.PoolClosedError(this) : new errors_1.PoolClearedError(this);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, reason, error));\n                if (waitQueueMember.timer) {\n                    (0, timers_1.clearTimeout)(waitQueueMember.timer);\n                }\n                this[kWaitQueue].shift();\n                waitQueueMember.callback(error);\n                continue;\n            }\n            if (!this.availableConnectionCount) {\n                break;\n            }\n            const connection = this[kConnections].shift();\n            if (!connection) {\n                break;\n            }\n            if (!this.destroyConnectionIfPerished(connection)) {\n                this[kCheckedOut].add(connection);\n                this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                if (waitQueueMember.timer) {\n                    (0, timers_1.clearTimeout)(waitQueueMember.timer);\n                }\n                this[kWaitQueue].shift();\n                waitQueueMember.callback(undefined, connection);\n            }\n        }\n        const { maxPoolSize, maxConnecting } = this.options;\n        while (this.waitQueueSize > 0 &&\n            this.pendingConnectionCount < maxConnecting &&\n            (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n            const waitQueueMember = this[kWaitQueue].shift();\n            if (!waitQueueMember || waitQueueMember[kCancelled]) {\n                continue;\n            }\n            this.createConnection((err, connection) => {\n                if (waitQueueMember[kCancelled]) {\n                    if (!err && connection) {\n                        this[kConnections].push(connection);\n                    }\n                }\n                else {\n                    if (err) {\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, \n                        // TODO(NODE-5192): Remove this cast\n                        new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'connectionError', err));\n                    }\n                    else if (connection) {\n                        this[kCheckedOut].add(connection);\n                        this.emitAndLog(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n                    }\n                    if (waitQueueMember.timer) {\n                        (0, timers_1.clearTimeout)(waitQueueMember.timer);\n                    }\n                    waitQueueMember.callback(err, connection);\n                }\n                process.nextTick(() => this.processWaitQueue());\n            });\n        }\n        this[kProcessingWaitQueue] = false;\n    }\n}\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted each time the connection pool is marked ready\n * @event\n */\nConnectionPool.CONNECTION_POOL_READY = constants_1.CONNECTION_POOL_READY;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;\nexports.ConnectionPool = ConnectionPool;\n//# sourceMappingURL=connection_pool.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection_pool.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection_pool_events.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/connection_pool_events.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolClearedEvent = exports.ConnectionCheckedInEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionClosedEvent = exports.ConnectionReadyEvent = exports.ConnectionCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolReadyEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolMonitoringEvent = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nclass ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        this.time = new Date();\n        this.address = pool.address;\n    }\n}\nexports.ConnectionPoolMonitoringEvent = ConnectionPoolMonitoringEvent;\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nclass ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CREATED;\n        const { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS } = pool.options;\n        this.options = { maxConnecting, maxPoolSize, minPoolSize, maxIdleTimeMS, waitQueueTimeoutMS };\n    }\n}\nexports.ConnectionPoolCreatedEvent = ConnectionPoolCreatedEvent;\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nclass ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_READY;\n    }\n}\nexports.ConnectionPoolReadyEvent = ConnectionPoolReadyEvent;\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nclass ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLOSED;\n    }\n}\nexports.ConnectionPoolClosedEvent = ConnectionPoolClosedEvent;\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nclass ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CREATED;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCreatedEvent = ConnectionCreatedEvent;\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nclass ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_READY;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionReadyEvent = ConnectionReadyEvent;\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nclass ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CLOSED;\n        this.connectionId = connection.id;\n        this.reason = reason;\n        this.serviceId = connection.serviceId;\n        this.error = error ?? null;\n    }\n}\nexports.ConnectionClosedEvent = ConnectionClosedEvent;\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nclass ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_STARTED;\n    }\n}\nexports.ConnectionCheckOutStartedEvent = ConnectionCheckOutStartedEvent;\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nclass ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, reason, error) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECK_OUT_FAILED;\n        this.reason = reason;\n        this.error = error;\n    }\n}\nexports.ConnectionCheckOutFailedEvent = ConnectionCheckOutFailedEvent;\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_OUT;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedOutEvent = ConnectionCheckedOutEvent;\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nclass ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, connection) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_CHECKED_IN;\n        this.connectionId = connection.id;\n    }\n}\nexports.ConnectionCheckedInEvent = ConnectionCheckedInEvent;\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nclass ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /** @internal */\n    constructor(pool, options = {}) {\n        super(pool);\n        /** @internal */\n        this.name = constants_1.CONNECTION_POOL_CLEARED;\n        this.serviceId = options.serviceId;\n        this.interruptInUseConnections = options.interruptInUseConnections;\n    }\n}\nexports.ConnectionPoolClearedEvent = ConnectionPoolClearedEvent;\n//# sourceMappingURL=connection_pool_events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvY29ubmVjdGlvbl9wb29sX2V2ZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRyxnQ0FBZ0MsR0FBRyxpQ0FBaUMsR0FBRyxxQ0FBcUMsR0FBRyxzQ0FBc0MsR0FBRyw2QkFBNkIsR0FBRyw0QkFBNEIsR0FBRyw4QkFBOEIsR0FBRyxpQ0FBaUMsR0FBRyxnQ0FBZ0MsR0FBRyxrQ0FBa0MsR0FBRyxxQ0FBcUM7QUFDOWEsb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsNkVBQTZFO0FBQzdGLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9jb25uZWN0aW9uX3Bvb2xfZXZlbnRzLmpzPzhiOWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sQ2xlYXJlZEV2ZW50ID0gZXhwb3J0cy5Db25uZWN0aW9uQ2hlY2tlZEluRXZlbnQgPSBleHBvcnRzLkNvbm5lY3Rpb25DaGVja2VkT3V0RXZlbnQgPSBleHBvcnRzLkNvbm5lY3Rpb25DaGVja091dEZhaWxlZEV2ZW50ID0gZXhwb3J0cy5Db25uZWN0aW9uQ2hlY2tPdXRTdGFydGVkRXZlbnQgPSBleHBvcnRzLkNvbm5lY3Rpb25DbG9zZWRFdmVudCA9IGV4cG9ydHMuQ29ubmVjdGlvblJlYWR5RXZlbnQgPSBleHBvcnRzLkNvbm5lY3Rpb25DcmVhdGVkRXZlbnQgPSBleHBvcnRzLkNvbm5lY3Rpb25Qb29sQ2xvc2VkRXZlbnQgPSBleHBvcnRzLkNvbm5lY3Rpb25Qb29sUmVhZHlFdmVudCA9IGV4cG9ydHMuQ29ubmVjdGlvblBvb2xDcmVhdGVkRXZlbnQgPSBleHBvcnRzLkNvbm5lY3Rpb25Qb29sTW9uaXRvcmluZ0V2ZW50ID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuLyoqXG4gKiBUaGUgYmFzZSBleHBvcnQgY2xhc3MgZm9yIGFsbCBtb25pdG9yaW5nIGV2ZW50cyBwdWJsaXNoZWQgZnJvbSB0aGUgY29ubmVjdGlvbiBwb29sXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgQ29ubmVjdGlvblBvb2xNb25pdG9yaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sKSB7XG4gICAgICAgIHRoaXMudGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IHBvb2wuYWRkcmVzcztcbiAgICB9XG59XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sTW9uaXRvcmluZ0V2ZW50ID0gQ29ubmVjdGlvblBvb2xNb25pdG9yaW5nRXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIGEgY29ubmVjdGlvbiBwb29sIGlzIGNyZWF0ZWRcbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBDb25uZWN0aW9uUG9vbENyZWF0ZWRFdmVudCBleHRlbmRzIENvbm5lY3Rpb25Qb29sTW9uaXRvcmluZ0V2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IocG9vbCkge1xuICAgICAgICBzdXBlcihwb29sKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5DT05ORUNUSU9OX1BPT0xfQ1JFQVRFRDtcbiAgICAgICAgY29uc3QgeyBtYXhDb25uZWN0aW5nLCBtYXhQb29sU2l6ZSwgbWluUG9vbFNpemUsIG1heElkbGVUaW1lTVMsIHdhaXRRdWV1ZVRpbWVvdXRNUyB9ID0gcG9vbC5vcHRpb25zO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IG1heENvbm5lY3RpbmcsIG1heFBvb2xTaXplLCBtaW5Qb29sU2l6ZSwgbWF4SWRsZVRpbWVNUywgd2FpdFF1ZXVlVGltZW91dE1TIH07XG4gICAgfVxufVxuZXhwb3J0cy5Db25uZWN0aW9uUG9vbENyZWF0ZWRFdmVudCA9IENvbm5lY3Rpb25Qb29sQ3JlYXRlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBhIGNvbm5lY3Rpb24gcG9vbCBpcyByZWFkeVxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIENvbm5lY3Rpb25Qb29sUmVhZHlFdmVudCBleHRlbmRzIENvbm5lY3Rpb25Qb29sTW9uaXRvcmluZ0V2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IocG9vbCkge1xuICAgICAgICBzdXBlcihwb29sKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5DT05ORUNUSU9OX1BPT0xfUkVBRFk7XG4gICAgfVxufVxuZXhwb3J0cy5Db25uZWN0aW9uUG9vbFJlYWR5RXZlbnQgPSBDb25uZWN0aW9uUG9vbFJlYWR5RXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIGEgY29ubmVjdGlvbiBwb29sIGlzIGNsb3NlZFxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIENvbm5lY3Rpb25Qb29sQ2xvc2VkRXZlbnQgZXh0ZW5kcyBDb25uZWN0aW9uUG9vbE1vbml0b3JpbmdFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wpIHtcbiAgICAgICAgc3VwZXIocG9vbCk7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuQ09OTkVDVElPTl9QT09MX0NMT1NFRDtcbiAgICB9XG59XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sQ2xvc2VkRXZlbnQgPSBDb25uZWN0aW9uUG9vbENsb3NlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBhIGNvbm5lY3Rpb24gcG9vbCBjcmVhdGVzIGEgbmV3IGNvbm5lY3Rpb25cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBDb25uZWN0aW9uQ3JlYXRlZEV2ZW50IGV4dGVuZHMgQ29ubmVjdGlvblBvb2xNb25pdG9yaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sLCBjb25uZWN0aW9uKSB7XG4gICAgICAgIHN1cGVyKHBvb2wpO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLkNPTk5FQ1RJT05fQ1JFQVRFRDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uLmlkO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdGlvbkNyZWF0ZWRFdmVudCA9IENvbm5lY3Rpb25DcmVhdGVkRXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIGEgY29ubmVjdGlvbiBpcyByZWFkeSBmb3IgdXNlXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgQ29ubmVjdGlvblJlYWR5RXZlbnQgZXh0ZW5kcyBDb25uZWN0aW9uUG9vbE1vbml0b3JpbmdFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wsIGNvbm5lY3Rpb24pIHtcbiAgICAgICAgc3VwZXIocG9vbCk7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uYW1lID0gY29uc3RhbnRzXzEuQ09OTkVDVElPTl9SRUFEWTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uLmlkO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdGlvblJlYWR5RXZlbnQgPSBDb25uZWN0aW9uUmVhZHlFdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gYSBjb25uZWN0aW9uIGlzIGNsb3NlZFxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIENvbm5lY3Rpb25DbG9zZWRFdmVudCBleHRlbmRzIENvbm5lY3Rpb25Qb29sTW9uaXRvcmluZ0V2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IocG9vbCwgY29ubmVjdGlvbiwgcmVhc29uLCBlcnJvcikge1xuICAgICAgICBzdXBlcihwb29sKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5DT05ORUNUSU9OX0NMT1NFRDtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uLmlkO1xuICAgICAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgICAgICAgdGhpcy5zZXJ2aWNlSWQgPSBjb25uZWN0aW9uLnNlcnZpY2VJZDtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yID8/IG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5Db25uZWN0aW9uQ2xvc2VkRXZlbnQgPSBDb25uZWN0aW9uQ2xvc2VkRXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIGEgcmVxdWVzdCB0byBjaGVjayBhIGNvbm5lY3Rpb24gb3V0IGJlZ2luc1xuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIENvbm5lY3Rpb25DaGVja091dFN0YXJ0ZWRFdmVudCBleHRlbmRzIENvbm5lY3Rpb25Qb29sTW9uaXRvcmluZ0V2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IocG9vbCkge1xuICAgICAgICBzdXBlcihwb29sKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5DT05ORUNUSU9OX0NIRUNLX09VVF9TVEFSVEVEO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdGlvbkNoZWNrT3V0U3RhcnRlZEV2ZW50ID0gQ29ubmVjdGlvbkNoZWNrT3V0U3RhcnRlZEV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBhIHJlcXVlc3QgdG8gY2hlY2sgYSBjb25uZWN0aW9uIG91dCBmYWlsc1xuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIENvbm5lY3Rpb25DaGVja091dEZhaWxlZEV2ZW50IGV4dGVuZHMgQ29ubmVjdGlvblBvb2xNb25pdG9yaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sLCByZWFzb24sIGVycm9yKSB7XG4gICAgICAgIHN1cGVyKHBvb2wpO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLkNPTk5FQ1RJT05fQ0hFQ0tfT1VUX0ZBSUxFRDtcbiAgICAgICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICB9XG59XG5leHBvcnRzLkNvbm5lY3Rpb25DaGVja091dEZhaWxlZEV2ZW50ID0gQ29ubmVjdGlvbkNoZWNrT3V0RmFpbGVkRXZlbnQ7XG4vKipcbiAqIEFuIGV2ZW50IHB1Ymxpc2hlZCB3aGVuIGEgY29ubmVjdGlvbiBpcyBjaGVja2VkIG91dCBvZiB0aGUgY29ubmVjdGlvbiBwb29sXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgQ29ubmVjdGlvbkNoZWNrZWRPdXRFdmVudCBleHRlbmRzIENvbm5lY3Rpb25Qb29sTW9uaXRvcmluZ0V2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IocG9vbCwgY29ubmVjdGlvbikge1xuICAgICAgICBzdXBlcihwb29sKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5DT05ORUNUSU9OX0NIRUNLRURfT1VUO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25JZCA9IGNvbm5lY3Rpb24uaWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Db25uZWN0aW9uQ2hlY2tlZE91dEV2ZW50ID0gQ29ubmVjdGlvbkNoZWNrZWRPdXRFdmVudDtcbi8qKlxuICogQW4gZXZlbnQgcHVibGlzaGVkIHdoZW4gYSBjb25uZWN0aW9uIGlzIGNoZWNrZWQgaW50byB0aGUgY29ubmVjdGlvbiBwb29sXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgQ29ubmVjdGlvbkNoZWNrZWRJbkV2ZW50IGV4dGVuZHMgQ29ubmVjdGlvblBvb2xNb25pdG9yaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sLCBjb25uZWN0aW9uKSB7XG4gICAgICAgIHN1cGVyKHBvb2wpO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMubmFtZSA9IGNvbnN0YW50c18xLkNPTk5FQ1RJT05fQ0hFQ0tFRF9JTjtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWQgPSBjb25uZWN0aW9uLmlkO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdGlvbkNoZWNrZWRJbkV2ZW50ID0gQ29ubmVjdGlvbkNoZWNrZWRJbkV2ZW50O1xuLyoqXG4gKiBBbiBldmVudCBwdWJsaXNoZWQgd2hlbiBhIGNvbm5lY3Rpb24gcG9vbCBpcyBjbGVhcmVkXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgQ29ubmVjdGlvblBvb2xDbGVhcmVkRXZlbnQgZXh0ZW5kcyBDb25uZWN0aW9uUG9vbE1vbml0b3JpbmdFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihwb29sKTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBjb25zdGFudHNfMS5DT05ORUNUSU9OX1BPT0xfQ0xFQVJFRDtcbiAgICAgICAgdGhpcy5zZXJ2aWNlSWQgPSBvcHRpb25zLnNlcnZpY2VJZDtcbiAgICAgICAgdGhpcy5pbnRlcnJ1cHRJblVzZUNvbm5lY3Rpb25zID0gb3B0aW9ucy5pbnRlcnJ1cHRJblVzZUNvbm5lY3Rpb25zO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29ubmVjdGlvblBvb2xDbGVhcmVkRXZlbnQgPSBDb25uZWN0aW9uUG9vbENsZWFyZWRFdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3Rpb25fcG9vbF9ldmVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection_pool_events.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/errors.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/errors.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WaitQueueTimeoutError = exports.PoolClearedOnNetworkError = exports.PoolClearedError = exports.PoolClosedError = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/**\n * An error indicating a connection pool is closed\n * @category Error\n */\nclass PoolClosedError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super('Attempted to check out a connection from closed connection pool');\n        this.address = pool.address;\n    }\n    get name() {\n        return 'MongoPoolClosedError';\n    }\n}\nexports.PoolClosedError = PoolClosedError;\n/**\n * An error indicating a connection pool is currently paused\n * @category Error\n */\nclass PoolClearedError extends error_1.MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool, message) {\n        const errorMessage = message\n            ? message\n            : `Connection pool for ${pool.address} was cleared because another operation failed with: \"${pool.serverError?.message}\"`;\n        super(errorMessage, pool.serverError ? { cause: pool.serverError } : undefined);\n        this.address = pool.address;\n        this.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n    }\n    get name() {\n        return 'MongoPoolClearedError';\n    }\n}\nexports.PoolClearedError = PoolClearedError;\n/**\n * An error indicating that a connection pool has been cleared after the monitor for that server timed out.\n * @category Error\n */\nclass PoolClearedOnNetworkError extends PoolClearedError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(pool) {\n        super(pool, `Connection to ${pool.address} interrupted due to server monitor timeout`);\n    }\n    get name() {\n        return 'PoolClearedOnNetworkError';\n    }\n}\nexports.PoolClearedOnNetworkError = PoolClearedOnNetworkError;\n/**\n * An error thrown when a request to check out a connection times out\n * @category Error\n */\nclass WaitQueueTimeoutError extends error_1.MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, address) {\n        super(message);\n        this.address = address;\n    }\n    get name() {\n        return 'MongoWaitQueueTimeoutError';\n    }\n}\nexports.WaitQueueTimeoutError = WaitQueueTimeoutError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLGlDQUFpQyxHQUFHLHdCQUF3QixHQUFHLHVCQUF1QjtBQUN0SCxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsY0FBYyxzREFBc0QsMEJBQTBCO0FBQ25JLGlEQUFpRCwwQkFBMEI7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxjQUFjO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvZXJyb3JzLmpzPzRhMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldhaXRRdWV1ZVRpbWVvdXRFcnJvciA9IGV4cG9ydHMuUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvciA9IGV4cG9ydHMuUG9vbENsZWFyZWRFcnJvciA9IGV4cG9ydHMuUG9vbENsb3NlZEVycm9yID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyBhIGNvbm5lY3Rpb24gcG9vbCBpcyBjbG9zZWRcbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBQb29sQ2xvc2VkRXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvRHJpdmVyRXJyb3Ige1xuICAgIC8qKlxuICAgICAqICoqRG8gbm90IHVzZSB0aGlzIGNvbnN0cnVjdG9yISoqXG4gICAgICpcbiAgICAgKiBNZWFudCBmb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIFRoaXMgY2xhc3MgaXMgb25seSBtZWFudCB0byBiZSBjb25zdHJ1Y3RlZCB3aXRoaW4gdGhlIGRyaXZlci4gVGhpcyBjb25zdHJ1Y3RvciBpc1xuICAgICAqIG5vdCBzdWJqZWN0IHRvIHNlbWFudGljIHZlcnNpb25pbmcgY29tcGF0aWJpbGl0eSBndWFyYW50ZWVzIGFuZCBtYXkgY2hhbmdlIGF0IGFueSB0aW1lLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqKi9cbiAgICBjb25zdHJ1Y3Rvcihwb29sKSB7XG4gICAgICAgIHN1cGVyKCdBdHRlbXB0ZWQgdG8gY2hlY2sgb3V0IGEgY29ubmVjdGlvbiBmcm9tIGNsb3NlZCBjb25uZWN0aW9uIHBvb2wnKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gcG9vbC5hZGRyZXNzO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICdNb25nb1Bvb2xDbG9zZWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Qb29sQ2xvc2VkRXJyb3IgPSBQb29sQ2xvc2VkRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIGluZGljYXRpbmcgYSBjb25uZWN0aW9uIHBvb2wgaXMgY3VycmVudGx5IHBhdXNlZFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFBvb2xDbGVhcmVkRXJyb3IgZXh0ZW5kcyBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yIHtcbiAgICAvKipcbiAgICAgKiAqKkRvIG5vdCB1c2UgdGhpcyBjb25zdHJ1Y3RvciEqKlxuICAgICAqXG4gICAgICogTWVhbnQgZm9yIGludGVybmFsIHVzZSBvbmx5LlxuICAgICAqXG4gICAgICogQHJlbWFya3NcbiAgICAgKiBUaGlzIGNsYXNzIGlzIG9ubHkgbWVhbnQgdG8gYmUgY29uc3RydWN0ZWQgd2l0aGluIHRoZSBkcml2ZXIuIFRoaXMgY29uc3RydWN0b3IgaXNcbiAgICAgKiBub3Qgc3ViamVjdCB0byBzZW1hbnRpYyB2ZXJzaW9uaW5nIGNvbXBhdGliaWxpdHkgZ3VhcmFudGVlcyBhbmQgbWF5IGNoYW5nZSBhdCBhbnkgdGltZS5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiovXG4gICAgY29uc3RydWN0b3IocG9vbCwgbWVzc2FnZSkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgICAgICAgICA/IG1lc3NhZ2VcbiAgICAgICAgICAgIDogYENvbm5lY3Rpb24gcG9vbCBmb3IgJHtwb29sLmFkZHJlc3N9IHdhcyBjbGVhcmVkIGJlY2F1c2UgYW5vdGhlciBvcGVyYXRpb24gZmFpbGVkIHdpdGg6IFwiJHtwb29sLnNlcnZlckVycm9yPy5tZXNzYWdlfVwiYDtcbiAgICAgICAgc3VwZXIoZXJyb3JNZXNzYWdlLCBwb29sLnNlcnZlckVycm9yID8geyBjYXVzZTogcG9vbC5zZXJ2ZXJFcnJvciB9IDogdW5kZWZpbmVkKTtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gcG9vbC5hZGRyZXNzO1xuICAgICAgICB0aGlzLmFkZEVycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuUmV0cnlhYmxlV3JpdGVFcnJvcik7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvUG9vbENsZWFyZWRFcnJvcic7XG4gICAgfVxufVxuZXhwb3J0cy5Qb29sQ2xlYXJlZEVycm9yID0gUG9vbENsZWFyZWRFcnJvcjtcbi8qKlxuICogQW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGEgY29ubmVjdGlvbiBwb29sIGhhcyBiZWVuIGNsZWFyZWQgYWZ0ZXIgdGhlIG1vbml0b3IgZm9yIHRoYXQgc2VydmVyIHRpbWVkIG91dC5cbiAqIEBjYXRlZ29yeSBFcnJvclxuICovXG5jbGFzcyBQb29sQ2xlYXJlZE9uTmV0d29ya0Vycm9yIGV4dGVuZHMgUG9vbENsZWFyZWRFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKHBvb2wpIHtcbiAgICAgICAgc3VwZXIocG9vbCwgYENvbm5lY3Rpb24gdG8gJHtwb29sLmFkZHJlc3N9IGludGVycnVwdGVkIGR1ZSB0byBzZXJ2ZXIgbW9uaXRvciB0aW1lb3V0YCk7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ1Bvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3InO1xuICAgIH1cbn1cbmV4cG9ydHMuUG9vbENsZWFyZWRPbk5ldHdvcmtFcnJvciA9IFBvb2xDbGVhcmVkT25OZXR3b3JrRXJyb3I7XG4vKipcbiAqIEFuIGVycm9yIHRocm93biB3aGVuIGEgcmVxdWVzdCB0byBjaGVjayBvdXQgYSBjb25uZWN0aW9uIHRpbWVzIG91dFxuICogQGNhdGVnb3J5IEVycm9yXG4gKi9cbmNsYXNzIFdhaXRRdWV1ZVRpbWVvdXRFcnJvciBleHRlbmRzIGVycm9yXzEuTW9uZ29Ecml2ZXJFcnJvciB7XG4gICAgLyoqXG4gICAgICogKipEbyBub3QgdXNlIHRoaXMgY29uc3RydWN0b3IhKipcbiAgICAgKlxuICAgICAqIE1lYW50IGZvciBpbnRlcm5hbCB1c2Ugb25seS5cbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogVGhpcyBjbGFzcyBpcyBvbmx5IG1lYW50IHRvIGJlIGNvbnN0cnVjdGVkIHdpdGhpbiB0aGUgZHJpdmVyLiBUaGlzIGNvbnN0cnVjdG9yIGlzXG4gICAgICogbm90IHN1YmplY3QgdG8gc2VtYW50aWMgdmVyc2lvbmluZyBjb21wYXRpYmlsaXR5IGd1YXJhbnRlZXMgYW5kIG1heSBjaGFuZ2UgYXQgYW55IHRpbWUuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICoqL1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGFkZHJlc3MpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gJ01vbmdvV2FpdFF1ZXVlVGltZW91dEVycm9yJztcbiAgICB9XG59XG5leHBvcnRzLldhaXRRdWV1ZVRpbWVvdXRFcnJvciA9IFdhaXRRdWV1ZVRpbWVvdXRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/errors.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/handshake/client_metadata.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/handshake/client_metadata.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getFAASEnv = exports.makeClientMetadata = exports.LimitedSizeDocument = void 0;\nconst os = __webpack_require__(/*! os */ \"os\");\nconst process = __webpack_require__(/*! process */ \"process\");\nconst bson_1 = __webpack_require__(/*! ../../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = (__webpack_require__(/*! ../../../package.json */ \"(ssr)/../../../../../node_modules/mongodb/package.json\").version);\n/** @internal */\nclass LimitedSizeDocument {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.document = new Map();\n        /** BSON overhead: Int32 + Null byte */\n        this.documentSize = 5;\n    }\n    /** Only adds key/value if the bsonByteLength is less than MAX_SIZE */\n    ifItFitsItSits(key, value) {\n        // The BSON byteLength of the new element is the same as serializing it to its own document\n        // subtracting the document size int32 and the null terminator.\n        const newElementSize = bson_1.BSON.serialize(new Map().set(key, value)).byteLength - 5;\n        if (newElementSize + this.documentSize > this.maxSize) {\n            return false;\n        }\n        this.documentSize += newElementSize;\n        this.document.set(key, value);\n        return true;\n    }\n    toObject() {\n        return bson_1.BSON.deserialize(bson_1.BSON.serialize(this.document), {\n            promoteLongs: false,\n            promoteBuffers: false,\n            promoteValues: false,\n            useBigInt64: false\n        });\n    }\n}\nexports.LimitedSizeDocument = LimitedSizeDocument;\n/**\n * From the specs:\n * Implementors SHOULD cumulatively update fields in the following order until the document is under the size limit:\n * 1. Omit fields from `env` except `env.name`.\n * 2. Omit fields from `os` except `os.type`.\n * 3. Omit the `env` document entirely.\n * 4. Truncate `platform`. -- special we do not truncate this field\n */\nfunction makeClientMetadata(options) {\n    const metadataDocument = new LimitedSizeDocument(512);\n    const { appName = '' } = options;\n    // Add app name first, it must be sent\n    if (appName.length > 0) {\n        const name = Buffer.byteLength(appName, 'utf8') <= 128\n            ? options.appName\n            : Buffer.from(appName, 'utf8').subarray(0, 128).toString('utf8');\n        metadataDocument.ifItFitsItSits('application', { name });\n    }\n    const { name = '', version = '', platform = '' } = options.driverInfo;\n    const driverInfo = {\n        name: name.length > 0 ? `nodejs|${name}` : 'nodejs',\n        version: version.length > 0 ? `${NODE_DRIVER_VERSION}|${version}` : NODE_DRIVER_VERSION\n    };\n    if (!metadataDocument.ifItFitsItSits('driver', driverInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo name and version, metadata cannot exceed 512 bytes');\n    }\n    let runtimeInfo = getRuntimeInfo();\n    if (platform.length > 0) {\n        runtimeInfo = `${runtimeInfo}|${platform}`;\n    }\n    if (!metadataDocument.ifItFitsItSits('platform', runtimeInfo)) {\n        throw new error_1.MongoInvalidArgumentError('Unable to include driverInfo platform, metadata cannot exceed 512 bytes');\n    }\n    // Note: order matters, os.type is last so it will be removed last if we're at maxSize\n    const osInfo = new Map()\n        .set('name', process.platform)\n        .set('architecture', process.arch)\n        .set('version', os.release())\n        .set('type', os.type());\n    if (!metadataDocument.ifItFitsItSits('os', osInfo)) {\n        for (const key of osInfo.keys()) {\n            osInfo.delete(key);\n            if (osInfo.size === 0)\n                break;\n            if (metadataDocument.ifItFitsItSits('os', osInfo))\n                break;\n        }\n    }\n    const faasEnv = getFAASEnv();\n    if (faasEnv != null) {\n        if (!metadataDocument.ifItFitsItSits('env', faasEnv)) {\n            for (const key of faasEnv.keys()) {\n                faasEnv.delete(key);\n                if (faasEnv.size === 0)\n                    break;\n                if (metadataDocument.ifItFitsItSits('env', faasEnv))\n                    break;\n            }\n        }\n    }\n    return metadataDocument.toObject();\n}\nexports.makeClientMetadata = makeClientMetadata;\n/**\n * Collects FaaS metadata.\n * - `name` MUST be the last key in the Map returned.\n */\nfunction getFAASEnv() {\n    const { AWS_EXECUTION_ENV = '', AWS_LAMBDA_RUNTIME_API = '', FUNCTIONS_WORKER_RUNTIME = '', K_SERVICE = '', FUNCTION_NAME = '', VERCEL = '', AWS_LAMBDA_FUNCTION_MEMORY_SIZE = '', AWS_REGION = '', FUNCTION_MEMORY_MB = '', FUNCTION_REGION = '', FUNCTION_TIMEOUT_SEC = '', VERCEL_REGION = '' } = process.env;\n    const isAWSFaaS = AWS_EXECUTION_ENV.startsWith('AWS_Lambda_') || AWS_LAMBDA_RUNTIME_API.length > 0;\n    const isAzureFaaS = FUNCTIONS_WORKER_RUNTIME.length > 0;\n    const isGCPFaaS = K_SERVICE.length > 0 || FUNCTION_NAME.length > 0;\n    const isVercelFaaS = VERCEL.length > 0;\n    // Note: order matters, name must always be the last key\n    const faasEnv = new Map();\n    // When isVercelFaaS is true so is isAWSFaaS; Vercel inherits the AWS env\n    if (isVercelFaaS && !(isAzureFaaS || isGCPFaaS)) {\n        if (VERCEL_REGION.length > 0) {\n            faasEnv.set('region', VERCEL_REGION);\n        }\n        faasEnv.set('name', 'vercel');\n        return faasEnv;\n    }\n    if (isAWSFaaS && !(isAzureFaaS || isGCPFaaS || isVercelFaaS)) {\n        if (AWS_REGION.length > 0) {\n            faasEnv.set('region', AWS_REGION);\n        }\n        if (AWS_LAMBDA_FUNCTION_MEMORY_SIZE.length > 0 &&\n            Number.isInteger(+AWS_LAMBDA_FUNCTION_MEMORY_SIZE)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(AWS_LAMBDA_FUNCTION_MEMORY_SIZE));\n        }\n        faasEnv.set('name', 'aws.lambda');\n        return faasEnv;\n    }\n    if (isAzureFaaS && !(isGCPFaaS || isAWSFaaS || isVercelFaaS)) {\n        faasEnv.set('name', 'azure.func');\n        return faasEnv;\n    }\n    if (isGCPFaaS && !(isAzureFaaS || isAWSFaaS || isVercelFaaS)) {\n        if (FUNCTION_REGION.length > 0) {\n            faasEnv.set('region', FUNCTION_REGION);\n        }\n        if (FUNCTION_MEMORY_MB.length > 0 && Number.isInteger(+FUNCTION_MEMORY_MB)) {\n            faasEnv.set('memory_mb', new bson_1.Int32(FUNCTION_MEMORY_MB));\n        }\n        if (FUNCTION_TIMEOUT_SEC.length > 0 && Number.isInteger(+FUNCTION_TIMEOUT_SEC)) {\n            faasEnv.set('timeout_sec', new bson_1.Int32(FUNCTION_TIMEOUT_SEC));\n        }\n        faasEnv.set('name', 'gcp.func');\n        return faasEnv;\n    }\n    return null;\n}\nexports.getFAASEnv = getFAASEnv;\n/**\n * @internal\n * Get current JavaScript runtime platform\n *\n * NOTE: The version information fetching is intentionally written defensively\n * to avoid having a released driver version that becomes incompatible\n * with a future change to these global objects.\n */\nfunction getRuntimeInfo() {\n    if ('Deno' in globalThis) {\n        const version = typeof Deno?.version?.deno === 'string' ? Deno?.version?.deno : '0.0.0-unknown';\n        return `Deno v${version}, ${os.endianness()}`;\n    }\n    if ('Bun' in globalThis) {\n        const version = typeof Bun?.version === 'string' ? Bun?.version : '0.0.0-unknown';\n        return `Bun v${version}, ${os.endianness()}`;\n    }\n    return `Node.js ${process.version}, ${os.endianness()}`;\n}\n//# sourceMappingURL=client_metadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/handshake/client_metadata.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/message_stream.js":
/*!**********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/message_stream.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MessageStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst commands_1 = __webpack_require__(/*! ./commands */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/commands.js\");\nconst compression_1 = __webpack_require__(/*! ./wire_protocol/compression */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst constants_1 = __webpack_require__(/*! ./wire_protocol/constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst MESSAGE_HEADER_SIZE = 16;\nconst COMPRESSION_DETAILS_SIZE = 9; // originalOpcode + uncompressedSize, compressorID\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\n/** @internal */\nconst kBuffer = Symbol('buffer');\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n * @internal\n */\nclass MessageStream extends stream_1.Duplex {\n    constructor(options = {}) {\n        super(options);\n        /** @internal */\n        this.isMonitoringConnection = false;\n        this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n        this[kBuffer] = new utils_1.BufferPool();\n    }\n    get buffer() {\n        return this[kBuffer];\n    }\n    _write(chunk, _, callback) {\n        this[kBuffer].append(chunk);\n        processIncomingData(this, callback);\n    }\n    _read( /* size */) {\n        // NOTE: This implementation is empty because we explicitly push data to be read\n        //       when `writeMessage` is called.\n        return;\n    }\n    writeCommand(command, operationDescription) {\n        const agreedCompressor = operationDescription.agreedCompressor ?? 'none';\n        if (agreedCompressor === 'none' || !canCompress(command)) {\n            const data = command.toBin();\n            this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n            return;\n        }\n        // otherwise, compress the message\n        const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n        const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n        // Extract information needed for OP_COMPRESSED from the uncompressed message\n        const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n        const options = {\n            agreedCompressor,\n            zlibCompressionLevel: operationDescription.zlibCompressionLevel ?? 0\n        };\n        // Compress the message body\n        (0, compression_1.compress)(options, messageToBeCompressed).then(compressedMessage => {\n            // Create the msgHeader of OP_COMPRESSED\n            const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n            msgHeader.writeInt32LE(MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length, 0); // messageLength\n            msgHeader.writeInt32LE(command.requestId, 4); // requestID\n            msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n            msgHeader.writeInt32LE(constants_1.OP_COMPRESSED, 12); // opCode\n            // Create the compression details of OP_COMPRESSED\n            const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n            compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n            compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n            compressionDetails.writeUInt8(compression_1.Compressor[agreedCompressor], 8); // compressorID\n            this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n        }, error => {\n            operationDescription.cb(error);\n        });\n    }\n}\nexports.MessageStream = MessageStream;\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nfunction canCompress(command) {\n    const commandDoc = command instanceof commands_1.Msg ? command.command : command.query;\n    const commandName = Object.keys(commandDoc)[0];\n    return !compression_1.uncompressibleCommands.has(commandName);\n}\nfunction processIncomingData(stream, callback) {\n    const buffer = stream[kBuffer];\n    const sizeOfMessage = buffer.getInt32();\n    if (sizeOfMessage == null) {\n        return callback();\n    }\n    if (sizeOfMessage < 0) {\n        return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n    }\n    if (sizeOfMessage > stream.maxBsonMessageSize) {\n        return callback(new error_1.MongoParseError(`Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`));\n    }\n    if (sizeOfMessage > buffer.length) {\n        return callback();\n    }\n    const message = buffer.read(sizeOfMessage);\n    const messageHeader = {\n        length: message.readInt32LE(0),\n        requestId: message.readInt32LE(4),\n        responseTo: message.readInt32LE(8),\n        opCode: message.readInt32LE(12)\n    };\n    const monitorHasAnotherHello = () => {\n        if (stream.isMonitoringConnection) {\n            // Can we read the next message size?\n            const sizeOfMessage = buffer.getInt32();\n            if (sizeOfMessage != null && sizeOfMessage <= buffer.length) {\n                return true;\n            }\n        }\n        return false;\n    };\n    let ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.BinMsg : commands_1.Response;\n    if (messageHeader.opCode !== constants_1.OP_COMPRESSED) {\n        const messageBody = message.subarray(MESSAGE_HEADER_SIZE);\n        // If we are a monitoring connection message stream and\n        // there is more in the buffer that can be read, skip processing since we\n        // want the last hello command response that is in the buffer.\n        if (monitorHasAnotherHello()) {\n            return processIncomingData(stream, callback);\n        }\n        stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n        if (buffer.length >= 4) {\n            return processIncomingData(stream, callback);\n        }\n        return callback();\n    }\n    messageHeader.fromCompressed = true;\n    messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n    messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n    const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n    const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n    // recalculate based on wrapped opcode\n    ResponseType = messageHeader.opCode === constants_1.OP_MSG ? commands_1.BinMsg : commands_1.Response;\n    (0, compression_1.decompress)(compressorID, compressedBuffer).then(messageBody => {\n        if (messageBody.length !== messageHeader.length) {\n            return callback(new error_1.MongoDecompressionError('Message body and message header must be the same length'));\n        }\n        // If we are a monitoring connection message stream and\n        // there is more in the buffer that can be read, skip processing since we\n        // want the last hello command response that is in the buffer.\n        if (monitorHasAnotherHello()) {\n            return processIncomingData(stream, callback);\n        }\n        stream.emit('message', new ResponseType(message, messageHeader, messageBody));\n        if (buffer.length >= 4) {\n            return processIncomingData(stream, callback);\n        }\n        return callback();\n    }, error => {\n        return callback(error);\n    });\n}\n//# sourceMappingURL=message_stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/message_stream.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/metrics.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/metrics.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionPoolMetrics = void 0;\n/** @internal */\nclass ConnectionPoolMetrics {\n    constructor() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n    /**\n     * Mark a connection as pinned for a specific operation.\n     */\n    markPinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections += 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections += 1;\n        }\n        else {\n            this.otherConnections += 1;\n        }\n    }\n    /**\n     * Unmark a connection as pinned for an operation.\n     */\n    markUnpinned(pinType) {\n        if (pinType === ConnectionPoolMetrics.TXN) {\n            this.txnConnections -= 1;\n        }\n        else if (pinType === ConnectionPoolMetrics.CURSOR) {\n            this.cursorConnections -= 1;\n        }\n        else {\n            this.otherConnections -= 1;\n        }\n    }\n    /**\n     * Return information about the cmap metrics as a string.\n     */\n    info(maxPoolSize) {\n        return ('Timed out while checking out a connection from connection pool: ' +\n            `maxPoolSize: ${maxPoolSize}, ` +\n            `connections in use by cursors: ${this.cursorConnections}, ` +\n            `connections in use by transactions: ${this.txnConnections}, ` +\n            `connections in use by other operations: ${this.otherConnections}`);\n    }\n    /**\n     * Reset the metrics to the initial values.\n     */\n    reset() {\n        this.txnConnections = 0;\n        this.cursorConnections = 0;\n        this.otherConnections = 0;\n    }\n}\nConnectionPoolMetrics.TXN = 'txn';\nConnectionPoolMetrics.CURSOR = 'cursor';\nConnectionPoolMetrics.OTHER = 'other';\nexports.ConnectionPoolMetrics = ConnectionPoolMetrics;\n//# sourceMappingURL=metrics.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvbWV0cmljcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsWUFBWTtBQUN4Qyw4Q0FBOEMsdUJBQXVCO0FBQ3JFLG1EQUFtRCxvQkFBb0I7QUFDdkUsdURBQXVELHNCQUFzQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jbWFwL21ldHJpY3MuanM/NjA1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29ubmVjdGlvblBvb2xNZXRyaWNzID0gdm9pZCAwO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ29ubmVjdGlvblBvb2xNZXRyaWNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50eG5Db25uZWN0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJrIGEgY29ubmVjdGlvbiBhcyBwaW5uZWQgZm9yIGEgc3BlY2lmaWMgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIG1hcmtQaW5uZWQocGluVHlwZSkge1xuICAgICAgICBpZiAocGluVHlwZSA9PT0gQ29ubmVjdGlvblBvb2xNZXRyaWNzLlRYTikge1xuICAgICAgICAgICAgdGhpcy50eG5Db25uZWN0aW9ucyArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5DVVJTT1IpIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yQ29ubmVjdGlvbnMgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub3RoZXJDb25uZWN0aW9ucyArPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVubWFyayBhIGNvbm5lY3Rpb24gYXMgcGlubmVkIGZvciBhbiBvcGVyYXRpb24uXG4gICAgICovXG4gICAgbWFya1VucGlubmVkKHBpblR5cGUpIHtcbiAgICAgICAgaWYgKHBpblR5cGUgPT09IENvbm5lY3Rpb25Qb29sTWV0cmljcy5UWE4pIHtcbiAgICAgICAgICAgIHRoaXMudHhuQ29ubmVjdGlvbnMgLT0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwaW5UeXBlID09PSBDb25uZWN0aW9uUG9vbE1ldHJpY3MuQ1VSU09SKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvckNvbm5lY3Rpb25zIC09IDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgLT0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNtYXAgbWV0cmljcyBhcyBhIHN0cmluZy5cbiAgICAgKi9cbiAgICBpbmZvKG1heFBvb2xTaXplKSB7XG4gICAgICAgIHJldHVybiAoJ1RpbWVkIG91dCB3aGlsZSBjaGVja2luZyBvdXQgYSBjb25uZWN0aW9uIGZyb20gY29ubmVjdGlvbiBwb29sOiAnICtcbiAgICAgICAgICAgIGBtYXhQb29sU2l6ZTogJHttYXhQb29sU2l6ZX0sIGAgK1xuICAgICAgICAgICAgYGNvbm5lY3Rpb25zIGluIHVzZSBieSBjdXJzb3JzOiAke3RoaXMuY3Vyc29yQ29ubmVjdGlvbnN9LCBgICtcbiAgICAgICAgICAgIGBjb25uZWN0aW9ucyBpbiB1c2UgYnkgdHJhbnNhY3Rpb25zOiAke3RoaXMudHhuQ29ubmVjdGlvbnN9LCBgICtcbiAgICAgICAgICAgIGBjb25uZWN0aW9ucyBpbiB1c2UgYnkgb3RoZXIgb3BlcmF0aW9uczogJHt0aGlzLm90aGVyQ29ubmVjdGlvbnN9YCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlc2V0IHRoZSBtZXRyaWNzIHRvIHRoZSBpbml0aWFsIHZhbHVlcy5cbiAgICAgKi9cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy50eG5Db25uZWN0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29yQ29ubmVjdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLm90aGVyQ29ubmVjdGlvbnMgPSAwO1xuICAgIH1cbn1cbkNvbm5lY3Rpb25Qb29sTWV0cmljcy5UWE4gPSAndHhuJztcbkNvbm5lY3Rpb25Qb29sTWV0cmljcy5DVVJTT1IgPSAnY3Vyc29yJztcbkNvbm5lY3Rpb25Qb29sTWV0cmljcy5PVEhFUiA9ICdvdGhlcic7XG5leHBvcnRzLkNvbm5lY3Rpb25Qb29sTWV0cmljcyA9IENvbm5lY3Rpb25Qb29sTWV0cmljcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldHJpY3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/metrics.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/stream_description.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/stream_description.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StreamDescription = void 0;\nconst common_1 = __webpack_require__(/*! ../sdam/common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ../sdam/server_description */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_description.js\");\nconst RESPONSE_FIELDS = [\n    'minWireVersion',\n    'maxWireVersion',\n    'maxBsonObjectSize',\n    'maxMessageSizeBytes',\n    'maxWriteBatchSize',\n    'logicalSessionTimeoutMinutes'\n];\n/** @public */\nclass StreamDescription {\n    constructor(address, options) {\n        this.address = address;\n        this.type = common_1.ServerType.Unknown;\n        this.minWireVersion = undefined;\n        this.maxWireVersion = undefined;\n        this.maxBsonObjectSize = 16777216;\n        this.maxMessageSizeBytes = 48000000;\n        this.maxWriteBatchSize = 100000;\n        this.logicalSessionTimeoutMinutes = options?.logicalSessionTimeoutMinutes;\n        this.loadBalanced = !!options?.loadBalanced;\n        this.compressors =\n            options && options.compressors && Array.isArray(options.compressors)\n                ? options.compressors\n                : [];\n    }\n    receiveResponse(response) {\n        if (response == null) {\n            return;\n        }\n        this.type = (0, server_description_1.parseServerType)(response);\n        for (const field of RESPONSE_FIELDS) {\n            if (response[field] != null) {\n                this[field] = response[field];\n            }\n            // testing case\n            if ('__nodejs_mock_server__' in response) {\n                this.__nodejs_mock_server__ = response['__nodejs_mock_server__'];\n            }\n        }\n        if (response.compression) {\n            this.compressor = this.compressors.filter(c => response.compression?.includes(c))[0];\n        }\n    }\n}\nexports.StreamDescription = StreamDescription;\n//# sourceMappingURL=stream_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvc3RyZWFtX2Rlc2NyaXB0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixpQkFBaUIsbUJBQU8sQ0FBQyxvRkFBZ0I7QUFDekMsNkJBQTZCLG1CQUFPLENBQUMsNEdBQTRCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC9zdHJlYW1fZGVzY3JpcHRpb24uanM/NjhkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RyZWFtRGVzY3JpcHRpb24gPSB2b2lkIDA7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9zZGFtL2NvbW1vblwiKTtcbmNvbnN0IHNlcnZlcl9kZXNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL3NkYW0vc2VydmVyX2Rlc2NyaXB0aW9uXCIpO1xuY29uc3QgUkVTUE9OU0VfRklFTERTID0gW1xuICAgICdtaW5XaXJlVmVyc2lvbicsXG4gICAgJ21heFdpcmVWZXJzaW9uJyxcbiAgICAnbWF4QnNvbk9iamVjdFNpemUnLFxuICAgICdtYXhNZXNzYWdlU2l6ZUJ5dGVzJyxcbiAgICAnbWF4V3JpdGVCYXRjaFNpemUnLFxuICAgICdsb2dpY2FsU2Vzc2lvblRpbWVvdXRNaW51dGVzJ1xuXTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBTdHJlYW1EZXNjcmlwdGlvbiB7XG4gICAgY29uc3RydWN0b3IoYWRkcmVzcywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgICAgICB0aGlzLnR5cGUgPSBjb21tb25fMS5TZXJ2ZXJUeXBlLlVua25vd247XG4gICAgICAgIHRoaXMubWluV2lyZVZlcnNpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4QnNvbk9iamVjdFNpemUgPSAxNjc3NzIxNjtcbiAgICAgICAgdGhpcy5tYXhNZXNzYWdlU2l6ZUJ5dGVzID0gNDgwMDAwMDA7XG4gICAgICAgIHRoaXMubWF4V3JpdGVCYXRjaFNpemUgPSAxMDAwMDA7XG4gICAgICAgIHRoaXMubG9naWNhbFNlc3Npb25UaW1lb3V0TWludXRlcyA9IG9wdGlvbnM/LmxvZ2ljYWxTZXNzaW9uVGltZW91dE1pbnV0ZXM7XG4gICAgICAgIHRoaXMubG9hZEJhbGFuY2VkID0gISFvcHRpb25zPy5sb2FkQmFsYW5jZWQ7XG4gICAgICAgIHRoaXMuY29tcHJlc3NvcnMgPVxuICAgICAgICAgICAgb3B0aW9ucyAmJiBvcHRpb25zLmNvbXByZXNzb3JzICYmIEFycmF5LmlzQXJyYXkob3B0aW9ucy5jb21wcmVzc29ycylcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMuY29tcHJlc3NvcnNcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgIH1cbiAgICByZWNlaXZlUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnR5cGUgPSAoMCwgc2VydmVyX2Rlc2NyaXB0aW9uXzEucGFyc2VTZXJ2ZXJUeXBlKShyZXNwb25zZSk7XG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgUkVTUE9OU0VfRklFTERTKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VbZmllbGRdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2ZpZWxkXSA9IHJlc3BvbnNlW2ZpZWxkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3RpbmcgY2FzZVxuICAgICAgICAgICAgaWYgKCdfX25vZGVqc19tb2NrX3NlcnZlcl9fJyBpbiByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX19ub2RlanNfbW9ja19zZXJ2ZXJfXyA9IHJlc3BvbnNlWydfX25vZGVqc19tb2NrX3NlcnZlcl9fJ107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3BvbnNlLmNvbXByZXNzaW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbXByZXNzb3IgPSB0aGlzLmNvbXByZXNzb3JzLmZpbHRlcihjID0+IHJlc3BvbnNlLmNvbXByZXNzaW9uPy5pbmNsdWRlcyhjKSlbMF07XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlN0cmVhbURlc2NyaXB0aW9uID0gU3RyZWFtRGVzY3JpcHRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJlYW1fZGVzY3JpcHRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/stream_description.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/compression.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/wire_protocol/compression.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ../../deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.Compressor = Object.freeze({\n    none: 0,\n    snappy: 1,\n    zlib: 2,\n    zstd: 3\n});\nexports.uncompressibleCommands = new Set([\n    constants_1.LEGACY_HELLO_COMMAND,\n    'saslStart',\n    'saslContinue',\n    'getnonce',\n    'authenticate',\n    'createUser',\n    'updateUser',\n    'copydbSaslStart',\n    'copydbgetnonce',\n    'copydb'\n]);\nconst ZSTD_COMPRESSION_LEVEL = 3;\nconst zlibInflate = (0, util_1.promisify)(zlib.inflate.bind(zlib));\nconst zlibDeflate = (0, util_1.promisify)(zlib.deflate.bind(zlib));\nlet zstd;\nlet Snappy = null;\nfunction loadSnappy() {\n    if (Snappy == null) {\n        const snappyImport = (0, deps_1.getSnappy)();\n        if ('kModuleError' in snappyImport) {\n            throw snappyImport.kModuleError;\n        }\n        Snappy = snappyImport;\n    }\n    return Snappy;\n}\n// Facilitate compressing a message using an agreed compressor\nasync function compress(options, dataToBeCompressed) {\n    const zlibOptions = {};\n    switch (options.agreedCompressor) {\n        case 'snappy': {\n            Snappy ??= loadSnappy();\n            return Snappy.compress(dataToBeCompressed);\n        }\n        case 'zstd': {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return zstd.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL);\n        }\n        case 'zlib': {\n            if (options.zlibCompressionLevel) {\n                zlibOptions.level = options.zlibCompressionLevel;\n            }\n            return zlibDeflate(dataToBeCompressed, zlibOptions);\n        }\n        default: {\n            throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${options.agreedCompressor} failed to compress`);\n        }\n    }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nasync function decompress(compressorID, compressedData) {\n    if (compressorID !== exports.Compressor.snappy &&\n        compressorID !== exports.Compressor.zstd &&\n        compressorID !== exports.Compressor.zlib &&\n        compressorID !== exports.Compressor.none) {\n        throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n    }\n    switch (compressorID) {\n        case exports.Compressor.snappy: {\n            Snappy ??= loadSnappy();\n            return Snappy.uncompress(compressedData, { asBuffer: true });\n        }\n        case exports.Compressor.zstd: {\n            loadZstd();\n            if ('kModuleError' in zstd) {\n                throw zstd['kModuleError'];\n            }\n            return zstd.decompress(compressedData);\n        }\n        case exports.Compressor.zlib: {\n            return zlibInflate(compressedData);\n        }\n        default: {\n            return compressedData;\n        }\n    }\n}\nexports.decompress = decompress;\n/**\n * Load ZStandard if it is not already set.\n */\nfunction loadZstd() {\n    if (!zstd) {\n        zstd = (0, deps_1.getZstdLibrary)();\n    }\n}\n//# sourceMappingURL=compression.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvd2lyZV9wcm90b2NvbC9jb21wcmVzc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyxnQkFBZ0IsR0FBRyw4QkFBOEIsR0FBRyxrQkFBa0I7QUFDM0YsZUFBZSxtQkFBTyxDQUFDLGtCQUFNO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixvQkFBb0IsbUJBQU8sQ0FBQyxtRkFBaUI7QUFDN0MsZUFBZSxtQkFBTyxDQUFDLHlFQUFZO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3JDO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsMEJBQTBCO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2SUFBNkksYUFBYTtBQUMxSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxnQkFBZ0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvd2lyZV9wcm90b2NvbC9jb21wcmVzc2lvbi5qcz9kMWY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvbXByZXNzID0gZXhwb3J0cy5jb21wcmVzcyA9IGV4cG9ydHMudW5jb21wcmVzc2libGVDb21tYW5kcyA9IGV4cG9ydHMuQ29tcHJlc3NvciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgemxpYiA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZGVwc18xID0gcmVxdWlyZShcIi4uLy4uL2RlcHNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2Vycm9yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuQ29tcHJlc3NvciA9IE9iamVjdC5mcmVlemUoe1xuICAgIG5vbmU6IDAsXG4gICAgc25hcHB5OiAxLFxuICAgIHpsaWI6IDIsXG4gICAgenN0ZDogM1xufSk7XG5leHBvcnRzLnVuY29tcHJlc3NpYmxlQ29tbWFuZHMgPSBuZXcgU2V0KFtcbiAgICBjb25zdGFudHNfMS5MRUdBQ1lfSEVMTE9fQ09NTUFORCxcbiAgICAnc2FzbFN0YXJ0JyxcbiAgICAnc2FzbENvbnRpbnVlJyxcbiAgICAnZ2V0bm9uY2UnLFxuICAgICdhdXRoZW50aWNhdGUnLFxuICAgICdjcmVhdGVVc2VyJyxcbiAgICAndXBkYXRlVXNlcicsXG4gICAgJ2NvcHlkYlNhc2xTdGFydCcsXG4gICAgJ2NvcHlkYmdldG5vbmNlJyxcbiAgICAnY29weWRiJ1xuXSk7XG5jb25zdCBaU1REX0NPTVBSRVNTSU9OX0xFVkVMID0gMztcbmNvbnN0IHpsaWJJbmZsYXRlID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHpsaWIuaW5mbGF0ZS5iaW5kKHpsaWIpKTtcbmNvbnN0IHpsaWJEZWZsYXRlID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHpsaWIuZGVmbGF0ZS5iaW5kKHpsaWIpKTtcbmxldCB6c3RkO1xubGV0IFNuYXBweSA9IG51bGw7XG5mdW5jdGlvbiBsb2FkU25hcHB5KCkge1xuICAgIGlmIChTbmFwcHkgPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBzbmFwcHlJbXBvcnQgPSAoMCwgZGVwc18xLmdldFNuYXBweSkoKTtcbiAgICAgICAgaWYgKCdrTW9kdWxlRXJyb3InIGluIHNuYXBweUltcG9ydCkge1xuICAgICAgICAgICAgdGhyb3cgc25hcHB5SW1wb3J0LmtNb2R1bGVFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBTbmFwcHkgPSBzbmFwcHlJbXBvcnQ7XG4gICAgfVxuICAgIHJldHVybiBTbmFwcHk7XG59XG4vLyBGYWNpbGl0YXRlIGNvbXByZXNzaW5nIGEgbWVzc2FnZSB1c2luZyBhbiBhZ3JlZWQgY29tcHJlc3NvclxuYXN5bmMgZnVuY3Rpb24gY29tcHJlc3Mob3B0aW9ucywgZGF0YVRvQmVDb21wcmVzc2VkKSB7XG4gICAgY29uc3QgemxpYk9wdGlvbnMgPSB7fTtcbiAgICBzd2l0Y2ggKG9wdGlvbnMuYWdyZWVkQ29tcHJlc3Nvcikge1xuICAgICAgICBjYXNlICdzbmFwcHknOiB7XG4gICAgICAgICAgICBTbmFwcHkgPz89IGxvYWRTbmFwcHkoKTtcbiAgICAgICAgICAgIHJldHVybiBTbmFwcHkuY29tcHJlc3MoZGF0YVRvQmVDb21wcmVzc2VkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd6c3RkJzoge1xuICAgICAgICAgICAgbG9hZFpzdGQoKTtcbiAgICAgICAgICAgIGlmICgna01vZHVsZUVycm9yJyBpbiB6c3RkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgenN0ZFsna01vZHVsZUVycm9yJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4genN0ZC5jb21wcmVzcyhkYXRhVG9CZUNvbXByZXNzZWQsIFpTVERfQ09NUFJFU1NJT05fTEVWRUwpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3psaWInOiB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy56bGliQ29tcHJlc3Npb25MZXZlbCkge1xuICAgICAgICAgICAgICAgIHpsaWJPcHRpb25zLmxldmVsID0gb3B0aW9ucy56bGliQ29tcHJlc3Npb25MZXZlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB6bGliRGVmbGF0ZShkYXRhVG9CZUNvbXByZXNzZWQsIHpsaWJPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKGBVbmtub3duIGNvbXByZXNzb3IgJHtvcHRpb25zLmFncmVlZENvbXByZXNzb3J9IGZhaWxlZCB0byBjb21wcmVzc2ApO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5jb21wcmVzcyA9IGNvbXByZXNzO1xuLy8gRGVjb21wcmVzcyBhIG1lc3NhZ2UgdXNpbmcgdGhlIGdpdmVuIGNvbXByZXNzb3JcbmFzeW5jIGZ1bmN0aW9uIGRlY29tcHJlc3MoY29tcHJlc3NvcklELCBjb21wcmVzc2VkRGF0YSkge1xuICAgIGlmIChjb21wcmVzc29ySUQgIT09IGV4cG9ydHMuQ29tcHJlc3Nvci5zbmFwcHkgJiZcbiAgICAgICAgY29tcHJlc3NvcklEICE9PSBleHBvcnRzLkNvbXByZXNzb3IuenN0ZCAmJlxuICAgICAgICBjb21wcmVzc29ySUQgIT09IGV4cG9ydHMuQ29tcHJlc3Nvci56bGliICYmXG4gICAgICAgIGNvbXByZXNzb3JJRCAhPT0gZXhwb3J0cy5Db21wcmVzc29yLm5vbmUpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29EZWNvbXByZXNzaW9uRXJyb3IoYFNlcnZlciBzZW50IG1lc3NhZ2UgY29tcHJlc3NlZCB1c2luZyBhbiB1bnN1cHBvcnRlZCBjb21wcmVzc29yLiAoUmVjZWl2ZWQgY29tcHJlc3NvciBJRCAke2NvbXByZXNzb3JJRH0pYCk7XG4gICAgfVxuICAgIHN3aXRjaCAoY29tcHJlc3NvcklEKSB7XG4gICAgICAgIGNhc2UgZXhwb3J0cy5Db21wcmVzc29yLnNuYXBweToge1xuICAgICAgICAgICAgU25hcHB5ID8/PSBsb2FkU25hcHB5KCk7XG4gICAgICAgICAgICByZXR1cm4gU25hcHB5LnVuY29tcHJlc3MoY29tcHJlc3NlZERhdGEsIHsgYXNCdWZmZXI6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBleHBvcnRzLkNvbXByZXNzb3IuenN0ZDoge1xuICAgICAgICAgICAgbG9hZFpzdGQoKTtcbiAgICAgICAgICAgIGlmICgna01vZHVsZUVycm9yJyBpbiB6c3RkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgenN0ZFsna01vZHVsZUVycm9yJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4genN0ZC5kZWNvbXByZXNzKGNvbXByZXNzZWREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGV4cG9ydHMuQ29tcHJlc3Nvci56bGliOiB7XG4gICAgICAgICAgICByZXR1cm4gemxpYkluZmxhdGUoY29tcHJlc3NlZERhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHJldHVybiBjb21wcmVzc2VkRGF0YTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGVjb21wcmVzcyA9IGRlY29tcHJlc3M7XG4vKipcbiAqIExvYWQgWlN0YW5kYXJkIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHNldC5cbiAqL1xuZnVuY3Rpb24gbG9hZFpzdGQoKSB7XG4gICAgaWYgKCF6c3RkKSB7XG4gICAgICAgIHpzdGQgPSAoMCwgZGVwc18xLmdldFpzdGRMaWJyYXJ5KSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXByZXNzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/compression.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js":
/*!*******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OP_MSG = exports.OP_COMPRESSED = exports.OP_DELETE = exports.OP_QUERY = exports.OP_INSERT = exports.OP_UPDATE = exports.OP_REPLY = exports.MIN_SUPPORTED_QE_SERVER_VERSION = exports.MIN_SUPPORTED_QE_WIRE_VERSION = exports.MAX_SUPPORTED_WIRE_VERSION = exports.MIN_SUPPORTED_WIRE_VERSION = exports.MAX_SUPPORTED_SERVER_VERSION = exports.MIN_SUPPORTED_SERVER_VERSION = void 0;\nexports.MIN_SUPPORTED_SERVER_VERSION = '3.6';\nexports.MAX_SUPPORTED_SERVER_VERSION = '7.0';\nexports.MIN_SUPPORTED_WIRE_VERSION = 6;\nexports.MAX_SUPPORTED_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_WIRE_VERSION = 21;\nexports.MIN_SUPPORTED_QE_SERVER_VERSION = '7.0';\nexports.OP_REPLY = 1;\nexports.OP_UPDATE = 2001;\nexports.OP_INSERT = 2002;\nexports.OP_QUERY = 2004;\nexports.OP_DELETE = 2006;\nexports.OP_COMPRESSED = 2012;\nexports.OP_MSG = 2013;\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvd2lyZV9wcm90b2NvbC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYyxHQUFHLHFCQUFxQixHQUFHLGlCQUFpQixHQUFHLGdCQUFnQixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGdCQUFnQixHQUFHLHVDQUF1QyxHQUFHLHFDQUFxQyxHQUFHLGtDQUFrQyxHQUFHLGtDQUFrQyxHQUFHLG9DQUFvQyxHQUFHLG9DQUFvQztBQUNsWCxvQ0FBb0M7QUFDcEMsb0NBQW9DO0FBQ3BDLGtDQUFrQztBQUNsQyxrQ0FBa0M7QUFDbEMscUNBQXFDO0FBQ3JDLHVDQUF1QztBQUN2QyxnQkFBZ0I7QUFDaEIsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixnQkFBZ0I7QUFDaEIsaUJBQWlCO0FBQ2pCLHFCQUFxQjtBQUNyQixjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL2NvbnN0YW50cy5qcz8yOWZmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PUF9NU0cgPSBleHBvcnRzLk9QX0NPTVBSRVNTRUQgPSBleHBvcnRzLk9QX0RFTEVURSA9IGV4cG9ydHMuT1BfUVVFUlkgPSBleHBvcnRzLk9QX0lOU0VSVCA9IGV4cG9ydHMuT1BfVVBEQVRFID0gZXhwb3J0cy5PUF9SRVBMWSA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTiA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9RRV9XSVJFX1ZFUlNJT04gPSBleHBvcnRzLk1BWF9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gZXhwb3J0cy5NSU5fU1VQUE9SVEVEX1dJUkVfVkVSU0lPTiA9IGV4cG9ydHMuTUFYX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9IGV4cG9ydHMuTUlOX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9IHZvaWQgMDtcbmV4cG9ydHMuTUlOX1NVUFBPUlRFRF9TRVJWRVJfVkVSU0lPTiA9ICczLjYnO1xuZXhwb3J0cy5NQVhfU1VQUE9SVEVEX1NFUlZFUl9WRVJTSU9OID0gJzcuMCc7XG5leHBvcnRzLk1JTl9TVVBQT1JURURfV0lSRV9WRVJTSU9OID0gNjtcbmV4cG9ydHMuTUFYX1NVUFBPUlRFRF9XSVJFX1ZFUlNJT04gPSAyMTtcbmV4cG9ydHMuTUlOX1NVUFBPUlRFRF9RRV9XSVJFX1ZFUlNJT04gPSAyMTtcbmV4cG9ydHMuTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTiA9ICc3LjAnO1xuZXhwb3J0cy5PUF9SRVBMWSA9IDE7XG5leHBvcnRzLk9QX1VQREFURSA9IDIwMDE7XG5leHBvcnRzLk9QX0lOU0VSVCA9IDIwMDI7XG5leHBvcnRzLk9QX1FVRVJZID0gMjAwNDtcbmV4cG9ydHMuT1BfREVMRVRFID0gMjAwNjtcbmV4cG9ydHMuT1BfQ09NUFJFU1NFRCA9IDIwMTI7XG5leHBvcnRzLk9QX01TRyA9IDIwMTM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/shared.js":
/*!****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cmap/wire_protocol/shared.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isSharded = exports.getReadPreference = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ../../sdam/common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst topology_description_1 = __webpack_require__(/*! ../../sdam/topology_description */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/topology_description.js\");\nfunction getReadPreference(options) {\n    // Default to command version of the readPreference\n    let readPreference = options?.readPreference ?? read_preference_1.ReadPreference.primary;\n    // If we have an option readPreference override the command one\n    if (options?.readPreference) {\n        readPreference = options.readPreference;\n    }\n    if (typeof readPreference === 'string') {\n        readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    }\n    if (!(readPreference instanceof read_preference_1.ReadPreference)) {\n        throw new error_1.MongoInvalidArgumentError('Option \"readPreference\" must be a ReadPreference instance');\n    }\n    return readPreference;\n}\nexports.getReadPreference = getReadPreference;\nfunction isSharded(topologyOrServer) {\n    if (topologyOrServer == null) {\n        return false;\n    }\n    if (topologyOrServer.description && topologyOrServer.description.type === common_1.ServerType.Mongos) {\n        return true;\n    }\n    // NOTE: This is incredibly inefficient, and should be removed once command construction\n    //       happens based on `Server` not `Topology`.\n    if (topologyOrServer.description && topologyOrServer.description instanceof topology_description_1.TopologyDescription) {\n        const servers = Array.from(topologyOrServer.description.servers.values());\n        return servers.some((server) => server.type === common_1.ServerType.Mongos);\n    }\n    return false;\n}\nexports.isSharded = isSharded;\n//# sourceMappingURL=shared.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2NtYXAvd2lyZV9wcm90b2NvbC9zaGFyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcseUJBQXlCO0FBQzdDLGdCQUFnQixtQkFBTyxDQUFDLDJFQUFhO0FBQ3JDLDBCQUEwQixtQkFBTyxDQUFDLCtGQUF1QjtBQUN6RCxpQkFBaUIsbUJBQU8sQ0FBQyx1RkFBbUI7QUFDNUMsK0JBQStCLG1CQUFPLENBQUMsbUhBQWlDO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY21hcC93aXJlX3Byb3RvY29sL3NoYXJlZC5qcz9lMDg3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1NoYXJkZWQgPSBleHBvcnRzLmdldFJlYWRQcmVmZXJlbmNlID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvclwiKTtcbmNvbnN0IHJlYWRfcHJlZmVyZW5jZV8xID0gcmVxdWlyZShcIi4uLy4uL3JlYWRfcHJlZmVyZW5jZVwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uLy4uL3NkYW0vY29tbW9uXCIpO1xuY29uc3QgdG9wb2xvZ3lfZGVzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi9zZGFtL3RvcG9sb2d5X2Rlc2NyaXB0aW9uXCIpO1xuZnVuY3Rpb24gZ2V0UmVhZFByZWZlcmVuY2Uob3B0aW9ucykge1xuICAgIC8vIERlZmF1bHQgdG8gY29tbWFuZCB2ZXJzaW9uIG9mIHRoZSByZWFkUHJlZmVyZW5jZVxuICAgIGxldCByZWFkUHJlZmVyZW5jZSA9IG9wdGlvbnM/LnJlYWRQcmVmZXJlbmNlID8/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgLy8gSWYgd2UgaGF2ZSBhbiBvcHRpb24gcmVhZFByZWZlcmVuY2Ugb3ZlcnJpZGUgdGhlIGNvbW1hbmQgb25lXG4gICAgaWYgKG9wdGlvbnM/LnJlYWRQcmVmZXJlbmNlKSB7XG4gICAgICAgIHJlYWRQcmVmZXJlbmNlID0gb3B0aW9ucy5yZWFkUHJlZmVyZW5jZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZWFkUHJlZmVyZW5jZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVhZFByZWZlcmVuY2UgPSByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5mcm9tU3RyaW5nKHJlYWRQcmVmZXJlbmNlKTtcbiAgICB9XG4gICAgaWYgKCEocmVhZFByZWZlcmVuY2UgaW5zdGFuY2VvZiByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3B0aW9uIFwicmVhZFByZWZlcmVuY2VcIiBtdXN0IGJlIGEgUmVhZFByZWZlcmVuY2UgaW5zdGFuY2UnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWRQcmVmZXJlbmNlO1xufVxuZXhwb3J0cy5nZXRSZWFkUHJlZmVyZW5jZSA9IGdldFJlYWRQcmVmZXJlbmNlO1xuZnVuY3Rpb24gaXNTaGFyZGVkKHRvcG9sb2d5T3JTZXJ2ZXIpIHtcbiAgICBpZiAodG9wb2xvZ3lPclNlcnZlciA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gJiYgdG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbi50eXBlID09PSBjb21tb25fMS5TZXJ2ZXJUeXBlLk1vbmdvcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gTk9URTogVGhpcyBpcyBpbmNyZWRpYmx5IGluZWZmaWNpZW50LCBhbmQgc2hvdWxkIGJlIHJlbW92ZWQgb25jZSBjb21tYW5kIGNvbnN0cnVjdGlvblxuICAgIC8vICAgICAgIGhhcHBlbnMgYmFzZWQgb24gYFNlcnZlcmAgbm90IGBUb3BvbG9neWAuXG4gICAgaWYgKHRvcG9sb2d5T3JTZXJ2ZXIuZGVzY3JpcHRpb24gJiYgdG9wb2xvZ3lPclNlcnZlci5kZXNjcmlwdGlvbiBpbnN0YW5jZW9mIHRvcG9sb2d5X2Rlc2NyaXB0aW9uXzEuVG9wb2xvZ3lEZXNjcmlwdGlvbikge1xuICAgICAgICBjb25zdCBzZXJ2ZXJzID0gQXJyYXkuZnJvbSh0b3BvbG9neU9yU2VydmVyLmRlc2NyaXB0aW9uLnNlcnZlcnMudmFsdWVzKCkpO1xuICAgICAgICByZXR1cm4gc2VydmVycy5zb21lKChzZXJ2ZXIpID0+IHNlcnZlci50eXBlID09PSBjb21tb25fMS5TZXJ2ZXJUeXBlLk1vbmdvcyk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNTaGFyZGVkID0gaXNTaGFyZGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/shared.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/collection.js":
/*!*************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/collection.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Collection = void 0;\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/../../../../../node_modules/mongodb/lib/bulk/ordered.js\");\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/../../../../../node_modules/mongodb/lib/bulk/unordered.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/../../../../../node_modules/mongodb/lib/change_stream.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/find_cursor.js\");\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nconst list_search_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_search_indexes_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./operations/bulk_write */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/bulk_write.js\");\nconst count_1 = __webpack_require__(/*! ./operations/count */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/count.js\");\nconst count_documents_1 = __webpack_require__(/*! ./operations/count_documents */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/count_documents.js\");\nconst delete_1 = __webpack_require__(/*! ./operations/delete */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/delete.js\");\nconst distinct_1 = __webpack_require__(/*! ./operations/distinct */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/distinct.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/drop.js\");\nconst estimated_document_count_1 = __webpack_require__(/*! ./operations/estimated_document_count */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/estimated_document_count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/find_and_modify.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/indexes.js\");\nconst insert_1 = __webpack_require__(/*! ./operations/insert */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/insert.js\");\nconst is_capped_1 = __webpack_require__(/*! ./operations/is_capped */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/is_capped.js\");\nconst options_operation_1 = __webpack_require__(/*! ./operations/options_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/options_operation.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/rename.js\");\nconst create_1 = __webpack_require__(/*! ./operations/search_indexes/create */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/create.js\");\nconst drop_2 = __webpack_require__(/*! ./operations/search_indexes/drop */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/drop.js\");\nconst update_1 = __webpack_require__(/*! ./operations/search_indexes/update */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/update.js\");\nconst update_2 = __webpack_require__(/*! ./operations/update */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/update.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nclass Collection {\n    /**\n     * Create a new Collection instance\n     * @internal\n     */\n    constructor(db, name, options) {\n        (0, utils_1.checkCollectionName)(name);\n        // Internal state\n        this.s = {\n            db,\n            options,\n            namespace: new utils_1.MongoDBCollectionNamespace(db.databaseName, name),\n            pkFactory: db.options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.client = db.client;\n    }\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName() {\n        return this.s.namespace.db;\n    }\n    /**\n     * The name of this collection\n     */\n    get collectionName() {\n        return this.s.namespace.collection;\n    }\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace() {\n        return this.fullNamespace.toString();\n    }\n    /**\n     *  @internal\n     *\n     * The `MongoDBNamespace` for the collection.\n     */\n    get fullNamespace() {\n        return this.s.namespace;\n    }\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern() {\n        if (this.s.readConcern == null) {\n            return this.s.db.readConcern;\n        }\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.s.db.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern() {\n        if (this.s.writeConcern == null) {\n            return this.s.db.writeConcern;\n        }\n        return this.s.writeConcern;\n    }\n    /** The current index hint for the collection */\n    get hint() {\n        return this.s.collectionHint;\n    }\n    set hint(v) {\n        this.s.collectionHint = (0, utils_1.normalizeHintField)(v);\n    }\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    async insertOne(doc, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    async insertMany(docs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    async bulkWrite(operations, options) {\n        if (!Array.isArray(operations)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options ?? { ordered: true })));\n    }\n    /**\n     * Update a single document in a collection\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The update operations to be applied to the document\n     * @param options - Optional settings for the command\n     */\n    async updateOne(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    async replaceOne(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Update multiple documents in a collection\n     *\n     * @param filter - The filter used to select the documents to update\n     * @param update - The update operations to be applied to the documents\n     * @param options - Optional settings for the command\n     */\n    async updateMany(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_2.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteOne(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    async deleteMany(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    async rename(newName, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this, newName, {\n            ...options,\n            readPreference: read_preference_1.ReadPreference.PRIMARY\n        }));\n    }\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async drop(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options));\n    }\n    async findOne(filter = {}, options = {}) {\n        return this.find(filter, options).limit(-1).batchSize(1).next();\n    }\n    find(filter = {}, options = {}) {\n        return new find_cursor_1.FindCursor(this.client, this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async options(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    async isCapped(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    async createIndex(indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    async createIndexes(indexSpecs, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, { ...options, maxTimeMS: undefined })));\n    }\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    async dropIndex(indexName, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, indexName, {\n            ...(0, utils_1.resolveOptions)(this, options),\n            readPreference: read_preference_1.ReadPreference.primary\n        }));\n    }\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropIndexes(options) {\n        try {\n            await (0, execute_operation_1.executeOperation)(this.client, new indexes_1.DropIndexOperation(this, '*', (0, utils_1.resolveOptions)(this, options)));\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options) {\n        return new list_indexes_cursor_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    async indexExists(indexes, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    async estimatedDocumentCount(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    async countDocuments(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async distinct(key, filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    async indexes(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndDelete(filter, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndReplace(filter, replacement, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)));\n    }\n    async findOneAndUpdate(filter, update, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        if (!Array.isArray(pipeline)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n        }\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options) {\n        return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options) {\n        return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    async count(filter = {}, options = {}) {\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.fullNamespace, filter, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listSearchIndexes(indexNameOrOptions, options) {\n        options =\n            typeof indexNameOrOptions === 'object' ? indexNameOrOptions : options == null ? {} : options;\n        const indexName = indexNameOrOptions == null\n            ? null\n            : typeof indexNameOrOptions === 'object'\n                ? null\n                : indexNameOrOptions;\n        return new list_search_indexes_cursor_1.ListSearchIndexesCursor(this, indexName, options);\n    }\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async createSearchIndex(description) {\n        const [index] = await this.createSearchIndexes([description]);\n        return index;\n    }\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */\n    async createSearchIndexes(descriptions) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_1.CreateSearchIndexesOperation(this, descriptions));\n    }\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async dropSearchIndex(name) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_2.DropSearchIndexOperation(this, name));\n    }\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    async updateSearchIndex(name, definition) {\n        return (0, execute_operation_1.executeOperation)(this.client, new update_1.UpdateSearchIndexOperation(this, name, definition));\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/collection.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/connection_string.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/connection_string.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.resolveSRVRecord = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst mongodb_connection_string_url_1 = __webpack_require__(/*! mongodb-connection-string-url */ \"(ssr)/../../../../../node_modules/mongodb-connection-string-url/lib/index.js\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst client_metadata_1 = __webpack_require__(/*! ./cmap/handshake/client_metadata */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/handshake/client_metadata.js\");\nconst compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nconst encrypter_1 = __webpack_require__(/*! ./encrypter */ \"(ssr)/../../../../../node_modules/mongodb/lib/encrypter.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_client.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_logger.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nasync function resolveSRVRecord(options) {\n    if (typeof options.srvHost !== 'string') {\n        throw new error_1.MongoAPIError('Option \"srvHost\" must not be empty');\n    }\n    if (options.srvHost.split('.').length < 3) {\n        // TODO(NODE-3484): Replace with MongoConnectionStringError\n        throw new error_1.MongoAPIError('URI must include hostname, domain name, and tld');\n    }\n    // Resolve the SRV record and use the result as the list of hosts to connect to.\n    const lookupAddress = options.srvHost;\n    const addresses = await dns.promises.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`);\n    if (addresses.length === 0) {\n        throw new error_1.MongoAPIError('No addresses found at host');\n    }\n    for (const { name } of addresses) {\n        if (!(0, utils_1.matchesParentDomain)(name, lookupAddress)) {\n            throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n        }\n    }\n    const hostAddresses = addresses.map(r => utils_1.HostAddress.fromString(`${r.name}:${r.port ?? 27017}`));\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    // Resolve TXT record and add options from there if they exist.\n    let record;\n    try {\n        record = await dns.promises.resolveTxt(lookupAddress);\n    }\n    catch (error) {\n        if (error.code !== 'ENODATA' && error.code !== 'ENOTFOUND') {\n            throw error;\n        }\n        return hostAddresses;\n    }\n    if (record.length > 1) {\n        throw new error_1.MongoParseError('Multiple text records not allowed');\n    }\n    const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n    const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n    if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n        throw new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`);\n    }\n    if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n        throw new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record');\n    }\n    const source = txtRecordOptions.get('authSource') ?? undefined;\n    const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n    const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n    if (!options.userSpecifiedAuthSource &&\n        source &&\n        options.credentials &&\n        !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n        options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n    }\n    if (!options.userSpecifiedReplicaSet && replicaSet) {\n        options.replicaSet = replicaSet;\n    }\n    if (loadBalanced === 'true') {\n        options.loadBalanced = true;\n    }\n    if (options.replicaSet && options.srvMaxHosts > 0) {\n        throw new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts');\n    }\n    validateLoadBalancedOptions(hostAddresses, options, true);\n    return hostAddresses;\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param allOptions - All options provided by user or included in default options map\n * @throws MongoAPIError if TLS options are invalid\n */\nfunction checkTLSOptions(allOptions) {\n    if (!allOptions)\n        return;\n    const check = (a, b) => {\n        if (allOptions.has(a) && allOptions.has(b)) {\n            throw new error_1.MongoAPIError(`The '${a}' option cannot be used with the '${b}' option`);\n        }\n    };\n    check('tlsInsecure', 'tlsAllowInvalidCertificates');\n    check('tlsInsecure', 'tlsAllowInvalidHostnames');\n    check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n    check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n    check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n    check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nfunction getBoolean(name, value) {\n    if (typeof value === 'boolean')\n        return value;\n    switch (value) {\n        case 'true':\n            return true;\n        case 'false':\n            return false;\n        default:\n            throw new error_1.MongoParseError(`${name} must be either \"true\" or \"false\"`);\n    }\n}\nfunction getIntFromOptions(name, value) {\n    const parsedInt = (0, utils_1.parseInteger)(value);\n    if (parsedInt != null) {\n        return parsedInt;\n    }\n    throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUIntFromOptions(name, value) {\n    const parsedValue = getIntFromOptions(name, value);\n    if (parsedValue < 0) {\n        throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n    }\n    return parsedValue;\n}\nfunction* entriesFromString(value) {\n    if (value === '') {\n        return;\n    }\n    const keyValuePairs = value.split(',');\n    for (const keyValue of keyValuePairs) {\n        const [key, value] = keyValue.split(/:(.*)/);\n        if (value == null) {\n            throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n        }\n        yield [key, value];\n    }\n}\nclass CaseInsensitiveMap extends Map {\n    constructor(entries = []) {\n        super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n    }\n    has(k) {\n        return super.has(k.toLowerCase());\n    }\n    get(k) {\n        return super.get(k.toLowerCase());\n    }\n    set(k, v) {\n        return super.set(k.toLowerCase(), v);\n    }\n    delete(k) {\n        return super.delete(k.toLowerCase());\n    }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n    if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n        options = mongoClient;\n        mongoClient = undefined;\n    }\n    // validate BSONOptions\n    if (options.useBigInt64 && typeof options.promoteLongs === 'boolean' && !options.promoteLongs) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    if (options.useBigInt64 && typeof options.promoteValues === 'boolean' && !options.promoteValues) {\n        throw new error_1.MongoAPIError('Must request either bigint or Long for int64 deserialization');\n    }\n    const url = new mongodb_connection_string_url_1.default(uri);\n    const { hosts, isSRV } = url;\n    const mongoOptions = Object.create(null);\n    // Feature flags\n    for (const flag of Object.getOwnPropertySymbols(options)) {\n        if (exports.FEATURE_FLAGS.has(flag)) {\n            mongoOptions[flag] = options[flag];\n        }\n    }\n    mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n    const urlOptions = new CaseInsensitiveMap();\n    if (url.pathname !== '/' && url.pathname !== '') {\n        const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n        if (dbName) {\n            urlOptions.set('dbName', [dbName]);\n        }\n    }\n    if (url.username !== '') {\n        const auth = {\n            username: decodeURIComponent(url.username)\n        };\n        if (typeof url.password === 'string') {\n            auth.password = decodeURIComponent(url.password);\n        }\n        urlOptions.set('auth', [auth]);\n    }\n    for (const key of url.searchParams.keys()) {\n        const values = url.searchParams.getAll(key);\n        const isReadPreferenceTags = /readPreferenceTags/i.test(key);\n        if (!isReadPreferenceTags && values.length > 1) {\n            throw new error_1.MongoInvalidArgumentError(`URI option \"${key}\" cannot appear more than once in the connection string`);\n        }\n        if (!isReadPreferenceTags && values.includes('')) {\n            throw new error_1.MongoAPIError(`URI option \"${key}\" cannot be specified with no value`);\n        }\n        if (!urlOptions.has(key)) {\n            urlOptions.set(key, values);\n        }\n    }\n    const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n    // Validate options that can only be provided by one of uri or object\n    if (urlOptions.has('serverApi')) {\n        throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    const uriMechanismProperties = urlOptions.get('authMechanismProperties');\n    if (uriMechanismProperties) {\n        for (const property of uriMechanismProperties) {\n            if (/(^|,)ALLOWED_HOSTS:/.test(property)) {\n                throw new error_1.MongoParseError('Auth mechanism property ALLOWED_HOSTS is not allowed in the connection string.');\n            }\n        }\n    }\n    if (objectOptions.has('loadBalanced')) {\n        throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n    }\n    // All option collection\n    const allProvidedOptions = new CaseInsensitiveMap();\n    const allProvidedKeys = new Set([...urlOptions.keys(), ...objectOptions.keys()]);\n    for (const key of allProvidedKeys) {\n        const values = [];\n        const objectOptionValue = objectOptions.get(key);\n        if (objectOptionValue != null) {\n            values.push(objectOptionValue);\n        }\n        const urlValues = urlOptions.get(key) ?? [];\n        values.push(...urlValues);\n        allProvidedOptions.set(key, values);\n    }\n    if (allProvidedOptions.has('tls') || allProvidedOptions.has('ssl')) {\n        const tlsAndSslOpts = (allProvidedOptions.get('tls') || [])\n            .concat(allProvidedOptions.get('ssl') || [])\n            .map(getBoolean.bind(null, 'tls/ssl'));\n        if (new Set(tlsAndSslOpts).size !== 1) {\n            throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n        }\n    }\n    checkTLSOptions(allProvidedOptions);\n    const unsupportedOptions = (0, utils_1.setDifference)(allProvidedKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n    if (unsupportedOptions.size !== 0) {\n        const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n        const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n        throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n    }\n    // Option parsing and setting\n    for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n        const values = allProvidedOptions.get(key);\n        if (!values || values.length === 0) {\n            if (exports.DEFAULT_OPTIONS.has(key)) {\n                setOption(mongoOptions, key, descriptor, [exports.DEFAULT_OPTIONS.get(key)]);\n            }\n        }\n        else {\n            const { deprecated } = descriptor;\n            if (deprecated) {\n                const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n                (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n            }\n            setOption(mongoOptions, key, descriptor, values);\n        }\n    }\n    if (mongoOptions.credentials) {\n        const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n        const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n        const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n        const isOidc = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_OIDC;\n        if ((isGssapi || isX509) &&\n            allProvidedOptions.has('authSource') &&\n            mongoOptions.credentials.source !== '$external') {\n            // If authSource was explicitly given and its incorrect, we error\n            throw new error_1.MongoParseError(`authMechanism ${mongoOptions.credentials.mechanism} requires an authSource of '$external'`);\n        }\n        if (!(isGssapi || isX509 || isAws || isOidc) &&\n            mongoOptions.dbName &&\n            !allProvidedOptions.has('authSource')) {\n            // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n            // and there was no specific authSource given\n            mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n                source: mongoOptions.dbName\n            });\n        }\n        if (isAws && mongoOptions.credentials.username && !mongoOptions.credentials.password) {\n            throw new error_1.MongoMissingCredentialsError(`When using ${mongoOptions.credentials.mechanism} password must be set when a username is specified`);\n        }\n        mongoOptions.credentials.validate();\n        // Check if the only auth related option provided was authSource, if so we can remove credentials\n        if (mongoOptions.credentials.password === '' &&\n            mongoOptions.credentials.username === '' &&\n            mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT &&\n            Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n            delete mongoOptions.credentials;\n        }\n    }\n    if (!mongoOptions.dbName) {\n        // dbName default is applied here because of the credential validation above\n        mongoOptions.dbName = 'test';\n    }\n    validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n    if (mongoClient && mongoOptions.autoEncryption) {\n        encrypter_1.Encrypter.checkForMongoCrypt();\n        mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n        mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n    }\n    // Potential SRV Overrides and SRV connection string validations\n    mongoOptions.userSpecifiedAuthSource =\n        objectOptions.has('authSource') || urlOptions.has('authSource');\n    mongoOptions.userSpecifiedReplicaSet =\n        objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n    if (isSRV) {\n        // SRV Record is resolved upon connecting\n        mongoOptions.srvHost = hosts[0];\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n        }\n        if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n        }\n        // SRV turns on TLS by default, but users can override and turn it off\n        const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n        const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n        if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n            mongoOptions.tls = true;\n        }\n    }\n    else {\n        const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') ||\n            objectOptions.has('srvMaxHosts') ||\n            urlOptions.has('srvServiceName') ||\n            objectOptions.has('srvServiceName');\n        if (userSpecifiedSrvOptions) {\n            throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n        }\n    }\n    if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n        throw new error_1.MongoParseError('directConnection option requires exactly one host');\n    }\n    if (!mongoOptions.proxyHost &&\n        (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n    }\n    if ((mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n        (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)) {\n        throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n    }\n    const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => urlOptions.get(key) ?? []);\n    if (proxyOptions.some(options => options.length > 1)) {\n        throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n    }\n    const loggerFeatureFlag = Symbol.for('@@mdb.enableMongoLogger');\n    mongoOptions[loggerFeatureFlag] = mongoOptions[loggerFeatureFlag] ?? false;\n    let loggerEnvOptions = {};\n    let loggerClientOptions = {};\n    if (mongoOptions[loggerFeatureFlag]) {\n        loggerEnvOptions = {\n            MONGODB_LOG_COMMAND: process.env.MONGODB_LOG_COMMAND,\n            MONGODB_LOG_TOPOLOGY: process.env.MONGODB_LOG_TOPOLOGY,\n            MONGODB_LOG_SERVER_SELECTION: process.env.MONGODB_LOG_SERVER_SELECTION,\n            MONGODB_LOG_CONNECTION: process.env.MONGODB_LOG_CONNECTION,\n            MONGODB_LOG_ALL: process.env.MONGODB_LOG_ALL,\n            MONGODB_LOG_MAX_DOCUMENT_LENGTH: process.env.MONGODB_LOG_MAX_DOCUMENT_LENGTH,\n            MONGODB_LOG_PATH: process.env.MONGODB_LOG_PATH,\n            ...mongoOptions[Symbol.for('@@mdb.internalLoggerConfig')]\n        };\n        loggerClientOptions = {\n            mongodbLogPath: mongoOptions.mongodbLogPath\n        };\n    }\n    mongoOptions.mongoLoggerOptions = mongo_logger_1.MongoLogger.resolveOptions(loggerEnvOptions, loggerClientOptions);\n    mongoOptions.metadata = (0, client_metadata_1.makeClientMetadata)(mongoOptions);\n    return mongoOptions;\n}\nexports.parseOptions = parseOptions;\n/**\n * #### Throws if LB mode is true:\n * - hosts contains more than one host\n * - there is a replicaSet name set\n * - directConnection is set\n * - if srvMaxHosts is used when an srv connection string is passed in\n *\n * @throws MongoParseError\n */\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n    if (mongoOptions.loadBalanced) {\n        if (hosts.length > 1) {\n            throw new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n        }\n        if (mongoOptions.replicaSet) {\n            throw new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n        }\n        if (mongoOptions.directConnection) {\n            throw new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n        }\n        if (isSrv && mongoOptions.srvMaxHosts > 0) {\n            throw new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n        }\n    }\n    return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n    const { target, type, transform } = descriptor;\n    const name = target ?? key;\n    switch (type) {\n        case 'boolean':\n            mongoOptions[name] = getBoolean(name, values[0]);\n            break;\n        case 'int':\n            mongoOptions[name] = getIntFromOptions(name, values[0]);\n            break;\n        case 'uint':\n            mongoOptions[name] = getUIntFromOptions(name, values[0]);\n            break;\n        case 'string':\n            if (values[0] == null) {\n                break;\n            }\n            mongoOptions[name] = String(values[0]);\n            break;\n        case 'record':\n            if (!(0, utils_1.isRecord)(values[0])) {\n                throw new error_1.MongoParseError(`${name} must be an object`);\n            }\n            mongoOptions[name] = values[0];\n            break;\n        case 'any':\n            mongoOptions[name] = values[0];\n            break;\n        default: {\n            if (!transform) {\n                throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n            }\n            const transformValue = transform({ name, options: mongoOptions, values });\n            mongoOptions[name] = transformValue;\n            break;\n        }\n    }\n}\nexports.OPTIONS = {\n    appName: {\n        type: 'string'\n    },\n    auth: {\n        target: 'credentials',\n        transform({ name, options, values: [value] }) {\n            if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n                throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                username: value.username,\n                password: value.password\n            });\n        }\n    },\n    authMechanism: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const mechanisms = Object.values(providers_1.AuthMechanism);\n            const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw `\\b${value}\\b`, 'i')));\n            if (!mechanism) {\n                throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n            }\n            let source = options.credentials?.source;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN ||\n                providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n                // some mechanisms have '$external' as the Auth Source\n                source = '$external';\n            }\n            let password = options.credentials?.password;\n            if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n                password = undefined;\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanism,\n                source,\n                password\n            });\n        }\n    },\n    authMechanismProperties: {\n        target: 'credentials',\n        transform({ options, values }) {\n            // We can have a combination of options passed in the URI and options passed\n            // as an object to the MongoClient. So we must transform the string options\n            // as well as merge them together with a potentially provided object.\n            let mechanismProperties = Object.create(null);\n            for (const optionValue of values) {\n                if (typeof optionValue === 'string') {\n                    for (const [key, value] of entriesFromString(optionValue)) {\n                        try {\n                            mechanismProperties[key] = getBoolean(key, value);\n                        }\n                        catch {\n                            mechanismProperties[key] = value;\n                        }\n                    }\n                }\n                else {\n                    if (!(0, utils_1.isRecord)(optionValue)) {\n                        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n                    }\n                    mechanismProperties = { ...optionValue };\n                }\n            }\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n                mechanismProperties\n            });\n        }\n    },\n    authSource: {\n        target: 'credentials',\n        transform({ options, values: [value] }) {\n            const source = String(value);\n            return mongo_credentials_1.MongoCredentials.merge(options.credentials, { source });\n        }\n    },\n    autoEncryption: {\n        type: 'record'\n    },\n    bsonRegExp: {\n        type: 'boolean'\n    },\n    serverApi: {\n        target: 'serverApi',\n        transform({ values: [version] }) {\n            const serverApiToValidate = typeof version === 'string' ? { version } : version;\n            const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n            if (!versionToValidate) {\n                throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n                throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n            }\n            return serverApiToValidate;\n        }\n    },\n    checkKeys: {\n        type: 'boolean'\n    },\n    compressors: {\n        default: 'none',\n        target: 'compressors',\n        transform({ values }) {\n            const compressionList = new Set();\n            for (const compVal of values) {\n                const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n                if (!Array.isArray(compValArray)) {\n                    throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n                }\n                for (const c of compValArray) {\n                    if (Object.keys(compression_1.Compressor).includes(String(c))) {\n                        compressionList.add(String(c));\n                    }\n                    else {\n                        throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n                    }\n                }\n            }\n            return [...compressionList];\n        }\n    },\n    connectTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    dbName: {\n        type: 'string'\n    },\n    directConnection: {\n        default: false,\n        type: 'boolean'\n    },\n    driverInfo: {\n        default: {},\n        type: 'record'\n    },\n    enableUtf8Validation: { type: 'boolean', default: true },\n    family: {\n        transform({ name, values: [value] }) {\n            const transformValue = getIntFromOptions(name, value);\n            if (transformValue === 4 || transformValue === 6) {\n                return transformValue;\n            }\n            throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n        }\n    },\n    fieldsAsRaw: {\n        type: 'record'\n    },\n    forceServerObjectId: {\n        default: false,\n        type: 'boolean'\n    },\n    fsync: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    fsync: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n            return wc;\n        }\n    },\n    heartbeatFrequencyMS: {\n        default: 10000,\n        type: 'uint'\n    },\n    ignoreUndefined: {\n        type: 'boolean'\n    },\n    j: {\n        deprecated: 'Please use journal instead',\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    journal: {\n        target: 'writeConcern',\n        transform({ name, options, values: [value] }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    journal: getBoolean(name, value)\n                }\n            });\n            if (!wc)\n                throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n            return wc;\n        }\n    },\n    loadBalanced: {\n        default: false,\n        type: 'boolean'\n    },\n    localThresholdMS: {\n        default: 15,\n        type: 'uint'\n    },\n    maxConnecting: {\n        default: 2,\n        transform({ name, values: [value] }) {\n            const maxConnecting = getUIntFromOptions(name, value);\n            if (maxConnecting === 0) {\n                throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n            }\n            return maxConnecting;\n        }\n    },\n    maxIdleTimeMS: {\n        default: 0,\n        type: 'uint'\n    },\n    maxPoolSize: {\n        default: 100,\n        type: 'uint'\n    },\n    maxStalenessSeconds: {\n        target: 'readPreference',\n        transform({ name, options, values: [value] }) {\n            const maxStalenessSeconds = getUIntFromOptions(name, value);\n            if (options.readPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, maxStalenessSeconds }\n                });\n            }\n            else {\n                return new read_preference_1.ReadPreference('secondary', undefined, { maxStalenessSeconds });\n            }\n        }\n    },\n    minInternalBufferSize: {\n        type: 'uint'\n    },\n    minPoolSize: {\n        default: 0,\n        type: 'uint'\n    },\n    minHeartbeatFrequencyMS: {\n        default: 500,\n        type: 'uint'\n    },\n    monitorCommands: {\n        default: false,\n        type: 'boolean'\n    },\n    name: {\n        target: 'driverInfo',\n        transform({ values: [value], options }) {\n            return { ...options.driverInfo, name: String(value) };\n        }\n    },\n    noDelay: {\n        default: true,\n        type: 'boolean'\n    },\n    pkFactory: {\n        default: utils_1.DEFAULT_PK_FACTORY,\n        transform({ values: [value] }) {\n            if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n                return value;\n            }\n            throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n        }\n    },\n    promoteBuffers: {\n        type: 'boolean'\n    },\n    promoteLongs: {\n        type: 'boolean'\n    },\n    promoteValues: {\n        type: 'boolean'\n    },\n    useBigInt64: {\n        type: 'boolean'\n    },\n    proxyHost: {\n        type: 'string'\n    },\n    proxyPassword: {\n        type: 'string'\n    },\n    proxyPort: {\n        type: 'uint'\n    },\n    proxyUsername: {\n        type: 'string'\n    },\n    raw: {\n        default: false,\n        type: 'boolean'\n    },\n    readConcern: {\n        transform({ values: [value], options }) {\n            if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n                return read_concern_1.ReadConcern.fromOptions({ ...options.readConcern, ...value });\n            }\n            throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n        }\n    },\n    readConcernLevel: {\n        target: 'readConcern',\n        transform({ values: [level], options }) {\n            return read_concern_1.ReadConcern.fromOptions({\n                ...options.readConcern,\n                level: level\n            });\n        }\n    },\n    readPreference: {\n        default: read_preference_1.ReadPreference.primary,\n        transform({ values: [value], options }) {\n            if (value instanceof read_preference_1.ReadPreference) {\n                return read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n            }\n            if ((0, utils_1.isRecord)(value, ['mode'])) {\n                const rp = read_preference_1.ReadPreference.fromOptions({\n                    readPreference: { ...options.readPreference, ...value },\n                    ...value\n                });\n                if (rp)\n                    return rp;\n                else\n                    throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n            }\n            if (typeof value === 'string') {\n                const rpOpts = {\n                    hedge: options.readPreference?.hedge,\n                    maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n                };\n                return new read_preference_1.ReadPreference(value, options.readPreference?.tags, rpOpts);\n            }\n            throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n        }\n    },\n    readPreferenceTags: {\n        target: 'readPreference',\n        transform({ values, options }) {\n            const tags = Array.isArray(values[0])\n                ? values[0]\n                : values;\n            const readPreferenceTags = [];\n            for (const tag of tags) {\n                const readPreferenceTag = Object.create(null);\n                if (typeof tag === 'string') {\n                    for (const [k, v] of entriesFromString(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                if ((0, utils_1.isRecord)(tag)) {\n                    for (const [k, v] of Object.entries(tag)) {\n                        readPreferenceTag[k] = v;\n                    }\n                }\n                readPreferenceTags.push(readPreferenceTag);\n            }\n            return read_preference_1.ReadPreference.fromOptions({\n                readPreference: options.readPreference,\n                readPreferenceTags\n            });\n        }\n    },\n    replicaSet: {\n        type: 'string'\n    },\n    retryReads: {\n        default: true,\n        type: 'boolean'\n    },\n    retryWrites: {\n        default: true,\n        type: 'boolean'\n    },\n    serializeFunctions: {\n        type: 'boolean'\n    },\n    serverSelectionTimeoutMS: {\n        default: 30000,\n        type: 'uint'\n    },\n    servername: {\n        type: 'string'\n    },\n    socketTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    srvMaxHosts: {\n        type: 'uint',\n        default: 0\n    },\n    srvServiceName: {\n        type: 'string',\n        default: 'mongodb'\n    },\n    ssl: {\n        target: 'tls',\n        type: 'boolean'\n    },\n    tls: {\n        type: 'boolean'\n    },\n    tlsAllowInvalidCertificates: {\n        target: 'rejectUnauthorized',\n        transform({ name, values: [value] }) {\n            // allowInvalidCertificates is the inverse of rejectUnauthorized\n            return !getBoolean(name, value);\n        }\n    },\n    tlsAllowInvalidHostnames: {\n        target: 'checkServerIdentity',\n        transform({ name, values: [value] }) {\n            // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n            return getBoolean(name, value) ? () => undefined : undefined;\n        }\n    },\n    tlsCAFile: {\n        type: 'string'\n    },\n    tlsCRLFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFile: {\n        type: 'string'\n    },\n    tlsCertificateKeyFilePassword: {\n        target: 'passphrase',\n        type: 'any'\n    },\n    tlsInsecure: {\n        transform({ name, options, values: [value] }) {\n            const tlsInsecure = getBoolean(name, value);\n            if (tlsInsecure) {\n                options.checkServerIdentity = () => undefined;\n                options.rejectUnauthorized = false;\n            }\n            else {\n                options.checkServerIdentity = options.tlsAllowInvalidHostnames\n                    ? () => undefined\n                    : undefined;\n                options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n            }\n            return tlsInsecure;\n        }\n    },\n    w: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            return write_concern_1.WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value } });\n        }\n    },\n    waitQueueTimeoutMS: {\n        default: 0,\n        type: 'uint'\n    },\n    writeConcern: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        ...value\n                    }\n                });\n            }\n            else if (value === 'majority' || typeof value === 'number') {\n                return write_concern_1.WriteConcern.fromOptions({\n                    writeConcern: {\n                        ...options.writeConcern,\n                        w: value\n                    }\n                });\n            }\n            throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n        }\n    },\n    wtimeout: {\n        deprecated: 'Please use wtimeoutMS instead',\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeout: getUIntFromOptions('wtimeout', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    wtimeoutMS: {\n        target: 'writeConcern',\n        transform({ values: [value], options }) {\n            const wc = write_concern_1.WriteConcern.fromOptions({\n                writeConcern: {\n                    ...options.writeConcern,\n                    wtimeoutMS: getUIntFromOptions('wtimeoutMS', value)\n                }\n            });\n            if (wc)\n                return wc;\n            throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n        }\n    },\n    zlibCompressionLevel: {\n        default: 0,\n        type: 'int'\n    },\n    // Custom types for modifying core behavior\n    connectionType: { type: 'any' },\n    srvPoller: { type: 'any' },\n    // Accepted NodeJS Options\n    minDHSize: { type: 'any' },\n    pskCallback: { type: 'any' },\n    secureContext: { type: 'any' },\n    enableTrace: { type: 'any' },\n    requestCert: { type: 'any' },\n    rejectUnauthorized: { type: 'any' },\n    checkServerIdentity: { type: 'any' },\n    ALPNProtocols: { type: 'any' },\n    SNICallback: { type: 'any' },\n    session: { type: 'any' },\n    requestOCSP: { type: 'any' },\n    localAddress: { type: 'any' },\n    localPort: { type: 'any' },\n    hints: { type: 'any' },\n    lookup: { type: 'any' },\n    ca: { type: 'any' },\n    cert: { type: 'any' },\n    ciphers: { type: 'any' },\n    crl: { type: 'any' },\n    ecdhCurve: { type: 'any' },\n    key: { type: 'any' },\n    passphrase: { type: 'any' },\n    pfx: { type: 'any' },\n    secureProtocol: { type: 'any' },\n    index: { type: 'any' },\n    // Legacy options from v3 era\n    useNewUrlParser: {\n        type: 'boolean',\n        deprecated: 'useNewUrlParser has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    useUnifiedTopology: {\n        type: 'boolean',\n        deprecated: 'useUnifiedTopology has no effect since Node.js Driver version 4.0.0 and will be removed in the next major version'\n    },\n    // MongoLogger\n    // TODO(NODE-4849): Tighten the type of mongodbLogPath\n    mongodbLogPath: { type: 'any' }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default]));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([\n    Symbol.for('@@mdb.skipPingOnConnect'),\n    Symbol.for('@@mdb.enableMongoLogger'),\n    Symbol.for('@@mdb.internalLoggerConfig')\n]);\n//# sourceMappingURL=connection_string.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/connection_string.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/constants.js":
/*!************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/constants.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TOPOLOGY_EVENTS = exports.CMAP_EVENTS = exports.HEARTBEAT_EVENTS = exports.RESUME_TOKEN_CHANGED = exports.END = exports.CHANGE = exports.INIT = exports.MORE = exports.RESPONSE = exports.SERVER_HEARTBEAT_FAILED = exports.SERVER_HEARTBEAT_SUCCEEDED = exports.SERVER_HEARTBEAT_STARTED = exports.COMMAND_FAILED = exports.COMMAND_SUCCEEDED = exports.COMMAND_STARTED = exports.CLUSTER_TIME_RECEIVED = exports.CONNECTION_CHECKED_IN = exports.CONNECTION_CHECKED_OUT = exports.CONNECTION_CHECK_OUT_FAILED = exports.CONNECTION_CHECK_OUT_STARTED = exports.CONNECTION_CLOSED = exports.CONNECTION_READY = exports.CONNECTION_CREATED = exports.CONNECTION_POOL_READY = exports.CONNECTION_POOL_CLEARED = exports.CONNECTION_POOL_CLOSED = exports.CONNECTION_POOL_CREATED = exports.TOPOLOGY_DESCRIPTION_CHANGED = exports.TOPOLOGY_CLOSED = exports.TOPOLOGY_OPENING = exports.SERVER_DESCRIPTION_CHANGED = exports.SERVER_CLOSED = exports.SERVER_OPENING = exports.DESCRIPTION_RECEIVED = exports.UNPINNED = exports.PINNED = exports.MESSAGE = exports.ENDED = exports.CLOSED = exports.CONNECT = exports.OPEN = exports.CLOSE = exports.TIMEOUT = exports.ERROR = exports.SYSTEM_JS_COLLECTION = exports.SYSTEM_COMMAND_COLLECTION = exports.SYSTEM_USER_COLLECTION = exports.SYSTEM_PROFILE_COLLECTION = exports.SYSTEM_INDEX_COLLECTION = exports.SYSTEM_NAMESPACE_COLLECTION = void 0;\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = exports.LEGACY_HELLO_COMMAND = exports.MONGO_CLIENT_EVENTS = exports.LOCAL_SERVER_EVENTS = exports.SERVER_RELAY_EVENTS = exports.APM_EVENTS = void 0;\nexports.SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';\nexports.SYSTEM_INDEX_COLLECTION = 'system.indexes';\nexports.SYSTEM_PROFILE_COLLECTION = 'system.profile';\nexports.SYSTEM_USER_COLLECTION = 'system.users';\nexports.SYSTEM_COMMAND_COLLECTION = '$cmd';\nexports.SYSTEM_JS_COLLECTION = 'system.js';\n// events\nexports.ERROR = 'error';\nexports.TIMEOUT = 'timeout';\nexports.CLOSE = 'close';\nexports.OPEN = 'open';\nexports.CONNECT = 'connect';\nexports.CLOSED = 'closed';\nexports.ENDED = 'ended';\nexports.MESSAGE = 'message';\nexports.PINNED = 'pinned';\nexports.UNPINNED = 'unpinned';\nexports.DESCRIPTION_RECEIVED = 'descriptionReceived';\nexports.SERVER_OPENING = 'serverOpening';\nexports.SERVER_CLOSED = 'serverClosed';\nexports.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\nexports.TOPOLOGY_OPENING = 'topologyOpening';\nexports.TOPOLOGY_CLOSED = 'topologyClosed';\nexports.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @internal */\nexports.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/** @internal */\nexports.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/** @internal */\nexports.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/** @internal */\nexports.CONNECTION_POOL_READY = 'connectionPoolReady';\n/** @internal */\nexports.CONNECTION_CREATED = 'connectionCreated';\n/** @internal */\nexports.CONNECTION_READY = 'connectionReady';\n/** @internal */\nexports.CONNECTION_CLOSED = 'connectionClosed';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/** @internal */\nexports.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/** @internal */\nexports.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/** @internal */\nexports.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nexports.CLUSTER_TIME_RECEIVED = 'clusterTimeReceived';\nexports.COMMAND_STARTED = 'commandStarted';\nexports.COMMAND_SUCCEEDED = 'commandSucceeded';\nexports.COMMAND_FAILED = 'commandFailed';\nexports.SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted';\nexports.SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded';\nexports.SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed';\nexports.RESPONSE = 'response';\nexports.MORE = 'more';\nexports.INIT = 'init';\nexports.CHANGE = 'change';\nexports.END = 'end';\nexports.RESUME_TOKEN_CHANGED = 'resumeTokenChanged';\n/** @public */\nexports.HEARTBEAT_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED\n]);\n/** @public */\nexports.CMAP_EVENTS = Object.freeze([\n    exports.CONNECTION_POOL_CREATED,\n    exports.CONNECTION_POOL_READY,\n    exports.CONNECTION_POOL_CLEARED,\n    exports.CONNECTION_POOL_CLOSED,\n    exports.CONNECTION_CREATED,\n    exports.CONNECTION_READY,\n    exports.CONNECTION_CLOSED,\n    exports.CONNECTION_CHECK_OUT_STARTED,\n    exports.CONNECTION_CHECK_OUT_FAILED,\n    exports.CONNECTION_CHECKED_OUT,\n    exports.CONNECTION_CHECKED_IN\n]);\n/** @public */\nexports.TOPOLOGY_EVENTS = Object.freeze([\n    exports.SERVER_OPENING,\n    exports.SERVER_CLOSED,\n    exports.SERVER_DESCRIPTION_CHANGED,\n    exports.TOPOLOGY_OPENING,\n    exports.TOPOLOGY_CLOSED,\n    exports.TOPOLOGY_DESCRIPTION_CHANGED,\n    exports.ERROR,\n    exports.TIMEOUT,\n    exports.CLOSE\n]);\n/** @public */\nexports.APM_EVENTS = Object.freeze([\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED\n]);\n/**\n * All events that we relay to the `Topology`\n * @internal\n */\nexports.SERVER_RELAY_EVENTS = Object.freeze([\n    exports.SERVER_HEARTBEAT_STARTED,\n    exports.SERVER_HEARTBEAT_SUCCEEDED,\n    exports.SERVER_HEARTBEAT_FAILED,\n    exports.COMMAND_STARTED,\n    exports.COMMAND_SUCCEEDED,\n    exports.COMMAND_FAILED,\n    ...exports.CMAP_EVENTS\n]);\n/**\n * All events we listen to from `Server` instances, but do not forward to the client\n * @internal\n */\nexports.LOCAL_SERVER_EVENTS = Object.freeze([\n    exports.CONNECT,\n    exports.DESCRIPTION_RECEIVED,\n    exports.CLOSED,\n    exports.ENDED\n]);\n/** @public */\nexports.MONGO_CLIENT_EVENTS = Object.freeze([\n    ...exports.CMAP_EVENTS,\n    ...exports.APM_EVENTS,\n    ...exports.TOPOLOGY_EVENTS,\n    ...exports.HEARTBEAT_EVENTS\n]);\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND = 'ismaster';\n/**\n * @internal\n * The legacy hello command that was deprecated in MongoDB 5.0.\n */\nexports.LEGACY_HELLO_COMMAND_CAMEL_CASE = 'isMaster';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/get_more.js\");\nconst kill_cursors_1 = __webpack_require__(/*! ../operations/kill_cursors */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/kill_cursors.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst sessions_1 = __webpack_require__(/*! ../sessions */ \"(ssr)/../../../../../node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kClient = Symbol('client');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @internal */\nconst kInit = Symbol('kInit');\n/** @public */\nexports.CURSOR_FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n    /** @internal */\n    constructor(client, namespace, options = {}) {\n        super();\n        if (!client.s.isMongoClient) {\n            throw new error_1.MongoRuntimeError('Cursor must be constructed with MongoClient');\n        }\n        this[kClient] = client;\n        this[kNamespace] = namespace;\n        this[kId] = null;\n        this[kDocuments] = new utils_1.List();\n        this[kInitialized] = false;\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kOptions] = {\n            readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference\n                ? options.readPreference\n                : read_preference_1.ReadPreference.primary,\n            ...(0, bson_1.pluckBSONSerializeOptions)(options)\n        };\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        if (readConcern) {\n            this[kOptions].readConcern = readConcern;\n        }\n        if (typeof options.batchSize === 'number') {\n            this[kOptions].batchSize = options.batchSize;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this[kOptions].comment = options.comment;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            this[kOptions].maxTimeMS = options.maxTimeMS;\n        }\n        if (typeof options.maxAwaitTimeMS === 'number') {\n            this[kOptions].maxAwaitTimeMS = options.maxAwaitTimeMS;\n        }\n        if (options.session instanceof sessions_1.ClientSession) {\n            this[kSession] = options.session;\n        }\n        else {\n            this[kSession] = this[kClient].startSession({ owner: this, explicit: false });\n        }\n    }\n    get id() {\n        return this[kId] ?? undefined;\n    }\n    /** @internal */\n    get isDead() {\n        return (this[kId]?.isZero() ?? false) || this[kClosed] || this[kKilled];\n    }\n    /** @internal */\n    get client() {\n        return this[kClient];\n    }\n    /** @internal */\n    get server() {\n        return this[kServer];\n    }\n    get namespace() {\n        return this[kNamespace];\n    }\n    get readPreference() {\n        return this[kOptions].readPreference;\n    }\n    get readConcern() {\n        return this[kOptions].readConcern;\n    }\n    /** @internal */\n    get session() {\n        return this[kSession];\n    }\n    set session(clientSession) {\n        this[kSession] = clientSession;\n    }\n    /** @internal */\n    get cursorOptions() {\n        return this[kOptions];\n    }\n    get closed() {\n        return this[kClosed];\n    }\n    get killed() {\n        return this[kKilled];\n    }\n    get loadBalanced() {\n        return !!this[kClient].topology?.loadBalanced;\n    }\n    /** Returns current buffered documents length */\n    bufferedCount() {\n        return this[kDocuments].length;\n    }\n    /** Returns current buffered documents */\n    readBufferedDocuments(number) {\n        const bufferedDocs = [];\n        const documentsToRead = Math.min(number ?? this[kDocuments].length, this[kDocuments].length);\n        for (let count = 0; count < documentsToRead; count++) {\n            const document = this[kDocuments].shift();\n            if (document != null) {\n                bufferedDocs.push(document);\n            }\n        }\n        return bufferedDocs;\n    }\n    async *[Symbol.asyncIterator]() {\n        if (this.closed) {\n            return;\n        }\n        try {\n            while (true) {\n                const document = await this.next();\n                // Intentional strict null check, because users can map cursors to falsey values.\n                // We allow mapping to all values except for null.\n                // eslint-disable-next-line no-restricted-syntax\n                if (document === null) {\n                    if (!this.closed) {\n                        const message = 'Cursor returned a `null` document, but the cursor is not exhausted.  Mapping documents to `null` is not supported in the cursor transform.';\n                        await cleanupCursor(this, { needsToEmitClosed: true }).catch(() => null);\n                        throw new error_1.MongoAPIError(message);\n                    }\n                    break;\n                }\n                yield document;\n                if (this[kId] === bson_1.Long.ZERO) {\n                    // Cursor exhausted\n                    break;\n                }\n            }\n        }\n        finally {\n            // Only close the cursor if it has not already been closed. This finally clause handles\n            // the case when a user would break out of a for await of loop early.\n            if (!this.closed) {\n                await this.close().catch(() => null);\n            }\n        }\n    }\n    stream(options) {\n        if (options?.transform) {\n            const transform = options.transform;\n            const readable = new ReadableCursorStream(this);\n            return readable.pipe(new stream_1.Transform({\n                objectMode: true,\n                highWaterMark: 1,\n                transform(chunk, _, callback) {\n                    try {\n                        const transformed = transform(chunk);\n                        callback(undefined, transformed);\n                    }\n                    catch (err) {\n                        callback(err);\n                    }\n                }\n            }));\n        }\n        return new ReadableCursorStream(this);\n    }\n    async hasNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            return false;\n        }\n        if (this[kDocuments].length !== 0) {\n            return true;\n        }\n        const doc = await next(this, { blocking: true, transform: false });\n        if (doc) {\n            this[kDocuments].unshift(doc);\n            return true;\n        }\n        return false;\n    }\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    async next() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, { blocking: true, transform: true });\n    }\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    async tryNext() {\n        if (this[kId] === bson_1.Long.ZERO) {\n            throw new error_1.MongoCursorExhaustedError();\n        }\n        return next(this, { blocking: false, transform: true });\n    }\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n    async forEach(iterator) {\n        if (typeof iterator !== 'function') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n        }\n        for await (const document of this) {\n            const result = iterator(document);\n            if (result === false) {\n                break;\n            }\n        }\n    }\n    async close() {\n        const needsToEmitClosed = !this[kClosed];\n        this[kClosed] = true;\n        await cleanupCursor(this, { needsToEmitClosed });\n    }\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    async toArray() {\n        const array = [];\n        for await (const document of this) {\n            array.push(document);\n        }\n        return array;\n    }\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag, value) {\n        assertUninitialized(this);\n        if (!exports.CURSOR_FLAGS.includes(flag)) {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n        }\n        if (typeof value !== 'boolean') {\n            throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n        }\n        this[kOptions][flag] = value;\n        return this;\n    }\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map(transform) {\n        assertUninitialized(this);\n        const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n        if (oldTransform) {\n            this[kTransform] = doc => {\n                return transform(oldTransform(doc));\n            };\n        }\n        else {\n            this[kTransform] = transform;\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference) {\n        assertUninitialized(this);\n        if (readPreference instanceof read_preference_1.ReadPreference) {\n            this[kOptions].readPreference = readPreference;\n        }\n        else if (typeof readPreference === 'string') {\n            this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n        }\n        else {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n        }\n        return this;\n    }\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern) {\n        assertUninitialized(this);\n        const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({ readConcern });\n        if (resolvedReadConcern) {\n            this[kOptions].readConcern = resolvedReadConcern;\n        }\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        assertUninitialized(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value) {\n        assertUninitialized(this);\n        if (this[kOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n        }\n        this[kOptions].batchSize = value;\n        return this;\n    }\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind() {\n        if (!this[kInitialized]) {\n            return;\n        }\n        this[kId] = null;\n        this[kDocuments].clear();\n        this[kClosed] = false;\n        this[kKilled] = false;\n        this[kInitialized] = false;\n        const session = this[kSession];\n        if (session) {\n            // We only want to end this session if we created it, and it hasn't ended yet\n            if (session.explicit === false) {\n                if (!session.hasEnded) {\n                    session.endSession().catch(() => null);\n                }\n                this[kSession] = this.client.startSession({ owner: this, explicit: false });\n            }\n        }\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this[kNamespace], this[kId], this[kServer], {\n            ...this[kOptions],\n            session: this[kSession],\n            batchSize\n        });\n        return (0, execute_operation_1.executeOperation)(this[kClient], getMoreOperation);\n    }\n    /**\n     * @internal\n     *\n     * This function is exposed for the unified test runner's createChangeStream\n     * operation.  We cannot refactor to use the abstract _initialize method without\n     * a significant refactor.\n     */\n    async [kInit]() {\n        try {\n            const state = await this._initialize(this[kSession]);\n            const response = state.response;\n            this[kServer] = state.server;\n            if (response.cursor) {\n                // TODO(NODE-2674): Preserve int64 sent from MongoDB\n                this[kId] =\n                    typeof response.cursor.id === 'number'\n                        ? bson_1.Long.fromNumber(response.cursor.id)\n                        : typeof response.cursor.id === 'bigint'\n                            ? bson_1.Long.fromBigInt(response.cursor.id)\n                            : response.cursor.id;\n                if (response.cursor.ns) {\n                    this[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n                }\n                this[kDocuments].pushMany(response.cursor.firstBatch);\n            }\n            // When server responses return without a cursor document, we close this cursor\n            // and return the raw server response. This is often the case for explain commands\n            // for example\n            if (this[kId] == null) {\n                this[kId] = bson_1.Long.ZERO;\n                // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n                this[kDocuments].push(state.response);\n            }\n            // the cursor is now initialized, even if it is dead\n            this[kInitialized] = true;\n        }\n        catch (error) {\n            // the cursor is now initialized, even if an error occurred\n            this[kInitialized] = true;\n            await cleanupCursor(this, { error });\n            throw error;\n        }\n        if (this.isDead) {\n            await cleanupCursor(this, undefined);\n        }\n        return;\n    }\n}\n/** @event */\nAbstractCursor.CLOSE = 'close';\nexports.AbstractCursor = AbstractCursor;\n/**\n * @param cursor - the cursor on which to call `next`\n * @param blocking - a boolean indicating whether or not the cursor should `block` until data\n *     is available.  Generally, this flag is set to `false` because if the getMore returns no documents,\n *     the cursor has been exhausted.  In certain scenarios (ChangeStreams, tailable await cursors and\n *     `tryNext`, for example) blocking is necessary because a getMore returning no documents does\n *     not indicate the end of the cursor.\n * @param transform - if true, the cursor's transform function is applied to the result document (if the transform exists)\n * @returns the next document in the cursor, or `null`.  When `blocking` is `true`, a `null` document means\n * the cursor has been exhausted.  Otherwise, it means that there is no document available in the cursor's buffer.\n */\nasync function next(cursor, { blocking, transform }) {\n    if (cursor.closed) {\n        return null;\n    }\n    do {\n        if (cursor[kId] == null) {\n            // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n            await cursor[kInit]();\n        }\n        if (cursor[kDocuments].length !== 0) {\n            const doc = cursor[kDocuments].shift();\n            if (doc != null && transform && cursor[kTransform]) {\n                try {\n                    return cursor[kTransform](doc);\n                }\n                catch (error) {\n                    // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n                    // error instead.\n                    await cleanupCursor(cursor, { error, needsToEmitClosed: true }).catch(() => null);\n                    throw error;\n                }\n            }\n            return doc;\n        }\n        if (cursor.isDead) {\n            // if the cursor is dead, we clean it up\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n            return null;\n        }\n        // otherwise need to call getMore\n        const batchSize = cursor[kOptions].batchSize || 1000;\n        try {\n            const response = await cursor.getMore(batchSize);\n            if (response) {\n                const cursorId = typeof response.cursor.id === 'number'\n                    ? bson_1.Long.fromNumber(response.cursor.id)\n                    : typeof response.cursor.id === 'bigint'\n                        ? bson_1.Long.fromBigInt(response.cursor.id)\n                        : response.cursor.id;\n                cursor[kDocuments].pushMany(response.cursor.nextBatch);\n                cursor[kId] = cursorId;\n            }\n        }\n        catch (error) {\n            // `cleanupCursorAsync` should never throw, but if it does we want to throw the original\n            // error instead.\n            await cleanupCursor(cursor, { error }).catch(() => null);\n            throw error;\n        }\n        if (cursor.isDead) {\n            // If we successfully received a response from a cursor BUT the cursor indicates that it is exhausted,\n            // we intentionally clean up the cursor to release its session back into the pool before the cursor\n            // is iterated.  This prevents a cursor that is exhausted on the server from holding\n            // onto a session indefinitely until the AbstractCursor is iterated.\n            //\n            // cleanupCursorAsync should never throw, but if it does it indicates a bug in the driver\n            // and we should surface the error\n            await cleanupCursor(cursor, {});\n        }\n        if (cursor[kDocuments].length === 0 && blocking === false) {\n            return null;\n        }\n    } while (!cursor.isDead || cursor[kDocuments].length !== 0);\n    return null;\n}\nasync function cleanupCursor(cursor, options) {\n    const cursorId = cursor[kId];\n    const cursorNs = cursor[kNamespace];\n    const server = cursor[kServer];\n    const session = cursor[kSession];\n    const error = options?.error;\n    // Cursors only emit closed events once the client-side cursor has been exhausted fully or there\n    // was an error.  Notably, when the server returns a cursor id of 0 and a non-empty batch, we\n    // cleanup the cursor but don't emit a `close` event.\n    const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n    if (error) {\n        if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n            return completeCleanup();\n        }\n    }\n    if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n        if (needsToEmitClosed) {\n            cursor[kClosed] = true;\n            cursor[kId] = bson_1.Long.ZERO;\n            cursor.emit(AbstractCursor.CLOSE);\n        }\n        if (session) {\n            if (session.owner === cursor) {\n                await session.endSession({ error });\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n        }\n        return;\n    }\n    async function completeCleanup() {\n        if (session) {\n            if (session.owner === cursor) {\n                try {\n                    await session.endSession({ error });\n                }\n                finally {\n                    cursor.emit(AbstractCursor.CLOSE);\n                }\n                return;\n            }\n            if (!session.inTransaction()) {\n                (0, sessions_1.maybeClearPinnedConnection)(session, { error });\n            }\n        }\n        cursor.emit(AbstractCursor.CLOSE);\n        return;\n    }\n    cursor[kKilled] = true;\n    if (session.hasEnded) {\n        return completeCleanup();\n    }\n    try {\n        await (0, execute_operation_1.executeOperation)(cursor[kClient], new kill_cursors_1.KillCursorsOperation(cursorId, cursorNs, server, { session })).catch(() => null);\n    }\n    finally {\n        await completeCleanup();\n    }\n}\n/** @internal */\nfunction assertUninitialized(cursor) {\n    if (cursor[kInitialized]) {\n        throw new error_1.MongoCursorInUseError();\n    }\n}\nexports.assertUninitialized = assertUninitialized;\nclass ReadableCursorStream extends stream_1.Readable {\n    constructor(cursor) {\n        super({\n            objectMode: true,\n            autoDestroy: false,\n            highWaterMark: 1\n        });\n        this._readInProgress = false;\n        this._cursor = cursor;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _read(size) {\n        if (!this._readInProgress) {\n            this._readInProgress = true;\n            this._readNext();\n        }\n    }\n    _destroy(error, callback) {\n        this._cursor.close().then(() => callback(error), closeError => callback(closeError));\n    }\n    _readNext() {\n        next(this._cursor, { blocking: true, transform: true }).then(result => {\n            if (result == null) {\n                this.push(null);\n            }\n            else if (this.destroyed) {\n                this._cursor.close().catch(() => null);\n            }\n            else {\n                if (this.push(result)) {\n                    return this._readNext();\n                }\n                this._readInProgress = false;\n            }\n        }, err => {\n            // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n            //       desired behavior is that a stream ends cleanly when a user explicitly closes\n            //       a client during iteration. Alternatively, we could do the \"right\" thing and\n            //       propagate the error message by removing this special case.\n            if (err.message.match(/server is closed/)) {\n                this._cursor.close().catch(() => null);\n                return this.push(null);\n            }\n            // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n            //       to be \"operation was interrupted\", where a cursor has been closed but there is an\n            //       active getMore in-flight. This used to check if the cursor was killed but once\n            //       that changed to happen in cleanup legitimate errors would not destroy the\n            //       stream. There are change streams test specifically test these cases.\n            if (err.message.match(/operation was interrupted/)) {\n                return this.push(null);\n            }\n            // NOTE: The two above checks on the message of the error will cause a null to be pushed\n            //       to the stream, thus closing the stream before the destroy call happens. This means\n            //       that either of those error messages on a change stream will not get a proper\n            //       'error' event to be emitted (the error passed to destroy). Change stream resumability\n            //       relies on that error event to be emitted to create its new cursor and thus was not\n            //       working on 4.4 servers because the error emitted on failover was \"interrupted at\n            //       shutdown\" while on 5.0+ it is \"The server is in quiesce mode and will shut down\".\n            //       See NODE-4475.\n            return this.destroy(err);\n        });\n    }\n}\n//# sourceMappingURL=abstract_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cursor/aggregation_cursor.js":
/*!****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cursor/aggregation_cursor.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregationCursor = void 0;\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nconst kPipeline = Symbol('pipeline');\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nclass AggregationCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this[kPipeline] = pipeline;\n        this[kOptions] = options;\n    }\n    get pipeline() {\n        return this[kPipeline];\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kOptions]);\n        delete clonedOptions.session;\n        return new AggregationCursor(this.client, this.namespace, this[kPipeline], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, aggregateOperation);\n        // TODO: NODE-2882\n        return { server: aggregateOperation.server, session, response };\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new aggregate_1.AggregateOperation(this.namespace, this[kPipeline], {\n            ...this[kOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    group($group) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $group });\n        return this;\n    }\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $limit });\n        return this;\n    }\n    /** Add a match stage to the aggregation pipeline */\n    match($match) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $match });\n        return this;\n    }\n    /** Add an out stage to the aggregation pipeline */\n    out($out) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $out });\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project($project) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $project });\n        return this;\n    }\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $lookup });\n        return this;\n    }\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $redact });\n        return this;\n    }\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $skip });\n        return this;\n    }\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $sort });\n        return this;\n    }\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $unwind });\n        return this;\n    }\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kPipeline].push({ $geoNear });\n        return this;\n    }\n}\nexports.AggregationCursor = AggregationCursor;\n//# sourceMappingURL=aggregation_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cursor/aggregation_cursor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cursor/change_stream_cursor.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cursor/change_stream_cursor.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChangeStreamCursor = void 0;\nconst change_stream_1 = __webpack_require__(/*! ../change_stream */ \"(ssr)/../../../../../node_modules/mongodb/lib/change_stream.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst aggregate_1 = __webpack_require__(/*! ../operations/aggregate */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/aggregate.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(client, namespace, pipeline = [], options = {}) {\n        super(client, namespace, options);\n        this.pipeline = pipeline;\n        this.options = options;\n        this._resumeToken = null;\n        this.startAtOperationTime = options.startAtOperationTime;\n        if (options.startAfter) {\n            this.resumeToken = options.startAfter;\n        }\n        else if (options.resumeAfter) {\n            this.resumeToken = options.resumeAfter;\n        }\n    }\n    set resumeToken(token) {\n        this._resumeToken = token;\n        this.emit(change_stream_1.ChangeStream.RESUME_TOKEN_CHANGED, token);\n    }\n    get resumeToken() {\n        return this._resumeToken;\n    }\n    get resumeOptions() {\n        const options = {\n            ...this.options\n        };\n        for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n            delete options[key];\n        }\n        if (this.resumeToken != null) {\n            if (this.options.startAfter && !this.hasReceived) {\n                options.startAfter = this.resumeToken;\n            }\n            else {\n                options.resumeAfter = this.resumeToken;\n            }\n        }\n        else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n            options.startAtOperationTime = this.startAtOperationTime;\n        }\n        return options;\n    }\n    cacheResumeToken(resumeToken) {\n        if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n            this.resumeToken = this.postBatchResumeToken;\n        }\n        else {\n            this.resumeToken = resumeToken;\n        }\n        this.hasReceived = true;\n    }\n    _processBatch(response) {\n        const cursor = response.cursor;\n        if (cursor.postBatchResumeToken) {\n            this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n            const batch = 'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n            if (batch.length === 0) {\n                this.resumeToken = cursor.postBatchResumeToken;\n            }\n        }\n    }\n    clone() {\n        return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n            ...this.cursorOptions\n        });\n    }\n    async _initialize(session) {\n        const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(session.client, aggregateOperation);\n        const server = aggregateOperation.server;\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(server);\n        if (this.startAtOperationTime == null &&\n            this.resumeAfter == null &&\n            this.startAfter == null &&\n            this.maxWireVersion >= 7) {\n            this.startAtOperationTime = response.operationTime;\n        }\n        this._processBatch(response);\n        this.emit(constants_1.INIT, response);\n        this.emit(constants_1.RESPONSE);\n        // TODO: NODE-2882\n        return { server, session, response };\n    }\n    async getMore(batchSize) {\n        const response = await super.getMore(batchSize);\n        this.maxWireVersion = (0, utils_1.maxWireVersion)(this.server);\n        this._processBatch(response);\n        this.emit(change_stream_1.ChangeStream.MORE, response);\n        this.emit(change_stream_1.ChangeStream.RESPONSE);\n        return response;\n    }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;\n//# sourceMappingURL=change_stream_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9jaGFuZ2Vfc3RyZWFtX2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsd0JBQXdCLG1CQUFPLENBQUMsd0ZBQWtCO0FBQ2xELG9CQUFvQixtQkFBTyxDQUFDLGdGQUFjO0FBQzFDLG9CQUFvQixtQkFBTyxDQUFDLHNHQUF5QjtBQUNyRCw0QkFBNEIsbUJBQU8sQ0FBQyxzSEFBaUM7QUFDckUsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsMEJBQTBCLG1CQUFPLENBQUMsa0dBQW1CO0FBQ3JEO0FBQ0E7QUFDQSw4REFBOEQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9jaGFuZ2Vfc3RyZWFtX2N1cnNvci5qcz9jMTg1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaGFuZ2VTdHJlYW1DdXJzb3IgPSB2b2lkIDA7XG5jb25zdCBjaGFuZ2Vfc3RyZWFtXzEgPSByZXF1aXJlKFwiLi4vY2hhbmdlX3N0cmVhbVwiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IGFnZ3JlZ2F0ZV8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvYWdncmVnYXRlXCIpO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ2hhbmdlU3RyZWFtQ3Vyc29yIGV4dGVuZHMgYWJzdHJhY3RfY3Vyc29yXzEuQWJzdHJhY3RDdXJzb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNsaWVudCwgbmFtZXNwYWNlLCBwaXBlbGluZSA9IFtdLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoY2xpZW50LCBuYW1lc3BhY2UsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnBpcGVsaW5lID0gcGlwZWxpbmU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX3Jlc3VtZVRva2VuID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZSA9IG9wdGlvbnMuc3RhcnRBdE9wZXJhdGlvblRpbWU7XG4gICAgICAgIGlmIChvcHRpb25zLnN0YXJ0QWZ0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSBvcHRpb25zLnN0YXJ0QWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5yZXN1bWVBZnRlcikge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IG9wdGlvbnMucmVzdW1lQWZ0ZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0IHJlc3VtZVRva2VuKHRva2VuKSB7XG4gICAgICAgIHRoaXMuX3Jlc3VtZVRva2VuID0gdG9rZW47XG4gICAgICAgIHRoaXMuZW1pdChjaGFuZ2Vfc3RyZWFtXzEuQ2hhbmdlU3RyZWFtLlJFU1VNRV9UT0tFTl9DSEFOR0VELCB0b2tlbik7XG4gICAgfVxuICAgIGdldCByZXN1bWVUb2tlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VtZVRva2VuO1xuICAgIH1cbiAgICBnZXQgcmVzdW1lT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBbJ3Jlc3VtZUFmdGVyJywgJ3N0YXJ0QWZ0ZXInLCAnc3RhcnRBdE9wZXJhdGlvblRpbWUnXSkge1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5yZXN1bWVUb2tlbiAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnN0YXJ0QWZ0ZXIgJiYgIXRoaXMuaGFzUmVjZWl2ZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnN0YXJ0QWZ0ZXIgPSB0aGlzLnJlc3VtZVRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5yZXN1bWVBZnRlciA9IHRoaXMucmVzdW1lVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZSAhPSBudWxsICYmICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKSh0aGlzLnNlcnZlcikgPj0gNykge1xuICAgICAgICAgICAgb3B0aW9ucy5zdGFydEF0T3BlcmF0aW9uVGltZSA9IHRoaXMuc3RhcnRBdE9wZXJhdGlvblRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuICAgIGNhY2hlUmVzdW1lVG9rZW4ocmVzdW1lVG9rZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyZWRDb3VudCgpID09PSAwICYmIHRoaXMucG9zdEJhdGNoUmVzdW1lVG9rZW4pIHtcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVG9rZW4gPSB0aGlzLnBvc3RCYXRjaFJlc3VtZVRva2VuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXN1bWVUb2tlbiA9IHJlc3VtZVRva2VuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFzUmVjZWl2ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBfcHJvY2Vzc0JhdGNoKHJlc3BvbnNlKSB7XG4gICAgICAgIGNvbnN0IGN1cnNvciA9IHJlc3BvbnNlLmN1cnNvcjtcbiAgICAgICAgaWYgKGN1cnNvci5wb3N0QmF0Y2hSZXN1bWVUb2tlbikge1xuICAgICAgICAgICAgdGhpcy5wb3N0QmF0Y2hSZXN1bWVUb2tlbiA9IHJlc3BvbnNlLmN1cnNvci5wb3N0QmF0Y2hSZXN1bWVUb2tlbjtcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoID0gJ2ZpcnN0QmF0Y2gnIGluIHJlc3BvbnNlLmN1cnNvciA/IHJlc3BvbnNlLmN1cnNvci5maXJzdEJhdGNoIDogcmVzcG9uc2UuY3Vyc29yLm5leHRCYXRjaDtcbiAgICAgICAgICAgIGlmIChiYXRjaC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VtZVRva2VuID0gY3Vyc29yLnBvc3RCYXRjaFJlc3VtZVRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IENoYW5nZVN0cmVhbUN1cnNvcih0aGlzLmNsaWVudCwgdGhpcy5uYW1lc3BhY2UsIHRoaXMucGlwZWxpbmUsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBhZ2dyZWdhdGVPcGVyYXRpb24gPSBuZXcgYWdncmVnYXRlXzEuQWdncmVnYXRlT3BlcmF0aW9uKHRoaXMubmFtZXNwYWNlLCB0aGlzLnBpcGVsaW5lLCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHNlc3Npb24uY2xpZW50LCBhZ2dyZWdhdGVPcGVyYXRpb24pO1xuICAgICAgICBjb25zdCBzZXJ2ZXIgPSBhZ2dyZWdhdGVPcGVyYXRpb24uc2VydmVyO1xuICAgICAgICB0aGlzLm1heFdpcmVWZXJzaW9uID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcik7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0QXRPcGVyYXRpb25UaW1lID09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMucmVzdW1lQWZ0ZXIgPT0gbnVsbCAmJlxuICAgICAgICAgICAgdGhpcy5zdGFydEFmdGVyID09IG51bGwgJiZcbiAgICAgICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPj0gNykge1xuICAgICAgICAgICAgdGhpcy5zdGFydEF0T3BlcmF0aW9uVGltZSA9IHJlc3BvbnNlLm9wZXJhdGlvblRpbWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvY2Vzc0JhdGNoKHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5lbWl0KGNvbnN0YW50c18xLklOSVQsIHJlc3BvbnNlKTtcbiAgICAgICAgdGhpcy5lbWl0KGNvbnN0YW50c18xLlJFU1BPTlNFKTtcbiAgICAgICAgLy8gVE9ETzogTk9ERS0yODgyXG4gICAgICAgIHJldHVybiB7IHNlcnZlciwgc2Vzc2lvbiwgcmVzcG9uc2UgfTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0TW9yZShiYXRjaFNpemUpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzdXBlci5nZXRNb3JlKGJhdGNoU2l6ZSk7XG4gICAgICAgIHRoaXMubWF4V2lyZVZlcnNpb24gPSAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikodGhpcy5zZXJ2ZXIpO1xuICAgICAgICB0aGlzLl9wcm9jZXNzQmF0Y2gocmVzcG9uc2UpO1xuICAgICAgICB0aGlzLmVtaXQoY2hhbmdlX3N0cmVhbV8xLkNoYW5nZVN0cmVhbS5NT1JFLCByZXNwb25zZSk7XG4gICAgICAgIHRoaXMuZW1pdChjaGFuZ2Vfc3RyZWFtXzEuQ2hhbmdlU3RyZWFtLlJFU1BPTlNFKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ2hhbmdlU3RyZWFtQ3Vyc29yID0gQ2hhbmdlU3RyZWFtQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hhbmdlX3N0cmVhbV9jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cursor/change_stream_cursor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cursor/find_cursor.js":
/*!*********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cursor/find_cursor.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindCursor = exports.FLAGS = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst count_1 = __webpack_require__(/*! ../operations/count */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/count.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst find_1 = __webpack_require__(/*! ../operations/find */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/find.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/../../../../../node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @internal */\nconst kFilter = Symbol('filter');\n/** @internal */\nconst kNumReturned = Symbol('numReturned');\n/** @internal */\nconst kBuiltOptions = Symbol('builtOptions');\n/** @public Flags allowed for cursor */\nexports.FLAGS = [\n    'tailable',\n    'oplogReplay',\n    'noCursorTimeout',\n    'awaitData',\n    'exhaust',\n    'partial'\n];\n/** @public */\nclass FindCursor extends abstract_cursor_1.AbstractCursor {\n    /** @internal */\n    constructor(client, namespace, filter = {}, options = {}) {\n        super(client, namespace, options);\n        this[kFilter] = filter;\n        this[kBuiltOptions] = options;\n        if (options.sort != null) {\n            this[kBuiltOptions].sort = (0, sort_1.formatSort)(options.sort);\n        }\n    }\n    clone() {\n        const clonedOptions = (0, utils_1.mergeOptions)({}, this[kBuiltOptions]);\n        delete clonedOptions.session;\n        return new FindCursor(this.client, this.namespace, this[kFilter], {\n            ...clonedOptions\n        });\n    }\n    map(transform) {\n        return super.map(transform);\n    }\n    /** @internal */\n    async _initialize(session) {\n        const findOperation = new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, findOperation);\n        // the response is not a cursor when `explain` is enabled\n        this[kNumReturned] = response.cursor?.firstBatch?.length;\n        // TODO: NODE-2882\n        return { server: findOperation.server, session, response };\n    }\n    /** @internal */\n    async getMore(batchSize) {\n        const numReturned = this[kNumReturned];\n        if (numReturned) {\n            // TODO(DRIVERS-1448): Remove logic to enforce `limit` in the driver\n            const limit = this[kBuiltOptions].limit;\n            batchSize =\n                limit && limit > 0 && numReturned + batchSize > limit ? limit - numReturned : batchSize;\n            if (batchSize <= 0) {\n                // this is an optimization for the special case of a limit for a find command to avoid an\n                // extra getMore when the limit has been reached and the limit is a multiple of the batchSize.\n                // This is a consequence of the new query engine in 5.0 having no knowledge of the limit as it\n                // produces results for the find command.  Once a batch is filled up, it is returned and only\n                // on the subsequent getMore will the query framework consider the limit, determine the cursor\n                // is exhausted and return a cursorId of zero.\n                // instead, if we determine there are no more documents to request from the server, we preemptively\n                // close the cursor\n                await this.close().catch(() => null);\n                return { cursor: { id: bson_1.Long.ZERO, nextBatch: [] } };\n            }\n        }\n        const response = await super.getMore(batchSize);\n        // TODO: wrap this in some logic to prevent it from happening if we don't need this support\n        if (response) {\n            this[kNumReturned] = this[kNumReturned] + response.cursor.nextBatch.length;\n        }\n        return response;\n    }\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    async count(options) {\n        (0, utils_1.emitWarningOnce)('cursor.count is deprecated and will be removed in the next major version, please use `collection.estimatedDocumentCount` or `collection.countDocuments` instead ');\n        if (typeof options === 'boolean') {\n            throw new error_1.MongoInvalidArgumentError('Invalid first parameter to count');\n        }\n        return (0, execute_operation_1.executeOperation)(this.client, new count_1.CountOperation(this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            ...options\n        }));\n    }\n    /** Execute the explain for the cursor */\n    async explain(verbosity) {\n        return (0, execute_operation_1.executeOperation)(this.client, new find_1.FindOperation(undefined, this.namespace, this[kFilter], {\n            ...this[kBuiltOptions],\n            ...this.cursorOptions,\n            explain: verbosity ?? true\n        }));\n    }\n    /** Set the cursor query */\n    filter(filter) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kFilter] = filter;\n        return this;\n    }\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].hint = hint;\n        return this;\n    }\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].min = min;\n        return this;\n    }\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].max = max;\n        return this;\n    }\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].returnKey = value;\n        return this;\n    }\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].showRecordId = value;\n        return this;\n    }\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name, value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (name[0] !== '$') {\n            throw new error_1.MongoInvalidArgumentError(`${name} is not a valid query modifier`);\n        }\n        // Strip of the $\n        const field = name.substr(1);\n        // NOTE: consider some TS magic for this\n        switch (field) {\n            case 'comment':\n                this[kBuiltOptions].comment = value;\n                break;\n            case 'explain':\n                this[kBuiltOptions].explain = value;\n                break;\n            case 'hint':\n                this[kBuiltOptions].hint = value;\n                break;\n            case 'max':\n                this[kBuiltOptions].max = value;\n                break;\n            case 'maxTimeMS':\n                this[kBuiltOptions].maxTimeMS = value;\n                break;\n            case 'min':\n                this[kBuiltOptions].min = value;\n                break;\n            case 'orderby':\n                this[kBuiltOptions].sort = (0, sort_1.formatSort)(value);\n                break;\n            case 'query':\n                this[kFilter] = value;\n                break;\n            case 'returnKey':\n                this[kBuiltOptions].returnKey = value;\n                break;\n            case 'showDiskLoc':\n                this[kBuiltOptions].showRecordId = value;\n                break;\n            default:\n                throw new error_1.MongoInvalidArgumentError(`Invalid query modifier: ${name}`);\n        }\n        return this;\n    }\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].comment = value;\n        return this;\n    }\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxAwaitTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxAwaitTimeMS = value;\n        return this;\n    }\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n        }\n        this[kBuiltOptions].maxTimeMS = value;\n        return this;\n    }\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].projection = value;\n        return this;\n    }\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort, direction) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support sorting');\n        }\n        this[kBuiltOptions].sort = (0, sort_1.formatSort)(sort, direction);\n        return this;\n    }\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow = true) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (!this[kBuiltOptions].sort) {\n            throw new error_1.MongoInvalidArgumentError('Option \"allowDiskUse\" requires a sort specification');\n        }\n        // As of 6.0 the default is true. This allows users to get back to the old behavior.\n        if (!allow) {\n            this[kBuiltOptions].allowDiskUse = false;\n            return this;\n        }\n        this[kBuiltOptions].allowDiskUse = true;\n        return this;\n    }\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        this[kBuiltOptions].collation = value;\n        return this;\n    }\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support limit');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"limit\" requires an integer');\n        }\n        this[kBuiltOptions].limit = value;\n        return this;\n    }\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value) {\n        (0, abstract_cursor_1.assertUninitialized)(this);\n        if (this[kBuiltOptions].tailable) {\n            throw new error_1.MongoTailableCursorError('Tailable cursor does not support skip');\n        }\n        if (typeof value !== 'number') {\n            throw new error_1.MongoInvalidArgumentError('Operation \"skip\" requires an integer');\n        }\n        this[kBuiltOptions].skip = value;\n        return this;\n    }\n}\nexports.FindCursor = FindCursor;\n//# sourceMappingURL=find_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cursor/find_cursor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_collections_cursor.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cursor/list_collections_cursor.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst list_collections_1 = __webpack_require__(/*! ../operations/list_collections */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/list_collections.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(db, filter, options) {\n        super(db.client, db.s.namespace, options);\n        this.parent = db;\n        this.filter = filter;\n        this.options = options;\n    }\n    clone() {\n        return new ListCollectionsCursor(this.parent, this.filter, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new list_collections_1.ListCollectionsOperation(this.parent, this.filter, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\n//# sourceMappingURL=list_collections_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9saXN0X2NvbGxlY3Rpb25zX2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0IsNEJBQTRCLG1CQUFPLENBQUMsc0hBQWlDO0FBQ3JFLDJCQUEyQixtQkFBTyxDQUFDLG9IQUFnQztBQUNuRSwwQkFBMEIsbUJBQU8sQ0FBQyxrR0FBbUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanM/ZWRjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgZXhlY3V0ZV9vcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2V4ZWN1dGVfb3BlcmF0aW9uXCIpO1xuY29uc3QgbGlzdF9jb2xsZWN0aW9uc18xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvbGlzdF9jb2xsZWN0aW9uc1wiKTtcbmNvbnN0IGFic3RyYWN0X2N1cnNvcl8xID0gcmVxdWlyZShcIi4vYWJzdHJhY3RfY3Vyc29yXCIpO1xuLyoqIEBwdWJsaWMgKi9cbmNsYXNzIExpc3RDb2xsZWN0aW9uc0N1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLmNsaWVudCwgZGIucy5uYW1lc3BhY2UsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnBhcmVudCA9IGRiO1xuICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdENvbGxlY3Rpb25zQ3Vyc29yKHRoaXMucGFyZW50LCB0aGlzLmZpbHRlciwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBuZXcgbGlzdF9jb2xsZWN0aW9uc18xLkxpc3RDb2xsZWN0aW9uc09wZXJhdGlvbih0aGlzLnBhcmVudCwgdGhpcy5maWx0ZXIsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKDAsIGV4ZWN1dGVfb3BlcmF0aW9uXzEuZXhlY3V0ZU9wZXJhdGlvbikodGhpcy5wYXJlbnQuY2xpZW50LCBvcGVyYXRpb24pO1xuICAgICAgICAvLyBUT0RPOiBOT0RFLTI4ODJcbiAgICAgICAgcmV0dXJuIHsgc2VydmVyOiBvcGVyYXRpb24uc2VydmVyLCBzZXNzaW9uLCByZXNwb25zZSB9O1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zQ3Vyc29yID0gTGlzdENvbGxlY3Rpb25zQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9jb2xsZWN0aW9uc19jdXJzb3IuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_collections_cursor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_indexes_cursor.js":
/*!*****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cursor/list_indexes_cursor.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ../operations/indexes */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/indexes.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n    constructor(collection, options) {\n        super(collection.client, collection.s.namespace, options);\n        this.parent = collection;\n        this.options = options;\n    }\n    clone() {\n        return new ListIndexesCursor(this.parent, {\n            ...this.options,\n            ...this.cursorOptions\n        });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new indexes_1.ListIndexesOperation(this.parent, {\n            ...this.cursorOptions,\n            ...this.options,\n            session\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation);\n        // TODO: NODE-2882\n        return { server: operation.server, session, response };\n    }\n}\nexports.ListIndexesCursor = ListIndexesCursor;\n//# sourceMappingURL=list_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9saXN0X2luZGV4ZXNfY3Vyc29yLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6Qiw0QkFBNEIsbUJBQU8sQ0FBQyxzSEFBaUM7QUFDckUsa0JBQWtCLG1CQUFPLENBQUMsa0dBQXVCO0FBQ2pELDBCQUEwQixtQkFBTyxDQUFDLGtHQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9jdXJzb3IvbGlzdF9pbmRleGVzX2N1cnNvci5qcz8wNjFlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaXN0SW5kZXhlc0N1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGV4ZWN1dGVfb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9ucy9leGVjdXRlX29wZXJhdGlvblwiKTtcbmNvbnN0IGluZGV4ZXNfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25zL2luZGV4ZXNcIik7XG5jb25zdCBhYnN0cmFjdF9jdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2Fic3RyYWN0X2N1cnNvclwiKTtcbi8qKiBAcHVibGljICovXG5jbGFzcyBMaXN0SW5kZXhlc0N1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24uY2xpZW50LCBjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMaXN0SW5kZXhlc0N1cnNvcih0aGlzLnBhcmVudCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgX2luaXRpYWxpemUoc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcGVyYXRpb24gPSBuZXcgaW5kZXhlc18xLkxpc3RJbmRleGVzT3BlcmF0aW9uKHRoaXMucGFyZW50LCB7XG4gICAgICAgICAgICAuLi50aGlzLmN1cnNvck9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMucGFyZW50LmNsaWVudCwgb3BlcmF0aW9uKTtcbiAgICAgICAgLy8gVE9ETzogTk9ERS0yODgyXG4gICAgICAgIHJldHVybiB7IHNlcnZlcjogb3BlcmF0aW9uLnNlcnZlciwgc2Vzc2lvbiwgcmVzcG9uc2UgfTtcbiAgICB9XG59XG5leHBvcnRzLkxpc3RJbmRleGVzQ3Vyc29yID0gTGlzdEluZGV4ZXNDdXJzb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X2luZGV4ZXNfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js":
/*!************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListSearchIndexesCursor = void 0;\nconst aggregation_cursor_1 = __webpack_require__(/*! ./aggregation_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\n/** @public */\nclass ListSearchIndexesCursor extends aggregation_cursor_1.AggregationCursor {\n    /** @internal */\n    constructor({ fullNamespace: ns, client }, name, options = {}) {\n        const pipeline = name == null ? [{ $listSearchIndexes: {} }] : [{ $listSearchIndexes: { name } }];\n        super(client, ns, pipeline, options);\n    }\n}\nexports.ListSearchIndexesCursor = ListSearchIndexesCursor;\n//# sourceMappingURL=list_search_indexes_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9saXN0X3NlYXJjaF9pbmRleGVzX2N1cnNvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0I7QUFDL0IsNkJBQTZCLG1CQUFPLENBQUMsd0dBQXNCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwyQkFBMkIsb0JBQW9CO0FBQ2pFLDJDQUEyQyx3QkFBd0IsT0FBTyxzQkFBc0IsUUFBUTtBQUN4RztBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvY3Vyc29yL2xpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzP2Q3MjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxpc3RTZWFyY2hJbmRleGVzQ3Vyc29yID0gdm9pZCAwO1xuY29uc3QgYWdncmVnYXRpb25fY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hZ2dyZWdhdGlvbl9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgZXh0ZW5kcyBhZ2dyZWdhdGlvbl9jdXJzb3JfMS5BZ2dyZWdhdGlvbkN1cnNvciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHsgZnVsbE5hbWVzcGFjZTogbnMsIGNsaWVudCB9LCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgcGlwZWxpbmUgPSBuYW1lID09IG51bGwgPyBbeyAkbGlzdFNlYXJjaEluZGV4ZXM6IHt9IH1dIDogW3sgJGxpc3RTZWFyY2hJbmRleGVzOiB7IG5hbWUgfSB9XTtcbiAgICAgICAgc3VwZXIoY2xpZW50LCBucywgcGlwZWxpbmUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdFNlYXJjaEluZGV4ZXNDdXJzb3IgPSBMaXN0U2VhcmNoSW5kZXhlc0N1cnNvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpc3Rfc2VhcmNoX2luZGV4ZXNfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_search_indexes_cursor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/cursor/run_command_cursor.js":
/*!****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/cursor/run_command_cursor.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunCommandCursor = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst execute_operation_1 = __webpack_require__(/*! ../operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst get_more_1 = __webpack_require__(/*! ../operations/get_more */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/get_more.js\");\nconst run_command_1 = __webpack_require__(/*! ../operations/run_command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/run_command.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst abstract_cursor_1 = __webpack_require__(/*! ./abstract_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\");\n/** @public */\nclass RunCommandCursor extends abstract_cursor_1.AbstractCursor {\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */\n    setComment(comment) {\n        this.getMoreOptions.comment = comment;\n        return this;\n    }\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */\n    setMaxTimeMS(maxTimeMS) {\n        this.getMoreOptions.maxAwaitTimeMS = maxTimeMS;\n        return this;\n    }\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param maxTimeMS - the number documents to return in the `nextBatch`\n     */\n    setBatchSize(batchSize) {\n        this.getMoreOptions.batchSize = batchSize;\n        return this;\n    }\n    /** Unsupported for RunCommandCursor */\n    clone() {\n        throw new error_1.MongoAPIError('Clone not supported, create a new cursor with db.runCursorCommand');\n    }\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n    withReadConcern(_) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support readConcern it must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n    addCursorFlag(_, __) {\n        throw new error_1.MongoAPIError('RunCommandCursor does not support cursor flags, they must be attached to the command being run');\n    }\n    /** Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document */\n    maxTimeMS(_) {\n        throw new error_1.MongoAPIError('maxTimeMS must be configured on the command document directly, to configure getMore.maxTimeMS use cursor.setMaxTimeMS()');\n    }\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n    batchSize(_) {\n        throw new error_1.MongoAPIError('batchSize must be configured on the command document directly, to configure getMore.batchSize use cursor.setBatchSize()');\n    }\n    /** @internal */\n    constructor(db, command, options = {}) {\n        super(db.client, (0, utils_1.ns)(db.namespace), options);\n        this.getMoreOptions = {};\n        this.db = db;\n        this.command = Object.freeze({ ...command });\n    }\n    /** @internal */\n    async _initialize(session) {\n        const operation = new run_command_1.RunCommandOperation(this.db, this.command, {\n            ...this.cursorOptions,\n            session: session,\n            readPreference: this.cursorOptions.readPreference\n        });\n        const response = await (0, execute_operation_1.executeOperation)(this.client, operation);\n        if (response.cursor == null) {\n            throw new error_1.MongoUnexpectedServerResponseError('Expected server to respond with cursor');\n        }\n        return {\n            server: operation.server,\n            session,\n            response\n        };\n    }\n    /** @internal */\n    async getMore(_batchSize) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const getMoreOperation = new get_more_1.GetMoreOperation(this.namespace, this.id, this.server, {\n            ...this.cursorOptions,\n            session: this.session,\n            ...this.getMoreOptions\n        });\n        return (0, execute_operation_1.executeOperation)(this.client, getMoreOperation);\n    }\n}\nexports.RunCommandCursor = RunCommandCursor;\n//# sourceMappingURL=run_command_cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9ydW5fY29tbWFuZF9jdXJzb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLDRCQUE0QixtQkFBTyxDQUFDLHNIQUFpQztBQUNyRSxtQkFBbUIsbUJBQU8sQ0FBQyxvR0FBd0I7QUFDbkQsc0JBQXNCLG1CQUFPLENBQUMsMEdBQTJCO0FBQ3pELGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLDBCQUEwQixtQkFBTyxDQUFDLGtHQUFtQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxZQUFZO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2N1cnNvci9ydW5fY29tbWFuZF9jdXJzb3IuanM/NjcxMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUnVuQ29tbWFuZEN1cnNvciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCBleGVjdXRlX29wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZXhlY3V0ZV9vcGVyYXRpb25cIik7XG5jb25zdCBnZXRfbW9yZV8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvZ2V0X21vcmVcIik7XG5jb25zdCBydW5fY29tbWFuZF8xID0gcmVxdWlyZShcIi4uL29wZXJhdGlvbnMvcnVuX2NvbW1hbmRcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgYWJzdHJhY3RfY3Vyc29yXzEgPSByZXF1aXJlKFwiLi9hYnN0cmFjdF9jdXJzb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuY2xhc3MgUnVuQ29tbWFuZEN1cnNvciBleHRlbmRzIGFic3RyYWN0X2N1cnNvcl8xLkFic3RyYWN0Q3Vyc29yIHtcbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgYGdldE1vcmUuY29tbWVudGAgZmllbGRcbiAgICAgKiBAcGFyYW0gY29tbWVudCAtIGFueSBCU09OIHZhbHVlXG4gICAgICovXG4gICAgc2V0Q29tbWVudChjb21tZW50KSB7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb250cm9scyB0aGUgYGdldE1vcmUubWF4VGltZU1TYCBmaWVsZC4gT25seSB2YWxpZCB3aGVuIGN1cnNvciBpcyB0YWlsYWJsZSBhd2FpdFxuICAgICAqIEBwYXJhbSBtYXhUaW1lTVMgLSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciBuZXcgZGF0YVxuICAgICAqL1xuICAgIHNldE1heFRpbWVNUyhtYXhUaW1lTVMpIHtcbiAgICAgICAgdGhpcy5nZXRNb3JlT3B0aW9ucy5tYXhBd2FpdFRpbWVNUyA9IG1heFRpbWVNUztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnRyb2xzIHRoZSBgZ2V0TW9yZS5iYXRjaFNpemVgIGZpZWxkXG4gICAgICogQHBhcmFtIG1heFRpbWVNUyAtIHRoZSBudW1iZXIgZG9jdW1lbnRzIHRvIHJldHVybiBpbiB0aGUgYG5leHRCYXRjaGBcbiAgICAgKi9cbiAgICBzZXRCYXRjaFNpemUoYmF0Y2hTaXplKSB7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMuYmF0Y2hTaXplID0gYmF0Y2hTaXplO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ0Nsb25lIG5vdCBzdXBwb3J0ZWQsIGNyZWF0ZSBhIG5ldyBjdXJzb3Igd2l0aCBkYi5ydW5DdXJzb3JDb21tYW5kJyk7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogcmVhZENvbmNlcm4gbXVzdCBiZSBjb25maWd1cmVkIGRpcmVjdGx5IG9uIGNvbW1hbmQgZG9jdW1lbnQgKi9cbiAgICB3aXRoUmVhZENvbmNlcm4oXykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKCdSdW5Db21tYW5kQ3Vyc29yIGRvZXMgbm90IHN1cHBvcnQgcmVhZENvbmNlcm4gaXQgbXVzdCBiZSBhdHRhY2hlZCB0byB0aGUgY29tbWFuZCBiZWluZyBydW4nKTtcbiAgICB9XG4gICAgLyoqIFVuc3VwcG9ydGVkIGZvciBSdW5Db21tYW5kQ3Vyc29yOiB2YXJpb3VzIGN1cnNvciBmbGFncyBtdXN0IGJlIGNvbmZpZ3VyZWQgZGlyZWN0bHkgb24gY29tbWFuZCBkb2N1bWVudCAqL1xuICAgIGFkZEN1cnNvckZsYWcoXywgX18pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignUnVuQ29tbWFuZEN1cnNvciBkb2VzIG5vdCBzdXBwb3J0IGN1cnNvciBmbGFncywgdGhleSBtdXN0IGJlIGF0dGFjaGVkIHRvIHRoZSBjb21tYW5kIGJlaW5nIHJ1bicpO1xuICAgIH1cbiAgICAvKiogVW5zdXBwb3J0ZWQgZm9yIFJ1bkNvbW1hbmRDdXJzb3I6IG1heFRpbWVNUyBtdXN0IGJlIGNvbmZpZ3VyZWQgZGlyZWN0bHkgb24gY29tbWFuZCBkb2N1bWVudCAqL1xuICAgIG1heFRpbWVNUyhfKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoJ21heFRpbWVNUyBtdXN0IGJlIGNvbmZpZ3VyZWQgb24gdGhlIGNvbW1hbmQgZG9jdW1lbnQgZGlyZWN0bHksIHRvIGNvbmZpZ3VyZSBnZXRNb3JlLm1heFRpbWVNUyB1c2UgY3Vyc29yLnNldE1heFRpbWVNUygpJyk7XG4gICAgfVxuICAgIC8qKiBVbnN1cHBvcnRlZCBmb3IgUnVuQ29tbWFuZEN1cnNvcjogYmF0Y2hTaXplIG11c3QgYmUgY29uZmlndXJlZCBkaXJlY3RseSBvbiBjb21tYW5kIGRvY3VtZW50ICovXG4gICAgYmF0Y2hTaXplKF8pIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29BUElFcnJvcignYmF0Y2hTaXplIG11c3QgYmUgY29uZmlndXJlZCBvbiB0aGUgY29tbWFuZCBkb2N1bWVudCBkaXJlY3RseSwgdG8gY29uZmlndXJlIGdldE1vcmUuYmF0Y2hTaXplIHVzZSBjdXJzb3Iuc2V0QmF0Y2hTaXplKCknKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGRiLCBjb21tYW5kLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoZGIuY2xpZW50LCAoMCwgdXRpbHNfMS5ucykoZGIubmFtZXNwYWNlKSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZ2V0TW9yZU9wdGlvbnMgPSB7fTtcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBPYmplY3QuZnJlZXplKHsgLi4uY29tbWFuZCB9KTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGFzeW5jIF9pbml0aWFsaXplKHNlc3Npb24pIHtcbiAgICAgICAgY29uc3Qgb3BlcmF0aW9uID0gbmV3IHJ1bl9jb21tYW5kXzEuUnVuQ29tbWFuZE9wZXJhdGlvbih0aGlzLmRiLCB0aGlzLmNvbW1hbmQsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuY3Vyc29yT3B0aW9ucyxcbiAgICAgICAgICAgIHNlc3Npb246IHNlc3Npb24sXG4gICAgICAgICAgICByZWFkUHJlZmVyZW5jZTogdGhpcy5jdXJzb3JPcHRpb25zLnJlYWRQcmVmZXJlbmNlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0ICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMuY2xpZW50LCBvcGVyYXRpb24pO1xuICAgICAgICBpZiAocmVzcG9uc2UuY3Vyc29yID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0V4cGVjdGVkIHNlcnZlciB0byByZXNwb25kIHdpdGggY3Vyc29yJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlcnZlcjogb3BlcmF0aW9uLnNlcnZlcixcbiAgICAgICAgICAgIHNlc3Npb24sXG4gICAgICAgICAgICByZXNwb25zZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgYXN5bmMgZ2V0TW9yZShfYmF0Y2hTaXplKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgIGNvbnN0IGdldE1vcmVPcGVyYXRpb24gPSBuZXcgZ2V0X21vcmVfMS5HZXRNb3JlT3BlcmF0aW9uKHRoaXMubmFtZXNwYWNlLCB0aGlzLmlkLCB0aGlzLnNlcnZlciwge1xuICAgICAgICAgICAgLi4udGhpcy5jdXJzb3JPcHRpb25zLFxuICAgICAgICAgICAgc2Vzc2lvbjogdGhpcy5zZXNzaW9uLFxuICAgICAgICAgICAgLi4udGhpcy5nZXRNb3JlT3B0aW9uc1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICgwLCBleGVjdXRlX29wZXJhdGlvbl8xLmV4ZWN1dGVPcGVyYXRpb24pKHRoaXMuY2xpZW50LCBnZXRNb3JlT3BlcmF0aW9uKTtcbiAgICB9XG59XG5leHBvcnRzLlJ1bkNvbW1hbmRDdXJzb3IgPSBSdW5Db21tYW5kQ3Vyc29yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVuX2NvbW1hbmRfY3Vyc29yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/cursor/run_command_cursor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/db.js":
/*!*****************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/db.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Db = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/../../../../../node_modules/mongodb/lib/admin.js\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/../../../../../node_modules/mongodb/lib/change_stream.js\");\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/../../../../../node_modules/mongodb/lib/collection.js\");\nconst CONSTANTS = __webpack_require__(/*! ./constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nconst run_command_cursor_1 = __webpack_require__(/*! ./cursor/run_command_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/run_command_cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst collections_1 = __webpack_require__(/*! ./operations/collections */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/collections.js\");\nconst create_collection_1 = __webpack_require__(/*! ./operations/create_collection */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/create_collection.js\");\nconst drop_1 = __webpack_require__(/*! ./operations/drop */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/drop.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst indexes_1 = __webpack_require__(/*! ./operations/indexes */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/indexes.js\");\nconst profiling_level_1 = __webpack_require__(/*! ./operations/profiling_level */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/profiling_level.js\");\nconst remove_user_1 = __webpack_require__(/*! ./operations/remove_user */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/remove_user.js\");\nconst rename_1 = __webpack_require__(/*! ./operations/rename */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/rename.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/run_command.js\");\nconst set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/set_profiling_level.js\");\nconst stats_1 = __webpack_require__(/*! ./operations/stats */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/stats.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n    'writeConcern',\n    'readPreference',\n    'readPreferenceTags',\n    'native_parser',\n    'forceServerObjectId',\n    'pkFactory',\n    'serializeFunctions',\n    'raw',\n    'authSource',\n    'ignoreUndefined',\n    'readConcern',\n    'retryMiliSeconds',\n    'numberOfRetries',\n    'useBigInt64',\n    'promoteBuffers',\n    'promoteLongs',\n    'bsonRegExp',\n    'enableUtf8Validation',\n    'promoteValues',\n    'compression',\n    'retryWrites'\n];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n    /**\n     * Creates a new Db instance\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction\n     */\n    constructor(client, databaseName, options) {\n        options = options ?? {};\n        // Filter the options\n        options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n        // Ensure we have a valid db name\n        validateDatabaseName(databaseName);\n        // Internal state of the db object\n        this.s = {\n            // Options\n            options,\n            // Unpack read preference\n            readPreference: read_preference_1.ReadPreference.fromOptions(options),\n            // Merge bson options\n            bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n            // Set up the primary key factory or fallback to ObjectId\n            pkFactory: options?.pkFactory ?? utils_1.DEFAULT_PK_FACTORY,\n            // ReadConcern\n            readConcern: read_concern_1.ReadConcern.fromOptions(options),\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n            // Namespace\n            namespace: new utils_1.MongoDBNamespace(databaseName)\n        };\n        this.client = client;\n    }\n    get databaseName() {\n        return this.s.namespace.db;\n    }\n    // Options\n    get options() {\n        return this.s.options;\n    }\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk() {\n        return this.s.readPreference?.preference !== 'primary' || false;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference() {\n        if (this.s.readPreference == null) {\n            return this.client.readPreference;\n        }\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    // get the write Concern\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get namespace() {\n        return this.s.namespace.toString();\n    }\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    async createCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    async command(command, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, {\n            ...(0, bson_1.resolveBSONOptions)(options),\n            session: options?.session,\n            readPreference: options?.readPreference\n        }));\n    }\n    /**\n     * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate(pipeline = [], options) {\n        return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /** Return the Admin db instance */\n    admin() {\n        return new admin_1.Admin(this);\n    }\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection(name, options = {}) {\n        if (typeof options === 'function') {\n            throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n        }\n        return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    async stats(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    listCollections(filter = {}, options = {}) {\n        return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    async renameCollection(fromCollection, toCollection, options) {\n        // Intentionally, we do not inherit options from parent for this operation.\n        return (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, { ...options, new_collection: true, readPreference: read_preference_1.ReadPreference.primary }));\n    }\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    async dropCollection(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    async dropDatabase(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    async collections(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    async createIndex(name, indexSpec, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    async removeUser(username, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    async setProfilingLevel(level, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    async profilingLevel(options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n    async indexInformation(name, options) {\n        return (0, execute_operation_1.executeOperation)(this.client, new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n    runCursorCommand(command, options) {\n        return new run_command_cursor_1.RunCommandCursor(this, command, options);\n    }\n}\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\nexports.Db = Db;\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName) {\n    if (typeof databaseName !== 'string')\n        throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n    if (databaseName.length === 0)\n        throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n    if (databaseName === '$external')\n        return;\n    const invalidChars = [' ', '.', '$', '/', '\\\\'];\n    for (let i = 0; i < invalidChars.length; i++) {\n        if (databaseName.indexOf(invalidChars[i]) !== -1)\n            throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n    }\n}\n//# sourceMappingURL=db.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/db.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/deps.js":
/*!*******************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/deps.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getMongoDBClientEncryption = exports.aws4 = exports.getSocks = exports.getSnappy = exports.getGcpMetadata = exports.getAwsCredentialProvider = exports.getZstdLibrary = exports.ZStandard = exports.getKerberos = exports.Kerberos = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nfunction makeErrorModule(error) {\n    const props = error ? { kModuleError: error } : {};\n    return new Proxy(props, {\n        get: (_, key) => {\n            if (key === 'kModuleError') {\n                return error;\n            }\n            throw error;\n        },\n        set: () => {\n            throw error;\n        }\n    });\n}\nexports.Kerberos = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `kerberos` not found. Please install it to enable kerberos authentication'));\nfunction getKerberos() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        exports.Kerberos = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'kerberos'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n        return exports.Kerberos;\n    }\n    catch {\n        return exports.Kerberos;\n    }\n}\nexports.getKerberos = getKerberos;\nexports.ZStandard = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@mongodb-js/zstd` not found. Please install it to enable zstd compression'));\nfunction getZstdLibrary() {\n    try {\n        exports.ZStandard = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@mongodb-js/zstd'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n        return exports.ZStandard;\n    }\n    catch {\n        return exports.ZStandard;\n    }\n}\nexports.getZstdLibrary = getZstdLibrary;\nfunction getAwsCredentialProvider() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@aws-sdk/credential-providers'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        return credentialProvider;\n    }\n    catch {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `@aws-sdk/credential-providers` not found.' +\n            ' Please install it to enable getting aws credentials via the official sdk.'));\n    }\n}\nexports.getAwsCredentialProvider = getAwsCredentialProvider;\nfunction getGcpMetadata() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const credentialProvider = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'gcp-metadata'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        return credentialProvider;\n    }\n    catch {\n        return makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `gcp-metadata` not found.' +\n            ' Please install it to enable getting gcp credentials via the official sdk.'));\n    }\n}\nexports.getGcpMetadata = getGcpMetadata;\nfunction getSnappy() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'snappy'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        return value;\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `snappy` not found. Please install it to enable snappy compression', { cause });\n        return { kModuleError };\n    }\n}\nexports.getSnappy = getSnappy;\nfunction getSocks() {\n    try {\n        // Ensure you always wrap an optional require in the try block NODE-3199\n        const value = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'socks'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n        return value;\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `socks` not found. Please install it to connections over a SOCKS5 proxy', { cause });\n        return { kModuleError };\n    }\n}\nexports.getSocks = getSocks;\nexports.aws4 = makeErrorModule(new error_1.MongoMissingDependencyError('Optional module `aws4` not found. Please install it to enable AWS authentication'));\ntry {\n    // Ensure you always wrap an optional require in the try block NODE-3199\n    exports.aws4 = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'aws4'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n}\ncatch { } // eslint-disable-line\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n    let mongodbClientEncryption = null;\n    try {\n        // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n        // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n        // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n        mongodbClientEncryption = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'mongodb-client-encryption'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    }\n    catch (cause) {\n        const kModuleError = new error_1.MongoMissingDependencyError('Optional module `mongodb-client-encryption` not found. Please install it to use auto encryption or ClientEncryption.', { cause });\n        return { kModuleError };\n    }\n    return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;\n//# sourceMappingURL=deps.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/deps.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/encrypter.js":
/*!************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/encrypter.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Encrypter = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst deps_1 = __webpack_require__(/*! ./deps */ \"(ssr)/../../../../../node_modules/mongodb/lib/deps.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_client.js\");\n/** @internal */\nconst kInternalClient = Symbol('internalClient');\n/** @internal */\nclass Encrypter {\n    constructor(client, uri, options) {\n        if (typeof options.autoEncryption !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Option \"autoEncryption\" must be specified');\n        }\n        // initialize to null, if we call getInternalClient, we may set this it is important to not overwrite those function calls.\n        this[kInternalClient] = null;\n        this.bypassAutoEncryption = !!options.autoEncryption.bypassAutoEncryption;\n        this.needsConnecting = false;\n        if (options.maxPoolSize === 0 && options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = client;\n        }\n        else if (options.autoEncryption.keyVaultClient == null) {\n            options.autoEncryption.keyVaultClient = this.getInternalClient(client, uri, options);\n        }\n        if (this.bypassAutoEncryption) {\n            options.autoEncryption.metadataClient = undefined;\n        }\n        else if (options.maxPoolSize === 0) {\n            options.autoEncryption.metadataClient = client;\n        }\n        else {\n            options.autoEncryption.metadataClient = this.getInternalClient(client, uri, options);\n        }\n        if (options.proxyHost) {\n            options.autoEncryption.proxyOptions = {\n                proxyHost: options.proxyHost,\n                proxyPort: options.proxyPort,\n                proxyUsername: options.proxyUsername,\n                proxyPassword: options.proxyPassword\n            };\n        }\n        this.autoEncrypter = new auto_encrypter_1.AutoEncrypter(client, options.autoEncryption);\n    }\n    getInternalClient(client, uri, options) {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        let internalClient = this[kInternalClient];\n        if (internalClient == null) {\n            const clonedOptions = {};\n            for (const key of [\n                ...Object.getOwnPropertyNames(options),\n                ...Object.getOwnPropertySymbols(options)\n            ]) {\n                if (['autoEncryption', 'minPoolSize', 'servers', 'caseTranslate', 'dbName'].includes(key))\n                    continue;\n                Reflect.set(clonedOptions, key, Reflect.get(options, key));\n            }\n            clonedOptions.minPoolSize = 0;\n            internalClient = new mongo_client_1.MongoClient(uri, clonedOptions);\n            this[kInternalClient] = internalClient;\n            for (const eventName of constants_1.MONGO_CLIENT_EVENTS) {\n                for (const listener of client.listeners(eventName)) {\n                    internalClient.on(eventName, listener);\n                }\n            }\n            client.on('newListener', (eventName, listener) => {\n                internalClient?.on(eventName, listener);\n            });\n            this.needsConnecting = true;\n        }\n        return internalClient;\n    }\n    async connectInternalClient() {\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const internalClient = this[kInternalClient];\n        if (this.needsConnecting && internalClient != null) {\n            this.needsConnecting = false;\n            await internalClient.connect();\n        }\n    }\n    closeCallback(client, force, callback) {\n        (0, util_1.callbackify)(this.close.bind(this))(client, force, callback);\n    }\n    async close(client, force) {\n        const maybeError = await this.autoEncrypter.teardown(!!force).catch(e => e);\n        const internalClient = this[kInternalClient];\n        if (internalClient != null && client !== internalClient) {\n            return internalClient.close(force);\n        }\n        if (maybeError) {\n            throw maybeError;\n        }\n    }\n    static checkForMongoCrypt() {\n        const mongodbClientEncryption = (0, deps_1.getMongoDBClientEncryption)();\n        if ('kModuleError' in mongodbClientEncryption) {\n            throw new error_1.MongoMissingDependencyError('Auto-encryption requested, but the module is not installed. ' +\n                'Please add `mongodb-client-encryption` as a dependency of your project');\n        }\n    }\n}\nexports.Encrypter = Encrypter;\n//# sourceMappingURL=encrypter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2VuY3J5cHRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsZUFBZSxtQkFBTyxDQUFDLGtCQUFNO0FBQzdCLHlCQUF5QixtQkFBTyxDQUFDLHVJQUF5QztBQUMxRSxvQkFBb0IsbUJBQU8sQ0FBQywrRUFBYTtBQUN6QyxlQUFlLG1CQUFPLENBQUMscUVBQVE7QUFDL0IsZ0JBQWdCLG1CQUFPLENBQUMsdUVBQVM7QUFDakMsdUJBQXVCLG1CQUFPLENBQUMscUZBQWdCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvZW5jcnlwdGVyLmpzPzkzYmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVuY3J5cHRlciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuY29uc3QgYXV0b19lbmNyeXB0ZXJfMSA9IHJlcXVpcmUoXCIuL2NsaWVudC1zaWRlLWVuY3J5cHRpb24vYXV0b19lbmNyeXB0ZXJcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcbmNvbnN0IGRlcHNfMSA9IHJlcXVpcmUoXCIuL2RlcHNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG5jb25zdCBtb25nb19jbGllbnRfMSA9IHJlcXVpcmUoXCIuL21vbmdvX2NsaWVudFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtJbnRlcm5hbENsaWVudCA9IFN5bWJvbCgnaW50ZXJuYWxDbGllbnQnKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEVuY3J5cHRlciB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50LCB1cmksIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmF1dG9FbmNyeXB0aW9uICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignT3B0aW9uIFwiYXV0b0VuY3J5cHRpb25cIiBtdXN0IGJlIHNwZWNpZmllZCcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGluaXRpYWxpemUgdG8gbnVsbCwgaWYgd2UgY2FsbCBnZXRJbnRlcm5hbENsaWVudCwgd2UgbWF5IHNldCB0aGlzIGl0IGlzIGltcG9ydGFudCB0byBub3Qgb3ZlcndyaXRlIHRob3NlIGZ1bmN0aW9uIGNhbGxzLlxuICAgICAgICB0aGlzW2tJbnRlcm5hbENsaWVudF0gPSBudWxsO1xuICAgICAgICB0aGlzLmJ5cGFzc0F1dG9FbmNyeXB0aW9uID0gISFvcHRpb25zLmF1dG9FbmNyeXB0aW9uLmJ5cGFzc0F1dG9FbmNyeXB0aW9uO1xuICAgICAgICB0aGlzLm5lZWRzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAob3B0aW9ucy5tYXhQb29sU2l6ZSA9PT0gMCAmJiBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLmtleVZhdWx0Q2xpZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ua2V5VmF1bHRDbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5rZXlWYXVsdENsaWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmF1dG9FbmNyeXB0aW9uLmtleVZhdWx0Q2xpZW50ID0gdGhpcy5nZXRJbnRlcm5hbENsaWVudChjbGllbnQsIHVyaSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYnlwYXNzQXV0b0VuY3J5cHRpb24pIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ubWV0YWRhdGFDbGllbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucy5tYXhQb29sU2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hdXRvRW5jcnlwdGlvbi5tZXRhZGF0YUNsaWVudCA9IGNsaWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ubWV0YWRhdGFDbGllbnQgPSB0aGlzLmdldEludGVybmFsQ2xpZW50KGNsaWVudCwgdXJpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5wcm94eUhvc3QpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXV0b0VuY3J5cHRpb24ucHJveHlPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHByb3h5SG9zdDogb3B0aW9ucy5wcm94eUhvc3QsXG4gICAgICAgICAgICAgICAgcHJveHlQb3J0OiBvcHRpb25zLnByb3h5UG9ydCxcbiAgICAgICAgICAgICAgICBwcm94eVVzZXJuYW1lOiBvcHRpb25zLnByb3h5VXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgcHJveHlQYXNzd29yZDogb3B0aW9ucy5wcm94eVBhc3N3b3JkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXV0b0VuY3J5cHRlciA9IG5ldyBhdXRvX2VuY3J5cHRlcl8xLkF1dG9FbmNyeXB0ZXIoY2xpZW50LCBvcHRpb25zLmF1dG9FbmNyeXB0aW9uKTtcbiAgICB9XG4gICAgZ2V0SW50ZXJuYWxDbGllbnQoY2xpZW50LCB1cmksIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gVE9ETyhOT0RFLTQxNDQpOiBSZW1vdmUgbmV3IHZhcmlhYmxlIGZvciB0eXBlIG5hcnJvd2luZ1xuICAgICAgICBsZXQgaW50ZXJuYWxDbGllbnQgPSB0aGlzW2tJbnRlcm5hbENsaWVudF07XG4gICAgICAgIGlmIChpbnRlcm5hbENsaWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWRPcHRpb25zID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBbXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucyksXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvcHRpb25zKVxuICAgICAgICAgICAgXSkge1xuICAgICAgICAgICAgICAgIGlmIChbJ2F1dG9FbmNyeXB0aW9uJywgJ21pblBvb2xTaXplJywgJ3NlcnZlcnMnLCAnY2FzZVRyYW5zbGF0ZScsICdkYk5hbWUnXS5pbmNsdWRlcyhrZXkpKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBSZWZsZWN0LnNldChjbG9uZWRPcHRpb25zLCBrZXksIFJlZmxlY3QuZ2V0KG9wdGlvbnMsIGtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xvbmVkT3B0aW9ucy5taW5Qb29sU2l6ZSA9IDA7XG4gICAgICAgICAgICBpbnRlcm5hbENsaWVudCA9IG5ldyBtb25nb19jbGllbnRfMS5Nb25nb0NsaWVudCh1cmksIGNsb25lZE9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpc1trSW50ZXJuYWxDbGllbnRdID0gaW50ZXJuYWxDbGllbnQ7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50TmFtZSBvZiBjb25zdGFudHNfMS5NT05HT19DTElFTlRfRVZFTlRTKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiBjbGllbnQubGlzdGVuZXJzKGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWxDbGllbnQub24oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2xpZW50Lm9uKCduZXdMaXN0ZW5lcicsIChldmVudE5hbWUsIGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxDbGllbnQ/Lm9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLm5lZWRzQ29ubmVjdGluZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludGVybmFsQ2xpZW50O1xuICAgIH1cbiAgICBhc3luYyBjb25uZWN0SW50ZXJuYWxDbGllbnQoKSB7XG4gICAgICAgIC8vIFRPRE8oTk9ERS00MTQ0KTogUmVtb3ZlIG5ldyB2YXJpYWJsZSBmb3IgdHlwZSBuYXJyb3dpbmdcbiAgICAgICAgY29uc3QgaW50ZXJuYWxDbGllbnQgPSB0aGlzW2tJbnRlcm5hbENsaWVudF07XG4gICAgICAgIGlmICh0aGlzLm5lZWRzQ29ubmVjdGluZyAmJiBpbnRlcm5hbENsaWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm5lZWRzQ29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgYXdhaXQgaW50ZXJuYWxDbGllbnQuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNsb3NlQ2FsbGJhY2soY2xpZW50LCBmb3JjZSwgY2FsbGJhY2spIHtcbiAgICAgICAgKDAsIHV0aWxfMS5jYWxsYmFja2lmeSkodGhpcy5jbG9zZS5iaW5kKHRoaXMpKShjbGllbnQsIGZvcmNlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGFzeW5jIGNsb3NlKGNsaWVudCwgZm9yY2UpIHtcbiAgICAgICAgY29uc3QgbWF5YmVFcnJvciA9IGF3YWl0IHRoaXMuYXV0b0VuY3J5cHRlci50ZWFyZG93bighIWZvcmNlKS5jYXRjaChlID0+IGUpO1xuICAgICAgICBjb25zdCBpbnRlcm5hbENsaWVudCA9IHRoaXNba0ludGVybmFsQ2xpZW50XTtcbiAgICAgICAgaWYgKGludGVybmFsQ2xpZW50ICE9IG51bGwgJiYgY2xpZW50ICE9PSBpbnRlcm5hbENsaWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVybmFsQ2xpZW50LmNsb3NlKGZvcmNlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF5YmVFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbWF5YmVFcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgY2hlY2tGb3JNb25nb0NyeXB0KCkge1xuICAgICAgICBjb25zdCBtb25nb2RiQ2xpZW50RW5jcnlwdGlvbiA9ICgwLCBkZXBzXzEuZ2V0TW9uZ29EQkNsaWVudEVuY3J5cHRpb24pKCk7XG4gICAgICAgIGlmICgna01vZHVsZUVycm9yJyBpbiBtb25nb2RiQ2xpZW50RW5jcnlwdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29NaXNzaW5nRGVwZW5kZW5jeUVycm9yKCdBdXRvLWVuY3J5cHRpb24gcmVxdWVzdGVkLCBidXQgdGhlIG1vZHVsZSBpcyBub3QgaW5zdGFsbGVkLiAnICtcbiAgICAgICAgICAgICAgICAnUGxlYXNlIGFkZCBgbW9uZ29kYi1jbGllbnQtZW5jcnlwdGlvbmAgYXMgYSBkZXBlbmRlbmN5IG9mIHlvdXIgcHJvamVjdCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5FbmNyeXB0ZXIgPSBFbmNyeXB0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNyeXB0ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/encrypter.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/error.js":
/*!********************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/error.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableReadError = exports.isRetryableWriteError = exports.needsRetryableWriteLabel = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoUnexpectedServerResponseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.MongoErrorLabel = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = exports.NODE_IS_RECOVERING_ERROR_MESSAGE = exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a writable primary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegExp('not master', 'i');\n/**\n * @internal\n * The legacy error message from the server that indicates the node is not a primary or secondary\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegExp('not master or secondary', 'i');\n/**\n * @internal\n * The error message from the server that indicates the node is recovering\n * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering\n */\nexports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegExp('node is recovering', 'i');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n    HostUnreachable: 6,\n    HostNotFound: 7,\n    NetworkTimeout: 89,\n    ShutdownInProgress: 91,\n    PrimarySteppedDown: 189,\n    ExceededTimeLimit: 262,\n    SocketException: 9001,\n    NotWritablePrimary: 10107,\n    InterruptedAtShutdown: 11600,\n    InterruptedDueToReplStateChange: 11602,\n    NotPrimaryNoSecondaryOk: 13435,\n    NotPrimaryOrSecondary: 13436,\n    StaleShardVersion: 63,\n    StaleEpoch: 150,\n    StaleConfig: 13388,\n    RetryChangeStream: 234,\n    FailedToSatisfyReadPreference: 133,\n    CursorNotFound: 43,\n    LegacyNotPrimary: 10058,\n    WriteConcernFailed: 64,\n    NamespaceNotFound: 26,\n    IllegalOperation: 20,\n    MaxTimeMSExpired: 50,\n    UnknownReplWriteConcern: 79,\n    UnsatisfiableWriteConcern: 100,\n    Reauthenticate: 391\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,\n    exports.MONGODB_ERROR_CODES.StaleShardVersion,\n    exports.MONGODB_ERROR_CODES.StaleEpoch,\n    exports.MONGODB_ERROR_CODES.StaleConfig,\n    exports.MONGODB_ERROR_CODES.RetryChangeStream,\n    exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n    exports.MONGODB_ERROR_CODES.CursorNotFound\n]);\n/** @public */\nexports.MongoErrorLabel = Object.freeze({\n    RetryableWriteError: 'RetryableWriteError',\n    TransientTransactionError: 'TransientTransactionError',\n    UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',\n    ResumableChangeStreamError: 'ResumableChangeStreamError',\n    HandshakeError: 'HandshakeError',\n    ResetPool: 'ResetPool',\n    InterruptInUseConnections: 'InterruptInUseConnections',\n    NoWritesPerformed: 'NoWritesPerformed'\n});\nfunction isAggregateError(e) {\n    return 'errors' in e && Array.isArray(e.errors);\n}\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n        this[kErrorLabels] = new Set();\n    }\n    /** @internal */\n    static buildErrorMessage(e) {\n        if (typeof e === 'string') {\n            return e;\n        }\n        if (isAggregateError(e) && e.message.length === 0) {\n            return e.errors.length === 0\n                ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'\n                : e.errors.map(({ message }) => message).join(', ');\n        }\n        return e.message;\n    }\n    get name() {\n        return 'MongoError';\n    }\n    /** Legacy name for server error responses */\n    get errmsg() {\n        return this.message;\n    }\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label) {\n        return this[kErrorLabels].has(label);\n    }\n    addErrorLabel(label) {\n        this[kErrorLabels].add(label);\n    }\n    get errorLabels() {\n        return Array.from(this[kErrorLabels]);\n    }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        if (message.errorLabels) {\n            this[kErrorLabels] = new Set(message.errorLabels);\n        }\n        for (const name in message) {\n            if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n                this[name] = message[name];\n        }\n    }\n    get name() {\n        return 'MongoServerError';\n    }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoDriverError';\n    }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoAPIError';\n    }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoRuntimeError';\n    }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'This batch has already been executed, create new batch to execute') {\n        super(message);\n    }\n    get name() {\n        return 'MongoBatchReExecutionError';\n    }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoDecompressionError';\n    }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoNotConnectedError';\n    }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoTransactionError';\n    }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cannot use a session that has ended') {\n        super(message);\n    }\n    get name() {\n        return 'MongoExpiredSessionError';\n    }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoKerberosError';\n    }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nclass MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAWSError';\n    }\n}\nexports.MongoAWSError = MongoAWSError;\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nclass MongoAzureError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoAzureError';\n    }\n}\nexports.MongoAzureError = MongoAzureError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoChangeStreamError';\n    }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Tailable cursor does not support this operation') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTailableCursorError';\n    }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSStreamError';\n    }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoGridFSChunkError';\n    }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nclass MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoUnexpectedServerResponseError';\n    }\n}\nexports.MongoUnexpectedServerResponseError = MongoUnexpectedServerResponseError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Cursor is already initialized') {\n        super(message);\n    }\n    get name() {\n        return 'MongoCursorInUseError';\n    }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Server is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoServerClosedError';\n    }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message || 'Cursor is exhausted');\n    }\n    get name() {\n        return 'MongoCursorExhaustedError';\n    }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message = 'Topology is closed') {\n        super(message);\n    }\n    get name() {\n        return 'MongoTopologyClosedError';\n    }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n    return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, { cause: options?.cause });\n        if (options && typeof options.beforeHandshake === 'boolean') {\n            this[kBeforeHandshake] = options.beforeHandshake;\n        }\n    }\n    get name() {\n        return 'MongoNetworkError';\n    }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoNetworkTimeoutError';\n    }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoParseError';\n    }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoInvalidArgumentError';\n    }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoCompatibilityError';\n    }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message) {\n        super(message);\n    }\n    get name() {\n        return 'MongoMissingCredentialsError';\n    }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, options = {}) {\n        super(message, options);\n    }\n    get name() {\n        return 'MongoMissingDependencyError';\n    }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        if (reason && reason.error) {\n            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {\n                cause: reason.error\n            });\n        }\n        else {\n            super(message);\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        this.code = reason.error?.code;\n    }\n    get name() {\n        return 'MongoSystemError';\n    }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, reason) {\n        super(message, reason);\n    }\n    get name() {\n        return 'MongoServerSelectionError';\n    }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n    const output = Object.assign({}, input);\n    if (output.ok === 0) {\n        output.ok = 1;\n        delete output.errmsg;\n        delete output.code;\n        delete output.codeName;\n    }\n    return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message, result) {\n        if (result && Array.isArray(result.errorLabels)) {\n            message.errorLabels = result.errorLabels;\n        }\n        super(message);\n        this.errInfo = message.errInfo;\n        if (result != null) {\n            this.result = makeWriteConcernResultObject(result);\n        }\n    }\n    get name() {\n        return 'MongoWriteConcernError';\n    }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error\nconst RETRYABLE_READ_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.HostUnreachable,\n    exports.MONGODB_ERROR_CODES.HostNotFound,\n    exports.MONGODB_ERROR_CODES.NetworkTimeout,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.SocketException,\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([\n    ...RETRYABLE_READ_ERROR_CODES,\n    exports.MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\nfunction needsRetryableWriteLabel(error, maxWireVersion) {\n    // pre-4.4 server, then the driver adds an error label for every valid case\n    // execute operation will only inspect the label, code/message logic is handled here\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (error instanceof MongoError) {\n        if ((maxWireVersion >= 9 || error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError)) &&\n            !error.hasErrorLabel(exports.MongoErrorLabel.HandshakeError)) {\n            // If we already have the error label no need to add it again. 4.4+ servers add the label.\n            // In the case where we have a handshake error, need to fall down to the logic checking\n            // the codes.\n            return false;\n        }\n    }\n    if (error instanceof MongoWriteConcernError) {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n    }\n    if (error instanceof MongoError && typeof error.code === 'number') {\n        return RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.needsRetryableWriteLabel = needsRetryableWriteLabel;\nfunction isRetryableWriteError(error) {\n    return error.hasErrorLabel(exports.MongoErrorLabel.RetryableWriteError);\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableReadError(error) {\n    const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;\n    if (hasRetryableErrorCode) {\n        return true;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    const isNotWritablePrimaryError = exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);\n    if (isNotWritablePrimaryError) {\n        return true;\n    }\n    const isNodeIsRecoveringError = exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);\n    if (isNodeIsRecoveringError) {\n        return true;\n    }\n    return false;\n}\nexports.isRetryableReadError = isRetryableReadError;\nconst SDAM_RECOVERING_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress,\n    exports.MONGODB_ERROR_CODES.PrimarySteppedDown,\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n    exports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary\n]);\nconst SDAM_NOT_PRIMARY_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.NotWritablePrimary,\n    exports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,\n    exports.MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n    exports.MONGODB_ERROR_CODES.InterruptedAtShutdown,\n    exports.MONGODB_ERROR_CODES.ShutdownInProgress\n]);\nfunction isRecoveringError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_RECOVERING_CODES.has(err.code);\n    }\n    return (exports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||\n        exports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message));\n}\nfunction isNotWritablePrimaryError(err) {\n    if (typeof err.code === 'number') {\n        // If any error code exists, we ignore the error.message\n        return SDAM_NOT_PRIMARY_CODES.has(err.code);\n    }\n    if (isRecoveringError(err)) {\n        return false;\n    }\n    return exports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n    //       close event are considered unrecoverable\n    if (error instanceof MongoParseError || error == null) {\n        return true;\n    }\n    return isRecoveringError(error) || isNotWritablePrimaryError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\nfunction isResumableError(error, wireVersion) {\n    if (error == null || !(error instanceof MongoError)) {\n        return false;\n    }\n    if (error instanceof MongoNetworkError) {\n        return true;\n    }\n    if (wireVersion != null && wireVersion >= 9) {\n        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n        if (error.code === exports.MONGODB_ERROR_CODES.CursorNotFound) {\n            return true;\n        }\n        return error.hasErrorLabel(exports.MongoErrorLabel.ResumableChangeStreamError);\n    }\n    if (typeof error.code === 'number') {\n        return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n    }\n    return false;\n}\nexports.isResumableError = isResumableError;\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/error.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/explain.js":
/*!**********************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/explain.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Explain = exports.ExplainVerbosity = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ExplainVerbosity = Object.freeze({\n    queryPlanner: 'queryPlanner',\n    queryPlannerExtended: 'queryPlannerExtended',\n    executionStats: 'executionStats',\n    allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\nclass Explain {\n    constructor(verbosity) {\n        if (typeof verbosity === 'boolean') {\n            this.verbosity = verbosity\n                ? exports.ExplainVerbosity.allPlansExecution\n                : exports.ExplainVerbosity.queryPlanner;\n        }\n        else {\n            this.verbosity = verbosity;\n        }\n    }\n    static fromOptions(options) {\n        if (options?.explain == null)\n            return;\n        const explain = options.explain;\n        if (typeof explain === 'boolean' || typeof explain === 'string') {\n            return new Explain(explain);\n        }\n        throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n    }\n}\nexports.Explain = Explain;\n//# sourceMappingURL=explain.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2V4cGxhaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLHdCQUF3QjtBQUMxQyxnQkFBZ0IsbUJBQU8sQ0FBQyx1RUFBUztBQUNqQztBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9leHBsYWluLmpzP2YwNjYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkV4cGxhaW4gPSBleHBvcnRzLkV4cGxhaW5WZXJib3NpdHkgPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4vZXJyb3JcIik7XG4vKiogQHB1YmxpYyAqL1xuZXhwb3J0cy5FeHBsYWluVmVyYm9zaXR5ID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgcXVlcnlQbGFubmVyOiAncXVlcnlQbGFubmVyJyxcbiAgICBxdWVyeVBsYW5uZXJFeHRlbmRlZDogJ3F1ZXJ5UGxhbm5lckV4dGVuZGVkJyxcbiAgICBleGVjdXRpb25TdGF0czogJ2V4ZWN1dGlvblN0YXRzJyxcbiAgICBhbGxQbGFuc0V4ZWN1dGlvbjogJ2FsbFBsYW5zRXhlY3V0aW9uJ1xufSk7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBFeHBsYWluIHtcbiAgICBjb25zdHJ1Y3Rvcih2ZXJib3NpdHkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2ZXJib3NpdHkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhpcy52ZXJib3NpdHkgPSB2ZXJib3NpdHlcbiAgICAgICAgICAgICAgICA/IGV4cG9ydHMuRXhwbGFpblZlcmJvc2l0eS5hbGxQbGFuc0V4ZWN1dGlvblxuICAgICAgICAgICAgICAgIDogZXhwb3J0cy5FeHBsYWluVmVyYm9zaXR5LnF1ZXJ5UGxhbm5lcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudmVyYm9zaXR5ID0gdmVyYm9zaXR5O1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zPy5leHBsYWluID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGV4cGxhaW4gPSBvcHRpb25zLmV4cGxhaW47XG4gICAgICAgIGlmICh0eXBlb2YgZXhwbGFpbiA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiBleHBsYWluID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFeHBsYWluKGV4cGxhaW4pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0ZpZWxkIFwiZXhwbGFpblwiIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBib29sZWFuJyk7XG4gICAgfVxufVxuZXhwb3J0cy5FeHBsYWluID0gRXhwbGFpbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4cGxhaW4uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/explain.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/gridfs/download.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/gridfs/download.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketReadStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nclass GridFSBucketReadStream extends stream_1.Readable {\n    /**\n     * @param chunks - Handle for chunks collection\n     * @param files - Handle for files collection\n     * @param readPreference - The read preference to use\n     * @param filter - The filter to use to find the file document\n     * @internal\n     */\n    constructor(chunks, files, readPreference, filter, options) {\n        super({ emitClose: true });\n        this.s = {\n            bytesToTrim: 0,\n            bytesToSkip: 0,\n            bytesRead: 0,\n            chunks,\n            expected: 0,\n            files,\n            filter,\n            init: false,\n            expectedEnd: 0,\n            options: {\n                start: 0,\n                end: 0,\n                ...options\n            },\n            readPreference\n        };\n    }\n    /**\n     * Reads from the cursor and pushes to the stream.\n     * Private Impl, do not call directly\n     * @internal\n     */\n    _read() {\n        if (this.destroyed)\n            return;\n        waitForFile(this, () => doRead(this));\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start = 0) {\n        throwIfInitialized(this);\n        this.s.options.start = start;\n        return this;\n    }\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end = 0) {\n        throwIfInitialized(this);\n        this.s.options.end = end;\n        return this;\n    }\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    async abort() {\n        this.push(null);\n        this.destroy();\n        await this.s.cursor?.close();\n    }\n}\n/**\n * Fires when the stream loaded the file document corresponding to the provided id.\n * @event\n */\nGridFSBucketReadStream.FILE = 'file';\nexports.GridFSBucketReadStream = GridFSBucketReadStream;\nfunction throwIfInitialized(stream) {\n    if (stream.s.init) {\n        throw new error_1.MongoGridFSStreamError('Options cannot be changed after the stream is initialized');\n    }\n}\nfunction doRead(stream) {\n    if (stream.destroyed)\n        return;\n    if (!stream.s.cursor)\n        return;\n    if (!stream.s.file)\n        return;\n    const handleReadResult = ({ error, doc }) => {\n        if (stream.destroyed) {\n            return;\n        }\n        if (error) {\n            stream.destroy(error);\n            return;\n        }\n        if (!doc) {\n            stream.push(null);\n            stream.s.cursor?.close().then(() => null, error => stream.destroy(error));\n            return;\n        }\n        if (!stream.s.file)\n            return;\n        const bytesRemaining = stream.s.file.length - stream.s.bytesRead;\n        const expectedN = stream.s.expected++;\n        const expectedLength = Math.min(stream.s.file.chunkSize, bytesRemaining);\n        if (doc.n > expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsMissing: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        if (doc.n < expectedN) {\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected: ${expectedN}`));\n        }\n        let buf = Buffer.isBuffer(doc.data) ? doc.data : doc.data.buffer;\n        if (buf.byteLength !== expectedLength) {\n            if (bytesRemaining <= 0) {\n                return stream.destroy(new error_1.MongoGridFSChunkError(`ExtraChunk: Got unexpected n: ${doc.n}, expected file length ${stream.s.file.length} bytes but already read ${stream.s.bytesRead} bytes`));\n            }\n            return stream.destroy(new error_1.MongoGridFSChunkError(`ChunkIsWrongSize: Got unexpected length: ${buf.byteLength}, expected: ${expectedLength}`));\n        }\n        stream.s.bytesRead += buf.byteLength;\n        if (buf.byteLength === 0) {\n            return stream.push(null);\n        }\n        let sliceStart = null;\n        let sliceEnd = null;\n        if (stream.s.bytesToSkip != null) {\n            sliceStart = stream.s.bytesToSkip;\n            stream.s.bytesToSkip = 0;\n        }\n        const atEndOfStream = expectedN === stream.s.expectedEnd - 1;\n        const bytesLeftToRead = stream.s.options.end - stream.s.bytesToSkip;\n        if (atEndOfStream && stream.s.bytesToTrim != null) {\n            sliceEnd = stream.s.file.chunkSize - stream.s.bytesToTrim;\n        }\n        else if (stream.s.options.end && bytesLeftToRead < doc.data.byteLength) {\n            sliceEnd = bytesLeftToRead;\n        }\n        if (sliceStart != null || sliceEnd != null) {\n            buf = buf.slice(sliceStart || 0, sliceEnd || buf.byteLength);\n        }\n        stream.push(buf);\n        return;\n    };\n    stream.s.cursor.next().then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction init(stream) {\n    const findOneOptions = {};\n    if (stream.s.readPreference) {\n        findOneOptions.readPreference = stream.s.readPreference;\n    }\n    if (stream.s.options && stream.s.options.sort) {\n        findOneOptions.sort = stream.s.options.sort;\n    }\n    if (stream.s.options && stream.s.options.skip) {\n        findOneOptions.skip = stream.s.options.skip;\n    }\n    const handleReadResult = ({ error, doc }) => {\n        if (error) {\n            return stream.destroy(error);\n        }\n        if (!doc) {\n            const identifier = stream.s.filter._id\n                ? stream.s.filter._id.toString()\n                : stream.s.filter.filename;\n            const errmsg = `FileNotFound: file ${identifier} was not found`;\n            // TODO(NODE-3483)\n            const err = new error_1.MongoRuntimeError(errmsg);\n            err.code = 'ENOENT'; // TODO: NODE-3338 set property as part of constructor\n            return stream.destroy(err);\n        }\n        // If document is empty, kill the stream immediately and don't\n        // execute any reads\n        if (doc.length <= 0) {\n            stream.push(null);\n            return;\n        }\n        if (stream.destroyed) {\n            // If user destroys the stream before we have a cursor, wait\n            // until the query is done to say we're 'closed' because we can't\n            // cancel a query.\n            stream.destroy();\n            return;\n        }\n        try {\n            stream.s.bytesToSkip = handleStartOption(stream, doc, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        const filter = { files_id: doc._id };\n        // Currently (MongoDB 3.4.4) skip function does not support the index,\n        // it needs to retrieve all the documents first and then skip them. (CS-25811)\n        // As work around we use $gte on the \"n\" field.\n        if (stream.s.options && stream.s.options.start != null) {\n            const skip = Math.floor(stream.s.options.start / doc.chunkSize);\n            if (skip > 0) {\n                filter['n'] = { $gte: skip };\n            }\n        }\n        stream.s.cursor = stream.s.chunks.find(filter).sort({ n: 1 });\n        if (stream.s.readPreference) {\n            stream.s.cursor.withReadPreference(stream.s.readPreference);\n        }\n        stream.s.expectedEnd = Math.ceil(doc.length / doc.chunkSize);\n        stream.s.file = doc;\n        try {\n            stream.s.bytesToTrim = handleEndOption(stream, doc, stream.s.cursor, stream.s.options);\n        }\n        catch (error) {\n            return stream.destroy(error);\n        }\n        stream.emit(GridFSBucketReadStream.FILE, doc);\n        return;\n    };\n    stream.s.files.findOne(stream.s.filter, findOneOptions).then(doc => handleReadResult({ error: null, doc }), error => handleReadResult({ error, doc: null }));\n}\nfunction waitForFile(stream, callback) {\n    if (stream.s.file) {\n        return callback();\n    }\n    if (!stream.s.init) {\n        init(stream);\n        stream.s.init = true;\n    }\n    stream.once('file', () => {\n        callback();\n    });\n}\nfunction handleStartOption(stream, doc, options) {\n    if (options && options.start != null) {\n        if (options.start > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be negative`);\n        }\n        if (options.end != null && options.end < options.start) {\n            throw new error_1.MongoInvalidArgumentError(`Stream start (${options.start}) must not be greater than stream end (${options.end})`);\n        }\n        stream.s.bytesRead = Math.floor(options.start / doc.chunkSize) * doc.chunkSize;\n        stream.s.expected = Math.floor(options.start / doc.chunkSize);\n        return options.start - stream.s.bytesRead;\n    }\n    throw new error_1.MongoInvalidArgumentError('Start option must be defined');\n}\nfunction handleEndOption(stream, doc, cursor, options) {\n    if (options && options.end != null) {\n        if (options.end > doc.length) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be more than the length of the file (${doc.length})`);\n        }\n        if (options.start == null || options.start < 0) {\n            throw new error_1.MongoInvalidArgumentError(`Stream end (${options.end}) must not be negative`);\n        }\n        const start = options.start != null ? Math.floor(options.start / doc.chunkSize) : 0;\n        cursor.limit(Math.ceil(options.end / doc.chunkSize) - start);\n        stream.s.expectedEnd = Math.ceil(options.end / doc.chunkSize);\n        return Math.ceil(options.end / doc.chunkSize) * doc.chunkSize - options.end;\n    }\n    throw new error_1.MongoInvalidArgumentError('End option must be defined');\n}\n//# sourceMappingURL=download.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/gridfs/download.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/gridfs/index.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/gridfs/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucket = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\nconst download_1 = __webpack_require__(/*! ./download */ \"(ssr)/../../../../../node_modules/mongodb/lib/gridfs/download.js\");\nconst upload_1 = __webpack_require__(/*! ./upload */ \"(ssr)/../../../../../node_modules/mongodb/lib/gridfs/upload.js\");\nconst DEFAULT_GRIDFS_BUCKET_OPTIONS = {\n    bucketName: 'fs',\n    chunkSizeBytes: 255 * 1024\n};\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nclass GridFSBucket extends mongo_types_1.TypedEventEmitter {\n    constructor(db, options) {\n        super();\n        this.setMaxListeners(0);\n        const privateOptions = {\n            ...DEFAULT_GRIDFS_BUCKET_OPTIONS,\n            ...options,\n            writeConcern: write_concern_1.WriteConcern.fromOptions(options)\n        };\n        this.s = {\n            db,\n            options: privateOptions,\n            _chunksCollection: db.collection(privateOptions.bucketName + '.chunks'),\n            _filesCollection: db.collection(privateOptions.bucketName + '.files'),\n            checkedIndexes: false,\n            calledOpenUploadStream: false\n        };\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, options);\n    }\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id, filename, options) {\n        return new upload_1.GridFSBucketWriteStream(this, filename, { ...options, id });\n    }\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id, options) {\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { _id: id }, options);\n    }\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    async delete(id) {\n        const { deletedCount } = await this.s._filesCollection.deleteOne({ _id: id });\n        // Delete orphaned chunks before returning FileNotFound\n        await this.s._chunksCollection.deleteMany({ files_id: id });\n        if (deletedCount === 0) {\n            // TODO(NODE-3483): Replace with more appropriate error\n            // Consider creating new error MongoGridFSFileNotFoundError\n            throw new error_1.MongoRuntimeError(`File not found for id ${id}`);\n        }\n    }\n    /** Convenience wrapper around find on the files collection */\n    find(filter = {}, options = {}) {\n        return this.s._filesCollection.find(filter, options);\n    }\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename, options) {\n        let sort = { uploadDate: -1 };\n        let skip = undefined;\n        if (options && options.revision != null) {\n            if (options.revision >= 0) {\n                sort = { uploadDate: 1 };\n                skip = options.revision;\n            }\n            else {\n                skip = -options.revision - 1;\n            }\n        }\n        return new download_1.GridFSBucketReadStream(this.s._chunksCollection, this.s._filesCollection, this.s.options.readPreference, { filename }, { ...options, sort, skip });\n    }\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    async rename(id, filename) {\n        const filter = { _id: id };\n        const update = { $set: { filename } };\n        const { matchedCount } = await this.s._filesCollection.updateOne(filter, update);\n        if (matchedCount === 0) {\n            throw new error_1.MongoRuntimeError(`File with id ${id} not found`);\n        }\n    }\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    async drop() {\n        await this.s._filesCollection.drop();\n        await this.s._chunksCollection.drop();\n    }\n}\n/**\n * When the first call to openUploadStream is made, the upload stream will\n * check to see if it needs to create the proper indexes on the chunks and\n * files collections. This event is fired either when 1) it determines that\n * no index creation is necessary, 2) when it successfully creates the\n * necessary indexes.\n * @event\n */\nGridFSBucket.INDEX = 'index';\nexports.GridFSBucket = GridFSBucket;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL2dyaWRmcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsc0JBQXNCLG1CQUFPLENBQUMsb0ZBQWdCO0FBQzlDLHdCQUF3QixtQkFBTyxDQUFDLHdGQUFrQjtBQUNsRCxtQkFBbUIsbUJBQU8sQ0FBQyxvRkFBWTtBQUN2QyxpQkFBaUIsbUJBQU8sQ0FBQyxnRkFBVTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxnQkFBZ0I7QUFDdEY7QUFDQTtBQUNBO0FBQ0EseUlBQXlJLFNBQVM7QUFDbEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZUFBZSw0Q0FBNEMsU0FBUztBQUNwRjtBQUNBLG9EQUFvRCxjQUFjO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxHQUFHO0FBQzVFO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5SUFBeUksVUFBVSxJQUFJLHdCQUF3QjtBQUMvSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLHlCQUF5QixRQUFRO0FBQ2pDLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0EsZ0VBQWdFLElBQUk7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9ncmlkZnMvaW5kZXguanM/NzI2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR3JpZEZTQnVja2V0ID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG1vbmdvX3R5cGVzXzEgPSByZXF1aXJlKFwiLi4vbW9uZ29fdHlwZXNcIik7XG5jb25zdCB3cml0ZV9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vd3JpdGVfY29uY2VyblwiKTtcbmNvbnN0IGRvd25sb2FkXzEgPSByZXF1aXJlKFwiLi9kb3dubG9hZFwiKTtcbmNvbnN0IHVwbG9hZF8xID0gcmVxdWlyZShcIi4vdXBsb2FkXCIpO1xuY29uc3QgREVGQVVMVF9HUklERlNfQlVDS0VUX09QVElPTlMgPSB7XG4gICAgYnVja2V0TmFtZTogJ2ZzJyxcbiAgICBjaHVua1NpemVCeXRlczogMjU1ICogMTAyNFxufTtcbi8qKlxuICogQ29uc3RydWN0b3IgZm9yIGEgc3RyZWFtaW5nIEdyaWRGUyBpbnRlcmZhY2VcbiAqIEBwdWJsaWNcbiAqL1xuY2xhc3MgR3JpZEZTQnVja2V0IGV4dGVuZHMgbW9uZ29fdHlwZXNfMS5UeXBlZEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zZXRNYXhMaXN0ZW5lcnMoMCk7XG4gICAgICAgIGNvbnN0IHByaXZhdGVPcHRpb25zID0ge1xuICAgICAgICAgICAgLi4uREVGQVVMVF9HUklERlNfQlVDS0VUX09QVElPTlMsXG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgd3JpdGVDb25jZXJuOiB3cml0ZV9jb25jZXJuXzEuV3JpdGVDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucyA9IHtcbiAgICAgICAgICAgIGRiLFxuICAgICAgICAgICAgb3B0aW9uczogcHJpdmF0ZU9wdGlvbnMsXG4gICAgICAgICAgICBfY2h1bmtzQ29sbGVjdGlvbjogZGIuY29sbGVjdGlvbihwcml2YXRlT3B0aW9ucy5idWNrZXROYW1lICsgJy5jaHVua3MnKSxcbiAgICAgICAgICAgIF9maWxlc0NvbGxlY3Rpb246IGRiLmNvbGxlY3Rpb24ocHJpdmF0ZU9wdGlvbnMuYnVja2V0TmFtZSArICcuZmlsZXMnKSxcbiAgICAgICAgICAgIGNoZWNrZWRJbmRleGVzOiBmYWxzZSxcbiAgICAgICAgICAgIGNhbGxlZE9wZW5VcGxvYWRTdHJlYW06IGZhbHNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB3cml0YWJsZSBzdHJlYW0gKEdyaWRGU0J1Y2tldFdyaXRlU3RyZWFtKSBmb3Igd3JpdGluZ1xuICAgICAqIGJ1ZmZlcnMgdG8gR3JpZEZTLiBUaGUgc3RyZWFtJ3MgJ2lkJyBwcm9wZXJ0eSBjb250YWlucyB0aGUgcmVzdWx0aW5nXG4gICAgICogZmlsZSdzIGlkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZpbGVuYW1lIC0gVGhlIHZhbHVlIG9mIHRoZSAnZmlsZW5hbWUnIGtleSBpbiB0aGUgZmlsZXMgZG9jXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAgICAgKi9cbiAgICBvcGVuVXBsb2FkU3RyZWFtKGZpbGVuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgdXBsb2FkXzEuR3JpZEZTQnVja2V0V3JpdGVTdHJlYW0odGhpcywgZmlsZW5hbWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd3JpdGFibGUgc3RyZWFtIChHcmlkRlNCdWNrZXRXcml0ZVN0cmVhbSkgZm9yIHdyaXRpbmdcbiAgICAgKiBidWZmZXJzIHRvIEdyaWRGUyBmb3IgYSBjdXN0b20gZmlsZSBpZC4gVGhlIHN0cmVhbSdzICdpZCcgcHJvcGVydHkgY29udGFpbnMgdGhlIHJlc3VsdGluZ1xuICAgICAqIGZpbGUncyBpZC5cbiAgICAgKi9cbiAgICBvcGVuVXBsb2FkU3RyZWFtV2l0aElkKGlkLCBmaWxlbmFtZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IHVwbG9hZF8xLkdyaWRGU0J1Y2tldFdyaXRlU3RyZWFtKHRoaXMsIGZpbGVuYW1lLCB7IC4uLm9wdGlvbnMsIGlkIH0pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIHJlYWRhYmxlIHN0cmVhbSAoR3JpZEZTQnVja2V0UmVhZFN0cmVhbSkgZm9yIHN0cmVhbWluZyBmaWxlIGRhdGEgZnJvbSBHcmlkRlMuICovXG4gICAgb3BlbkRvd25sb2FkU3RyZWFtKGlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgZG93bmxvYWRfMS5HcmlkRlNCdWNrZXRSZWFkU3RyZWFtKHRoaXMucy5fY2h1bmtzQ29sbGVjdGlvbiwgdGhpcy5zLl9maWxlc0NvbGxlY3Rpb24sIHRoaXMucy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlLCB7IF9pZDogaWQgfSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgYSBmaWxlIHdpdGggdGhlIGdpdmVuIGlkXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgLSBUaGUgaWQgb2YgdGhlIGZpbGUgZG9jXG4gICAgICovXG4gICAgYXN5bmMgZGVsZXRlKGlkKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsZXRlZENvdW50IH0gPSBhd2FpdCB0aGlzLnMuX2ZpbGVzQ29sbGVjdGlvbi5kZWxldGVPbmUoeyBfaWQ6IGlkIH0pO1xuICAgICAgICAvLyBEZWxldGUgb3JwaGFuZWQgY2h1bmtzIGJlZm9yZSByZXR1cm5pbmcgRmlsZU5vdEZvdW5kXG4gICAgICAgIGF3YWl0IHRoaXMucy5fY2h1bmtzQ29sbGVjdGlvbi5kZWxldGVNYW55KHsgZmlsZXNfaWQ6IGlkIH0pO1xuICAgICAgICBpZiAoZGVsZXRlZENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtMzQ4Myk6IFJlcGxhY2Ugd2l0aCBtb3JlIGFwcHJvcHJpYXRlIGVycm9yXG4gICAgICAgICAgICAvLyBDb25zaWRlciBjcmVhdGluZyBuZXcgZXJyb3IgTW9uZ29HcmlkRlNGaWxlTm90Rm91bmRFcnJvclxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoYEZpbGUgbm90IGZvdW5kIGZvciBpZCAke2lkfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBDb252ZW5pZW5jZSB3cmFwcGVyIGFyb3VuZCBmaW5kIG9uIHRoZSBmaWxlcyBjb2xsZWN0aW9uICovXG4gICAgZmluZChmaWx0ZXIgPSB7fSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnMuX2ZpbGVzQ29sbGVjdGlvbi5maW5kKGZpbHRlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByZWFkYWJsZSBzdHJlYW0gKEdyaWRGU0J1Y2tldFJlYWRTdHJlYW0pIGZvciBzdHJlYW1pbmcgdGhlXG4gICAgICogZmlsZSB3aXRoIHRoZSBnaXZlbiBuYW1lIGZyb20gR3JpZEZTLiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgZmlsZXMgd2l0aFxuICAgICAqIHRoZSBzYW1lIG5hbWUsIHRoaXMgd2lsbCBzdHJlYW0gdGhlIG1vc3QgcmVjZW50IGZpbGUgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuICAgICAqIChhcyBkZXRlcm1pbmVkIGJ5IHRoZSBgdXBsb2FkRGF0ZWAgZmllbGQpLiBZb3UgY2FuIHNldCB0aGUgYHJldmlzaW9uYFxuICAgICAqIG9wdGlvbiB0byBjaGFuZ2UgdGhpcyBiZWhhdmlvci5cbiAgICAgKi9cbiAgICBvcGVuRG93bmxvYWRTdHJlYW1CeU5hbWUoZmlsZW5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IHNvcnQgPSB7IHVwbG9hZERhdGU6IC0xIH07XG4gICAgICAgIGxldCBza2lwID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJldmlzaW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnJldmlzaW9uID49IDApIHtcbiAgICAgICAgICAgICAgICBzb3J0ID0geyB1cGxvYWREYXRlOiAxIH07XG4gICAgICAgICAgICAgICAgc2tpcCA9IG9wdGlvbnMucmV2aXNpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBza2lwID0gLW9wdGlvbnMucmV2aXNpb24gLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgZG93bmxvYWRfMS5HcmlkRlNCdWNrZXRSZWFkU3RyZWFtKHRoaXMucy5fY2h1bmtzQ29sbGVjdGlvbiwgdGhpcy5zLl9maWxlc0NvbGxlY3Rpb24sIHRoaXMucy5vcHRpb25zLnJlYWRQcmVmZXJlbmNlLCB7IGZpbGVuYW1lIH0sIHsgLi4ub3B0aW9ucywgc29ydCwgc2tpcCB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVuYW1lcyB0aGUgZmlsZSB3aXRoIHRoZSBnaXZlbiBfaWQgdG8gdGhlIGdpdmVuIHN0cmluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIGlkIC0gdGhlIGlkIG9mIHRoZSBmaWxlIHRvIHJlbmFtZVxuICAgICAqIEBwYXJhbSBmaWxlbmFtZSAtIG5ldyBuYW1lIGZvciB0aGUgZmlsZVxuICAgICAqL1xuICAgIGFzeW5jIHJlbmFtZShpZCwgZmlsZW5hbWUpIHtcbiAgICAgICAgY29uc3QgZmlsdGVyID0geyBfaWQ6IGlkIH07XG4gICAgICAgIGNvbnN0IHVwZGF0ZSA9IHsgJHNldDogeyBmaWxlbmFtZSB9IH07XG4gICAgICAgIGNvbnN0IHsgbWF0Y2hlZENvdW50IH0gPSBhd2FpdCB0aGlzLnMuX2ZpbGVzQ29sbGVjdGlvbi51cGRhdGVPbmUoZmlsdGVyLCB1cGRhdGUpO1xuICAgICAgICBpZiAobWF0Y2hlZENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1J1bnRpbWVFcnJvcihgRmlsZSB3aXRoIGlkICR7aWR9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBSZW1vdmVzIHRoaXMgYnVja2V0J3MgZmlsZXMgY29sbGVjdGlvbiwgZm9sbG93ZWQgYnkgaXRzIGNodW5rcyBjb2xsZWN0aW9uLiAqL1xuICAgIGFzeW5jIGRyb3AoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucy5fZmlsZXNDb2xsZWN0aW9uLmRyb3AoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zLl9jaHVua3NDb2xsZWN0aW9uLmRyb3AoKTtcbiAgICB9XG59XG4vKipcbiAqIFdoZW4gdGhlIGZpcnN0IGNhbGwgdG8gb3BlblVwbG9hZFN0cmVhbSBpcyBtYWRlLCB0aGUgdXBsb2FkIHN0cmVhbSB3aWxsXG4gKiBjaGVjayB0byBzZWUgaWYgaXQgbmVlZHMgdG8gY3JlYXRlIHRoZSBwcm9wZXIgaW5kZXhlcyBvbiB0aGUgY2h1bmtzIGFuZFxuICogZmlsZXMgY29sbGVjdGlvbnMuIFRoaXMgZXZlbnQgaXMgZmlyZWQgZWl0aGVyIHdoZW4gMSkgaXQgZGV0ZXJtaW5lcyB0aGF0XG4gKiBubyBpbmRleCBjcmVhdGlvbiBpcyBuZWNlc3NhcnksIDIpIHdoZW4gaXQgc3VjY2Vzc2Z1bGx5IGNyZWF0ZXMgdGhlXG4gKiBuZWNlc3NhcnkgaW5kZXhlcy5cbiAqIEBldmVudFxuICovXG5HcmlkRlNCdWNrZXQuSU5ERVggPSAnaW5kZXgnO1xuZXhwb3J0cy5HcmlkRlNCdWNrZXQgPSBHcmlkRlNCdWNrZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/gridfs/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/gridfs/upload.js":
/*!****************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/gridfs/upload.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ./../write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n    /**\n     * @param bucket - Handle for this stream's corresponding bucket\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     * @internal\n     */\n    constructor(bucket, filename, options) {\n        super();\n        /**\n         * The document containing information about the inserted file.\n         * This property is defined _after_ the finish event has been emitted.\n         * It will remain `null` if an error occurs.\n         *\n         * @example\n         * ```ts\n         * fs.createReadStream('file.txt')\n         *   .pipe(bucket.openUploadStream('file.txt'))\n         *   .on('finish', function () {\n         *     console.log(this.gridFSFile)\n         *   })\n         * ```\n         */\n        this.gridFSFile = null;\n        options = options ?? {};\n        this.bucket = bucket;\n        this.chunks = bucket.s._chunksCollection;\n        this.filename = filename;\n        this.files = bucket.s._filesCollection;\n        this.options = options;\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n        // Signals the write is all done\n        this.done = false;\n        this.id = options.id ? options.id : new bson_1.ObjectId();\n        // properly inherit the default chunksize from parent\n        this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n        this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n        this.length = 0;\n        this.n = 0;\n        this.pos = 0;\n        this.state = {\n            streamEnd: false,\n            outstandingRequests: 0,\n            errored: false,\n            aborted: false\n        };\n        if (!this.bucket.s.calledOpenUploadStream) {\n            this.bucket.s.calledOpenUploadStream = true;\n            checkIndexes(this).then(() => {\n                this.bucket.s.checkedIndexes = true;\n                this.bucket.emit('index');\n            }, () => null);\n        }\n    }\n    /**\n     * @internal\n     *\n     * The stream is considered constructed when the indexes are done being created\n     */\n    _construct(callback) {\n        if (this.bucket.s.checkedIndexes) {\n            return process.nextTick(callback);\n        }\n        this.bucket.once('index', callback);\n    }\n    /**\n     * @internal\n     * Write a buffer to the stream.\n     *\n     * @param chunk - Buffer to write\n     * @param encoding - Optional encoding for the buffer\n     * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n     */\n    _write(chunk, encoding, callback) {\n        doWrite(this, chunk, encoding, callback);\n    }\n    /** @internal */\n    _final(callback) {\n        if (this.state.streamEnd) {\n            return process.nextTick(callback);\n        }\n        this.state.streamEnd = true;\n        writeRemnant(this, callback);\n    }\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    async abort() {\n        if (this.state.streamEnd) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot abort a stream that has already completed');\n        }\n        if (this.state.aborted) {\n            // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n            throw new error_1.MongoAPIError('Cannot call abort() on a stream twice');\n        }\n        this.state.aborted = true;\n        await this.chunks.deleteMany({ files_id: this.id });\n    }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\nfunction handleError(stream, error, callback) {\n    if (stream.state.errored) {\n        process.nextTick(callback);\n        return;\n    }\n    stream.state.errored = true;\n    process.nextTick(callback, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n    return {\n        _id: new bson_1.ObjectId(),\n        files_id: filesId,\n        n,\n        data\n    };\n}\nasync function checkChunksIndex(stream) {\n    const index = { files_id: 1, n: 1 };\n    let indexes;\n    try {\n        indexes = await stream.chunks.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasChunksIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasChunksIndex) {\n        await stream.chunks.createIndex(index, {\n            ...stream.writeConcern,\n            background: true,\n            unique: true\n        });\n    }\n}\nfunction checkDone(stream, callback) {\n    if (stream.done) {\n        return process.nextTick(callback);\n    }\n    if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n        // Set done so we do not trigger duplicate createFilesDoc\n        stream.done = true;\n        // Create a new files doc\n        const gridFSFile = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n        if (isAborted(stream, callback)) {\n            return;\n        }\n        stream.files.insertOne(gridFSFile, { writeConcern: stream.writeConcern }).then(() => {\n            stream.gridFSFile = gridFSFile;\n            callback();\n        }, error => handleError(stream, error, callback));\n        return;\n    }\n    process.nextTick(callback);\n}\nasync function checkIndexes(stream) {\n    const doc = await stream.files.findOne({}, { projection: { _id: 1 } });\n    if (doc != null) {\n        // If at least one document exists assume the collection has the required index\n        return;\n    }\n    const index = { filename: 1, uploadDate: 1 };\n    let indexes;\n    try {\n        indexes = await stream.files.listIndexes().toArray();\n    }\n    catch (error) {\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n            indexes = [];\n        }\n        else {\n            throw error;\n        }\n    }\n    const hasFileIndex = !!indexes.find(index => {\n        const keys = Object.keys(index.key);\n        if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            return true;\n        }\n        return false;\n    });\n    if (!hasFileIndex) {\n        await stream.files.createIndex(index, { background: false });\n    }\n    await checkChunksIndex(stream);\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n    const ret = {\n        _id,\n        length,\n        chunkSize,\n        uploadDate: new Date(),\n        filename\n    };\n    if (contentType) {\n        ret.contentType = contentType;\n    }\n    if (aliases) {\n        ret.aliases = aliases;\n    }\n    if (metadata) {\n        ret.metadata = metadata;\n    }\n    return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n    stream.length += inputBuf.length;\n    // Input is small enough to fit in our buffer\n    if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n        inputBuf.copy(stream.bufToStore, stream.pos);\n        stream.pos += inputBuf.length;\n        process.nextTick(callback);\n        return;\n    }\n    // Otherwise, buffer is too big for current chunk, so we need to flush\n    // to MongoDB.\n    let inputBufRemaining = inputBuf.length;\n    let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n    let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n    let outstandingRequests = 0;\n    while (inputBufRemaining > 0) {\n        const inputBufPos = inputBuf.length - inputBufRemaining;\n        inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n        stream.pos += numToCopy;\n        spaceRemaining -= numToCopy;\n        let doc;\n        if (spaceRemaining === 0) {\n            doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n            ++stream.state.outstandingRequests;\n            ++outstandingRequests;\n            if (isAborted(stream, callback)) {\n                return;\n            }\n            stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n                --stream.state.outstandingRequests;\n                --outstandingRequests;\n                if (!outstandingRequests) {\n                    checkDone(stream, callback);\n                }\n            }, error => handleError(stream, error, callback));\n            spaceRemaining = stream.chunkSizeBytes;\n            stream.pos = 0;\n            ++stream.n;\n        }\n        inputBufRemaining -= numToCopy;\n        numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n    }\n}\nfunction writeRemnant(stream, callback) {\n    // Buffer is empty, so don't bother to insert\n    if (stream.pos === 0) {\n        return checkDone(stream, callback);\n    }\n    ++stream.state.outstandingRequests;\n    // Create a new buffer to make sure the buffer isn't bigger than it needs\n    // to be.\n    const remnant = Buffer.alloc(stream.pos);\n    stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n    const doc = createChunkDoc(stream.id, stream.n, remnant);\n    // If the stream was aborted, do not write remnant\n    if (isAborted(stream, callback)) {\n        return;\n    }\n    stream.chunks.insertOne(doc, { writeConcern: stream.writeConcern }).then(() => {\n        --stream.state.outstandingRequests;\n        checkDone(stream, callback);\n    }, error => handleError(stream, error, callback));\n}\nfunction isAborted(stream, callback) {\n    if (stream.state.aborted) {\n        process.nextTick(callback, new error_1.MongoAPIError('Stream has been aborted'));\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=upload.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/gridfs/upload.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/index.js":
/*!********************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoUnexpectedServerResponseError = exports.MongoTransactionError = exports.MongoTopologyClosedError = exports.MongoTailableCursorError = exports.MongoSystemError = exports.MongoServerSelectionError = exports.MongoServerError = exports.MongoServerClosedError = exports.MongoRuntimeError = exports.MongoParseError = exports.MongoNotConnectedError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoKerberosError = exports.MongoInvalidArgumentError = exports.MongoGridFSStreamError = exports.MongoGridFSChunkError = exports.MongoExpiredSessionError = exports.MongoError = exports.MongoDriverError = exports.MongoDecompressionError = exports.MongoCursorInUseError = exports.MongoCursorExhaustedError = exports.MongoCompatibilityError = exports.MongoChangeStreamError = exports.MongoBatchReExecutionError = exports.MongoAzureError = exports.MongoAWSError = exports.MongoAPIError = exports.ChangeStreamCursor = exports.ClientEncryption = exports.MongoBulkWriteError = exports.UUID = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONType = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.BSON = void 0;\nexports.ConnectionPoolReadyEvent = exports.ConnectionPoolMonitoringEvent = exports.ConnectionPoolCreatedEvent = exports.ConnectionPoolClosedEvent = exports.ConnectionPoolClearedEvent = exports.ConnectionCreatedEvent = exports.ConnectionClosedEvent = exports.ConnectionCheckOutStartedEvent = exports.ConnectionCheckOutFailedEvent = exports.ConnectionCheckedOutEvent = exports.ConnectionCheckedInEvent = exports.CommandSucceededEvent = exports.CommandStartedEvent = exports.CommandFailedEvent = exports.WriteConcern = exports.ReadPreference = exports.ReadConcern = exports.TopologyType = exports.ServerType = exports.ReadPreferenceMode = exports.ReadConcernLevel = exports.ProfilingLevel = exports.ReturnDocument = exports.ServerApiVersion = exports.ExplainVerbosity = exports.MongoErrorLabel = exports.CURSOR_FLAGS = exports.Compressor = exports.AuthMechanism = exports.GSSAPICanonicalizationValue = exports.AutoEncryptionLoggerLevel = exports.BatchType = exports.UnorderedBulkOperation = exports.OrderedBulkOperation = exports.MongoClient = exports.ListIndexesCursor = exports.ListCollectionsCursor = exports.GridFSBucketWriteStream = exports.GridFSBucketReadStream = exports.GridFSBucket = exports.FindCursor = exports.Db = exports.Collection = exports.ClientSession = exports.ChangeStream = exports.CancellationToken = exports.AggregationCursor = exports.Admin = exports.AbstractCursor = exports.MongoWriteConcernError = void 0;\nexports.MongoCryptKMSRequestNetworkTimeoutError = exports.MongoCryptInvalidArgumentError = exports.MongoCryptError = exports.MongoCryptCreateEncryptedCollectionError = exports.MongoCryptCreateDataKeyError = exports.MongoCryptAzureKMSRequestError = exports.SrvPollingEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.TopologyClosedEvent = exports.ServerOpeningEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.ServerHeartbeatFailedEvent = exports.ServerDescriptionChangedEvent = exports.ServerClosedEvent = exports.ConnectionReadyEvent = void 0;\nconst admin_1 = __webpack_require__(/*! ./admin */ \"(ssr)/../../../../../node_modules/mongodb/lib/admin.js\");\nObject.defineProperty(exports, \"Admin\", ({ enumerable: true, get: function () { return admin_1.Admin; } }));\nconst ordered_1 = __webpack_require__(/*! ./bulk/ordered */ \"(ssr)/../../../../../node_modules/mongodb/lib/bulk/ordered.js\");\nObject.defineProperty(exports, \"OrderedBulkOperation\", ({ enumerable: true, get: function () { return ordered_1.OrderedBulkOperation; } }));\nconst unordered_1 = __webpack_require__(/*! ./bulk/unordered */ \"(ssr)/../../../../../node_modules/mongodb/lib/bulk/unordered.js\");\nObject.defineProperty(exports, \"UnorderedBulkOperation\", ({ enumerable: true, get: function () { return unordered_1.UnorderedBulkOperation; } }));\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/../../../../../node_modules/mongodb/lib/change_stream.js\");\nObject.defineProperty(exports, \"ChangeStream\", ({ enumerable: true, get: function () { return change_stream_1.ChangeStream; } }));\nconst collection_1 = __webpack_require__(/*! ./collection */ \"(ssr)/../../../../../node_modules/mongodb/lib/collection.js\");\nObject.defineProperty(exports, \"Collection\", ({ enumerable: true, get: function () { return collection_1.Collection; } }));\nconst abstract_cursor_1 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"AbstractCursor\", ({ enumerable: true, get: function () { return abstract_cursor_1.AbstractCursor; } }));\nconst aggregation_cursor_1 = __webpack_require__(/*! ./cursor/aggregation_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/aggregation_cursor.js\");\nObject.defineProperty(exports, \"AggregationCursor\", ({ enumerable: true, get: function () { return aggregation_cursor_1.AggregationCursor; } }));\nconst find_cursor_1 = __webpack_require__(/*! ./cursor/find_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/find_cursor.js\");\nObject.defineProperty(exports, \"FindCursor\", ({ enumerable: true, get: function () { return find_cursor_1.FindCursor; } }));\nconst list_collections_cursor_1 = __webpack_require__(/*! ./cursor/list_collections_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_collections_cursor.js\");\nObject.defineProperty(exports, \"ListCollectionsCursor\", ({ enumerable: true, get: function () { return list_collections_cursor_1.ListCollectionsCursor; } }));\nconst list_indexes_cursor_1 = __webpack_require__(/*! ./cursor/list_indexes_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/list_indexes_cursor.js\");\nObject.defineProperty(exports, \"ListIndexesCursor\", ({ enumerable: true, get: function () { return list_indexes_cursor_1.ListIndexesCursor; } }));\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/../../../../../node_modules/mongodb/lib/db.js\");\nObject.defineProperty(exports, \"Db\", ({ enumerable: true, get: function () { return db_1.Db; } }));\nconst gridfs_1 = __webpack_require__(/*! ./gridfs */ \"(ssr)/../../../../../node_modules/mongodb/lib/gridfs/index.js\");\nObject.defineProperty(exports, \"GridFSBucket\", ({ enumerable: true, get: function () { return gridfs_1.GridFSBucket; } }));\nconst download_1 = __webpack_require__(/*! ./gridfs/download */ \"(ssr)/../../../../../node_modules/mongodb/lib/gridfs/download.js\");\nObject.defineProperty(exports, \"GridFSBucketReadStream\", ({ enumerable: true, get: function () { return download_1.GridFSBucketReadStream; } }));\nconst upload_1 = __webpack_require__(/*! ./gridfs/upload */ \"(ssr)/../../../../../node_modules/mongodb/lib/gridfs/upload.js\");\nObject.defineProperty(exports, \"GridFSBucketWriteStream\", ({ enumerable: true, get: function () { return upload_1.GridFSBucketWriteStream; } }));\nconst mongo_client_1 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"MongoClient\", ({ enumerable: true, get: function () { return mongo_client_1.MongoClient; } }));\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nObject.defineProperty(exports, \"CancellationToken\", ({ enumerable: true, get: function () { return mongo_types_1.CancellationToken; } }));\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/../../../../../node_modules/mongodb/lib/sessions.js\");\nObject.defineProperty(exports, \"ClientSession\", ({ enumerable: true, get: function () { return sessions_1.ClientSession; } }));\n/** @public */\nvar bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"BSON\", ({ enumerable: true, get: function () { return bson_1.BSON; } }));\nvar bson_2 = __webpack_require__(/*! ./bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nObject.defineProperty(exports, \"Binary\", ({ enumerable: true, get: function () { return bson_2.Binary; } }));\nObject.defineProperty(exports, \"BSONRegExp\", ({ enumerable: true, get: function () { return bson_2.BSONRegExp; } }));\nObject.defineProperty(exports, \"BSONSymbol\", ({ enumerable: true, get: function () { return bson_2.BSONSymbol; } }));\nObject.defineProperty(exports, \"BSONType\", ({ enumerable: true, get: function () { return bson_2.BSONType; } }));\nObject.defineProperty(exports, \"Code\", ({ enumerable: true, get: function () { return bson_2.Code; } }));\nObject.defineProperty(exports, \"DBRef\", ({ enumerable: true, get: function () { return bson_2.DBRef; } }));\nObject.defineProperty(exports, \"Decimal128\", ({ enumerable: true, get: function () { return bson_2.Decimal128; } }));\nObject.defineProperty(exports, \"Double\", ({ enumerable: true, get: function () { return bson_2.Double; } }));\nObject.defineProperty(exports, \"Int32\", ({ enumerable: true, get: function () { return bson_2.Int32; } }));\nObject.defineProperty(exports, \"Long\", ({ enumerable: true, get: function () { return bson_2.Long; } }));\nObject.defineProperty(exports, \"MaxKey\", ({ enumerable: true, get: function () { return bson_2.MaxKey; } }));\nObject.defineProperty(exports, \"MinKey\", ({ enumerable: true, get: function () { return bson_2.MinKey; } }));\nObject.defineProperty(exports, \"ObjectId\", ({ enumerable: true, get: function () { return bson_2.ObjectId; } }));\nObject.defineProperty(exports, \"Timestamp\", ({ enumerable: true, get: function () { return bson_2.Timestamp; } }));\nObject.defineProperty(exports, \"UUID\", ({ enumerable: true, get: function () { return bson_2.UUID; } }));\nvar common_1 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/../../../../../node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"MongoBulkWriteError\", ({ enumerable: true, get: function () { return common_1.MongoBulkWriteError; } }));\nvar client_encryption_1 = __webpack_require__(/*! ./client-side-encryption/client_encryption */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/client_encryption.js\");\nObject.defineProperty(exports, \"ClientEncryption\", ({ enumerable: true, get: function () { return client_encryption_1.ClientEncryption; } }));\nvar change_stream_cursor_1 = __webpack_require__(/*! ./cursor/change_stream_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/change_stream_cursor.js\");\nObject.defineProperty(exports, \"ChangeStreamCursor\", ({ enumerable: true, get: function () { return change_stream_cursor_1.ChangeStreamCursor; } }));\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoAPIError\", ({ enumerable: true, get: function () { return error_1.MongoAPIError; } }));\nObject.defineProperty(exports, \"MongoAWSError\", ({ enumerable: true, get: function () { return error_1.MongoAWSError; } }));\nObject.defineProperty(exports, \"MongoAzureError\", ({ enumerable: true, get: function () { return error_1.MongoAzureError; } }));\nObject.defineProperty(exports, \"MongoBatchReExecutionError\", ({ enumerable: true, get: function () { return error_1.MongoBatchReExecutionError; } }));\nObject.defineProperty(exports, \"MongoChangeStreamError\", ({ enumerable: true, get: function () { return error_1.MongoChangeStreamError; } }));\nObject.defineProperty(exports, \"MongoCompatibilityError\", ({ enumerable: true, get: function () { return error_1.MongoCompatibilityError; } }));\nObject.defineProperty(exports, \"MongoCursorExhaustedError\", ({ enumerable: true, get: function () { return error_1.MongoCursorExhaustedError; } }));\nObject.defineProperty(exports, \"MongoCursorInUseError\", ({ enumerable: true, get: function () { return error_1.MongoCursorInUseError; } }));\nObject.defineProperty(exports, \"MongoDecompressionError\", ({ enumerable: true, get: function () { return error_1.MongoDecompressionError; } }));\nObject.defineProperty(exports, \"MongoDriverError\", ({ enumerable: true, get: function () { return error_1.MongoDriverError; } }));\nObject.defineProperty(exports, \"MongoError\", ({ enumerable: true, get: function () { return error_1.MongoError; } }));\nObject.defineProperty(exports, \"MongoExpiredSessionError\", ({ enumerable: true, get: function () { return error_1.MongoExpiredSessionError; } }));\nObject.defineProperty(exports, \"MongoGridFSChunkError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSChunkError; } }));\nObject.defineProperty(exports, \"MongoGridFSStreamError\", ({ enumerable: true, get: function () { return error_1.MongoGridFSStreamError; } }));\nObject.defineProperty(exports, \"MongoInvalidArgumentError\", ({ enumerable: true, get: function () { return error_1.MongoInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoKerberosError\", ({ enumerable: true, get: function () { return error_1.MongoKerberosError; } }));\nObject.defineProperty(exports, \"MongoMissingCredentialsError\", ({ enumerable: true, get: function () { return error_1.MongoMissingCredentialsError; } }));\nObject.defineProperty(exports, \"MongoMissingDependencyError\", ({ enumerable: true, get: function () { return error_1.MongoMissingDependencyError; } }));\nObject.defineProperty(exports, \"MongoNetworkError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkError; } }));\nObject.defineProperty(exports, \"MongoNetworkTimeoutError\", ({ enumerable: true, get: function () { return error_1.MongoNetworkTimeoutError; } }));\nObject.defineProperty(exports, \"MongoNotConnectedError\", ({ enumerable: true, get: function () { return error_1.MongoNotConnectedError; } }));\nObject.defineProperty(exports, \"MongoParseError\", ({ enumerable: true, get: function () { return error_1.MongoParseError; } }));\nObject.defineProperty(exports, \"MongoRuntimeError\", ({ enumerable: true, get: function () { return error_1.MongoRuntimeError; } }));\nObject.defineProperty(exports, \"MongoServerClosedError\", ({ enumerable: true, get: function () { return error_1.MongoServerClosedError; } }));\nObject.defineProperty(exports, \"MongoServerError\", ({ enumerable: true, get: function () { return error_1.MongoServerError; } }));\nObject.defineProperty(exports, \"MongoServerSelectionError\", ({ enumerable: true, get: function () { return error_1.MongoServerSelectionError; } }));\nObject.defineProperty(exports, \"MongoSystemError\", ({ enumerable: true, get: function () { return error_1.MongoSystemError; } }));\nObject.defineProperty(exports, \"MongoTailableCursorError\", ({ enumerable: true, get: function () { return error_1.MongoTailableCursorError; } }));\nObject.defineProperty(exports, \"MongoTopologyClosedError\", ({ enumerable: true, get: function () { return error_1.MongoTopologyClosedError; } }));\nObject.defineProperty(exports, \"MongoTransactionError\", ({ enumerable: true, get: function () { return error_1.MongoTransactionError; } }));\nObject.defineProperty(exports, \"MongoUnexpectedServerResponseError\", ({ enumerable: true, get: function () { return error_1.MongoUnexpectedServerResponseError; } }));\nObject.defineProperty(exports, \"MongoWriteConcernError\", ({ enumerable: true, get: function () { return error_1.MongoWriteConcernError; } }));\n// enums\nvar common_2 = __webpack_require__(/*! ./bulk/common */ \"(ssr)/../../../../../node_modules/mongodb/lib/bulk/common.js\");\nObject.defineProperty(exports, \"BatchType\", ({ enumerable: true, get: function () { return common_2.BatchType; } }));\nvar auto_encrypter_1 = __webpack_require__(/*! ./client-side-encryption/auto_encrypter */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/auto_encrypter.js\");\nObject.defineProperty(exports, \"AutoEncryptionLoggerLevel\", ({ enumerable: true, get: function () { return auto_encrypter_1.AutoEncryptionLoggerLevel; } }));\nvar gssapi_1 = __webpack_require__(/*! ./cmap/auth/gssapi */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/gssapi.js\");\nObject.defineProperty(exports, \"GSSAPICanonicalizationValue\", ({ enumerable: true, get: function () { return gssapi_1.GSSAPICanonicalizationValue; } }));\nvar providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\nObject.defineProperty(exports, \"AuthMechanism\", ({ enumerable: true, get: function () { return providers_1.AuthMechanism; } }));\nvar compression_1 = __webpack_require__(/*! ./cmap/wire_protocol/compression */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/compression.js\");\nObject.defineProperty(exports, \"Compressor\", ({ enumerable: true, get: function () { return compression_1.Compressor; } }));\nvar abstract_cursor_2 = __webpack_require__(/*! ./cursor/abstract_cursor */ \"(ssr)/../../../../../node_modules/mongodb/lib/cursor/abstract_cursor.js\");\nObject.defineProperty(exports, \"CURSOR_FLAGS\", ({ enumerable: true, get: function () { return abstract_cursor_2.CURSOR_FLAGS; } }));\nvar error_2 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nObject.defineProperty(exports, \"MongoErrorLabel\", ({ enumerable: true, get: function () { return error_2.MongoErrorLabel; } }));\nvar explain_1 = __webpack_require__(/*! ./explain */ \"(ssr)/../../../../../node_modules/mongodb/lib/explain.js\");\nObject.defineProperty(exports, \"ExplainVerbosity\", ({ enumerable: true, get: function () { return explain_1.ExplainVerbosity; } }));\nvar mongo_client_2 = __webpack_require__(/*! ./mongo_client */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_client.js\");\nObject.defineProperty(exports, \"ServerApiVersion\", ({ enumerable: true, get: function () { return mongo_client_2.ServerApiVersion; } }));\nvar find_and_modify_1 = __webpack_require__(/*! ./operations/find_and_modify */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/find_and_modify.js\");\nObject.defineProperty(exports, \"ReturnDocument\", ({ enumerable: true, get: function () { return find_and_modify_1.ReturnDocument; } }));\nvar set_profiling_level_1 = __webpack_require__(/*! ./operations/set_profiling_level */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/set_profiling_level.js\");\nObject.defineProperty(exports, \"ProfilingLevel\", ({ enumerable: true, get: function () { return set_profiling_level_1.ProfilingLevel; } }));\nvar read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcernLevel\", ({ enumerable: true, get: function () { return read_concern_1.ReadConcernLevel; } }));\nvar read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreferenceMode\", ({ enumerable: true, get: function () { return read_preference_1.ReadPreferenceMode; } }));\nvar common_3 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nObject.defineProperty(exports, \"ServerType\", ({ enumerable: true, get: function () { return common_3.ServerType; } }));\nObject.defineProperty(exports, \"TopologyType\", ({ enumerable: true, get: function () { return common_3.TopologyType; } }));\n// Helper classes\nvar read_concern_2 = __webpack_require__(/*! ./read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nObject.defineProperty(exports, \"ReadConcern\", ({ enumerable: true, get: function () { return read_concern_2.ReadConcern; } }));\nvar read_preference_2 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nObject.defineProperty(exports, \"ReadPreference\", ({ enumerable: true, get: function () { return read_preference_2.ReadPreference; } }));\nvar write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\nObject.defineProperty(exports, \"WriteConcern\", ({ enumerable: true, get: function () { return write_concern_1.WriteConcern; } }));\n// events\nvar command_monitoring_events_1 = __webpack_require__(/*! ./cmap/command_monitoring_events */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/command_monitoring_events.js\");\nObject.defineProperty(exports, \"CommandFailedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandFailedEvent; } }));\nObject.defineProperty(exports, \"CommandStartedEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandStartedEvent; } }));\nObject.defineProperty(exports, \"CommandSucceededEvent\", ({ enumerable: true, get: function () { return command_monitoring_events_1.CommandSucceededEvent; } }));\nvar connection_pool_events_1 = __webpack_require__(/*! ./cmap/connection_pool_events */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection_pool_events.js\");\nObject.defineProperty(exports, \"ConnectionCheckedInEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedInEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckedOutEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckedOutEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutFailedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutFailedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCheckOutStartedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCheckOutStartedEvent; } }));\nObject.defineProperty(exports, \"ConnectionClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClearedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClearedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolClosedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolClosedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolCreatedEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolCreatedEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolMonitoringEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolMonitoringEvent; } }));\nObject.defineProperty(exports, \"ConnectionPoolReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionPoolReadyEvent; } }));\nObject.defineProperty(exports, \"ConnectionReadyEvent\", ({ enumerable: true, get: function () { return connection_pool_events_1.ConnectionReadyEvent; } }));\nvar events_1 = __webpack_require__(/*! ./sdam/events */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/events.js\");\nObject.defineProperty(exports, \"ServerClosedEvent\", ({ enumerable: true, get: function () { return events_1.ServerClosedEvent; } }));\nObject.defineProperty(exports, \"ServerDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.ServerDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatFailedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatFailedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatStartedEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatStartedEvent; } }));\nObject.defineProperty(exports, \"ServerHeartbeatSucceededEvent\", ({ enumerable: true, get: function () { return events_1.ServerHeartbeatSucceededEvent; } }));\nObject.defineProperty(exports, \"ServerOpeningEvent\", ({ enumerable: true, get: function () { return events_1.ServerOpeningEvent; } }));\nObject.defineProperty(exports, \"TopologyClosedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyClosedEvent; } }));\nObject.defineProperty(exports, \"TopologyDescriptionChangedEvent\", ({ enumerable: true, get: function () { return events_1.TopologyDescriptionChangedEvent; } }));\nObject.defineProperty(exports, \"TopologyOpeningEvent\", ({ enumerable: true, get: function () { return events_1.TopologyOpeningEvent; } }));\nvar srv_polling_1 = __webpack_require__(/*! ./sdam/srv_polling */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/srv_polling.js\");\nObject.defineProperty(exports, \"SrvPollingEvent\", ({ enumerable: true, get: function () { return srv_polling_1.SrvPollingEvent; } }));\nvar errors_1 = __webpack_require__(/*! ./client-side-encryption/errors */ \"(ssr)/../../../../../node_modules/mongodb/lib/client-side-encryption/errors.js\");\nObject.defineProperty(exports, \"MongoCryptAzureKMSRequestError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptAzureKMSRequestError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateDataKeyError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateDataKeyError; } }));\nObject.defineProperty(exports, \"MongoCryptCreateEncryptedCollectionError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptCreateEncryptedCollectionError; } }));\nObject.defineProperty(exports, \"MongoCryptError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptError; } }));\nObject.defineProperty(exports, \"MongoCryptInvalidArgumentError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptInvalidArgumentError; } }));\nObject.defineProperty(exports, \"MongoCryptKMSRequestNetworkTimeoutError\", ({ enumerable: true, get: function () { return errors_1.MongoCryptKMSRequestNetworkTimeoutError; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/index.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/mongo_client.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/mongo_client.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst change_stream_1 = __webpack_require__(/*! ./change_stream */ \"(ssr)/../../../../../node_modules/mongodb/lib/change_stream.js\");\nconst mongo_credentials_1 = __webpack_require__(/*! ./cmap/auth/mongo_credentials */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/mongo_credentials.js\");\nconst providers_1 = __webpack_require__(/*! ./cmap/auth/providers */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/auth/providers.js\");\nconst connection_string_1 = __webpack_require__(/*! ./connection_string */ \"(ssr)/../../../../../node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst db_1 = __webpack_require__(/*! ./db */ \"(ssr)/../../../../../node_modules/mongodb/lib/db.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_logger_1 = __webpack_require__(/*! ./mongo_logger */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_logger.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/run_command.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ./sdam/server_selection */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_selection.js\");\nconst topology_1 = __webpack_require__(/*! ./sdam/topology */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/topology.js\");\nconst sessions_1 = __webpack_require__(/*! ./sessions */ \"(ssr)/../../../../../node_modules/mongodb/lib/sessions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n    v1: '1'\n});\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n    constructor(url, options) {\n        super();\n        this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n        this.mongoLogger = new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions);\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const client = this;\n        // The internal state\n        this.s = {\n            url,\n            bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n            namespace: (0, utils_1.ns)('admin'),\n            hasBeenClosed: false,\n            sessionPool: new sessions_1.ServerSessionPool(this),\n            activeSessions: new Set(),\n            get options() {\n                return client[kOptions];\n            },\n            get readConcern() {\n                return client[kOptions].readConcern;\n            },\n            get writeConcern() {\n                return client[kOptions].writeConcern;\n            },\n            get readPreference() {\n                return client[kOptions].readPreference;\n            },\n            get isMongoClient() {\n                return true;\n            }\n        };\n    }\n    /** @see MongoOptions */\n    get options() {\n        return Object.freeze({ ...this[kOptions] });\n    }\n    get serverApi() {\n        return this[kOptions].serverApi && Object.freeze({ ...this[kOptions].serverApi });\n    }\n    /**\n     * Intended for APM use only\n     * @internal\n     */\n    get monitorCommands() {\n        return this[kOptions].monitorCommands;\n    }\n    set monitorCommands(value) {\n        this[kOptions].monitorCommands = value;\n    }\n    /** @internal */\n    get autoEncrypter() {\n        return this[kOptions].autoEncrypter;\n    }\n    get readConcern() {\n        return this.s.readConcern;\n    }\n    get writeConcern() {\n        return this.s.writeConcern;\n    }\n    get readPreference() {\n        return this.s.readPreference;\n    }\n    get bsonOptions() {\n        return this.s.bsonOptions;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    async connect() {\n        if (this.connectionLock) {\n            return this.connectionLock;\n        }\n        try {\n            this.connectionLock = this._connect();\n            await this.connectionLock;\n        }\n        finally {\n            // release\n            this.connectionLock = undefined;\n        }\n        return this;\n    }\n    /**\n     * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n     * Locking is enforced by the connect method.\n     *\n     * @internal\n     */\n    async _connect() {\n        if (this.topology && this.topology.isConnected()) {\n            return this;\n        }\n        const options = this[kOptions];\n        if (options.tls) {\n            if (typeof options.tlsCAFile === 'string') {\n                options.ca ??= await fs_1.promises.readFile(options.tlsCAFile);\n            }\n            if (typeof options.tlsCRLFile === 'string') {\n                options.crl ??= await fs_1.promises.readFile(options.tlsCRLFile);\n            }\n            if (typeof options.tlsCertificateKeyFile === 'string') {\n                if (!options.key || !options.cert) {\n                    const contents = await fs_1.promises.readFile(options.tlsCertificateKeyFile);\n                    options.key ??= contents;\n                    options.cert ??= contents;\n                }\n            }\n        }\n        if (typeof options.srvHost === 'string') {\n            const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n            for (const [index, host] of hosts.entries()) {\n                options.hosts[index] = host;\n            }\n        }\n        // It is important to perform validation of hosts AFTER SRV resolution, to check the real hostname,\n        // but BEFORE we even attempt connecting with a potentially not allowed hostname\n        if (options.credentials?.mechanism === providers_1.AuthMechanism.MONGODB_OIDC) {\n            const allowedHosts = options.credentials?.mechanismProperties?.ALLOWED_HOSTS || mongo_credentials_1.DEFAULT_ALLOWED_HOSTS;\n            const isServiceAuth = !!options.credentials?.mechanismProperties?.PROVIDER_NAME;\n            if (!isServiceAuth) {\n                for (const host of options.hosts) {\n                    if (!(0, utils_1.hostMatchesWildcards)(host.toHostPort().host, allowedHosts)) {\n                        throw new error_1.MongoInvalidArgumentError(`Host '${host}' is not valid for OIDC authentication with ALLOWED_HOSTS of '${allowedHosts.join(',')}'`);\n                    }\n                }\n            }\n        }\n        this.topology = new topology_1.Topology(this, options.hosts, options);\n        // Events can be emitted before initialization is complete so we have to\n        // save the reference to the topology on the client ASAP if the event handlers need to access it\n        this.topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n        for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n            this.topology.on(event, (...args) => this.emit(event, ...args));\n        }\n        const topologyConnect = async () => {\n            try {\n                await (0, util_1.promisify)(callback => this.topology?.connect(options, callback))();\n            }\n            catch (error) {\n                this.topology?.close({ force: true });\n                throw error;\n            }\n        };\n        if (this.autoEncrypter) {\n            await this.autoEncrypter?.init();\n            await topologyConnect();\n            await options.encrypter.connectInternalClient();\n        }\n        else {\n            await topologyConnect();\n        }\n        return this;\n    }\n    /**\n     * Close the client and its underlying connections\n     *\n     * @param force - Force close, emitting no events\n     */\n    async close(force = false) {\n        // There's no way to set hasBeenClosed back to false\n        Object.defineProperty(this.s, 'hasBeenClosed', {\n            value: true,\n            enumerable: true,\n            configurable: false,\n            writable: false\n        });\n        const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n        this.s.activeSessions.clear();\n        await Promise.all(activeSessionEnds);\n        if (this.topology == null) {\n            return;\n        }\n        // If we would attempt to select a server and get nothing back we short circuit\n        // to avoid the server selection timeout.\n        const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n        const topologyDescription = this.topology.description;\n        const serverDescriptions = Array.from(topologyDescription.servers.values());\n        const servers = selector(topologyDescription, serverDescriptions);\n        if (servers.length !== 0) {\n            const endSessions = Array.from(this.s.sessionPool.sessions, ({ id }) => id);\n            if (endSessions.length !== 0) {\n                await (0, execute_operation_1.executeOperation)(this, new run_command_1.RunAdminCommandOperation({ endSessions }, { readPreference: read_preference_1.ReadPreference.primaryPreferred, noResponse: true })).catch(() => null); // outcome does not matter;\n            }\n        }\n        // clear out references to old topology\n        const topology = this.topology;\n        this.topology = undefined;\n        await new Promise((resolve, reject) => {\n            topology.close({ force }, error => {\n                if (error)\n                    return reject(error);\n                const { encrypter } = this[kOptions];\n                if (encrypter) {\n                    return encrypter.closeCallback(this, force, error => {\n                        if (error)\n                            return reject(error);\n                        resolve();\n                    });\n                }\n                resolve();\n            });\n        });\n    }\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName, options) {\n        options = options ?? {};\n        // Default to db from connection string if not provided\n        if (!dbName) {\n            dbName = this.options.dbName;\n        }\n        // Copy the options and add out internal override of the not shared flag\n        const finalOptions = Object.assign({}, this[kOptions], options);\n        // Return the db object\n        const db = new db_1.Db(this, dbName, finalOptions);\n        // Return the database\n        return db;\n    }\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static async connect(url, options) {\n        const client = new this(url, options);\n        return client.connect();\n    }\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    startSession(options) {\n        const session = new sessions_1.ClientSession(this, this.s.sessionPool, { explicit: true, ...options }, this[kOptions]);\n        this.s.activeSessions.add(session);\n        session.once('ended', () => {\n            this.s.activeSessions.delete(session);\n        });\n        return session;\n    }\n    async withSession(optionsOrExecutor, executor) {\n        const options = {\n            // Always define an owner\n            owner: Symbol(),\n            // If it's an object inherit the options\n            ...(typeof optionsOrExecutor === 'object' ? optionsOrExecutor : {})\n        };\n        const withSessionCallback = typeof optionsOrExecutor === 'function' ? optionsOrExecutor : executor;\n        if (withSessionCallback == null) {\n            throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n        }\n        const session = this.startSession(options);\n        try {\n            return await withSessionCallback(session);\n        }\n        finally {\n            try {\n                await session.endSession();\n            }\n            catch {\n                // We are not concerned with errors from endSession()\n            }\n        }\n    }\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch(pipeline = [], options = {}) {\n        // Allow optionally not specifying a pipeline\n        if (!Array.isArray(pipeline)) {\n            options = pipeline;\n            pipeline = [];\n        }\n        return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n    }\n}\nexports.MongoClient = MongoClient;\n//# sourceMappingURL=mongo_client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/mongo_client.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/mongo_logger.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/mongo_logger.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoLogger = exports.stringifyWithMaxLen = exports.createStdioLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nconst bson_1 = __webpack_require__(/*! bson */ \"(ssr)/../../../../../node_modules/bson/lib/bson.cjs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\n/** @internal */\nexports.SeverityLevel = Object.freeze({\n    EMERGENCY: 'emergency',\n    ALERT: 'alert',\n    CRITICAL: 'critical',\n    ERROR: 'error',\n    WARNING: 'warn',\n    NOTICE: 'notice',\n    INFORMATIONAL: 'info',\n    DEBUG: 'debug',\n    TRACE: 'trace',\n    OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n    constructor(entries) {\n        const newEntries = [];\n        for (const [level, value] of entries) {\n            newEntries.push([value, level]);\n        }\n        newEntries.push(...entries);\n        super(newEntries);\n    }\n    getNumericSeverityLevel(severity) {\n        return this.get(severity);\n    }\n    getSeverityLevelName(level) {\n        return this.get(level);\n    }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n    [exports.SeverityLevel.OFF, -Infinity],\n    [exports.SeverityLevel.EMERGENCY, 0],\n    [exports.SeverityLevel.ALERT, 1],\n    [exports.SeverityLevel.CRITICAL, 2],\n    [exports.SeverityLevel.ERROR, 3],\n    [exports.SeverityLevel.WARNING, 4],\n    [exports.SeverityLevel.NOTICE, 5],\n    [exports.SeverityLevel.INFORMATIONAL, 6],\n    [exports.SeverityLevel.DEBUG, 7],\n    [exports.SeverityLevel.TRACE, 8]\n]);\n/** @internal */\nexports.MongoLoggableComponent = Object.freeze({\n    COMMAND: 'command',\n    TOPOLOGY: 'topology',\n    SERVER_SELECTION: 'serverSelection',\n    CONNECTION: 'connection'\n});\n/**\n * Parses a string as one of SeverityLevel\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n    const validSeverities = Object.values(exports.SeverityLevel);\n    const lowerSeverity = s?.toLowerCase();\n    if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n        return lowerSeverity;\n    }\n    return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n    return {\n        write: (log) => {\n            stream.write((0, util_1.inspect)(log, { compact: true, breakLength: Infinity }), 'utf-8');\n            return;\n        }\n    };\n}\nexports.createStdioLogger = createStdioLogger;\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath({ MONGODB_LOG_PATH }, { mongodbLogPath }) {\n    if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n        return createStdioLogger(process.stderr);\n    }\n    if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n        return createStdioLogger(process.stdout);\n    }\n    if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n        return mongodbLogPath;\n    }\n    if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n        return createStdioLogger(process.stderr);\n    }\n    if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n        return createStdioLogger(process.stdout);\n    }\n    return createStdioLogger(process.stderr);\n}\nfunction compareSeverity(s0, s1) {\n    const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n    const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n    return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength) {\n    const ejson = bson_1.EJSON.stringify(value);\n    return maxDocumentLength !== 0 && ejson.length > maxDocumentLength\n        ? `${ejson.slice(0, maxDocumentLength)}...`\n        : ejson;\n}\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nfunction isLogConvertible(obj) {\n    const objAsLogConvertible = obj;\n    // eslint-disable-next-line no-restricted-syntax\n    return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachCommandFields(log, commandEvent) {\n    log.commandName = commandEvent.commandName;\n    log.requestId = commandEvent.requestId;\n    log.driverConnectionId = commandEvent?.connectionId;\n    const { host, port } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    if (commandEvent?.serviceId) {\n        log.serviceId = commandEvent.serviceId.toHexString();\n    }\n    return log;\n}\nfunction attachConnectionFields(log, connectionPoolEvent) {\n    const { host, port } = utils_1.HostAddress.fromString(connectionPoolEvent.address).toHostPort();\n    log.serverHost = host;\n    log.serverPort = port;\n    return log;\n}\nfunction defaultLogTransform(logObject, maxDocumentLength = exports.DEFAULT_MAX_DOCUMENT_LENGTH) {\n    let log = Object.create(null);\n    switch (logObject.name) {\n        case constants_1.COMMAND_STARTED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command started';\n            log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength);\n            log.databaseName = logObject.databaseName;\n            return log;\n        case constants_1.COMMAND_SUCCEEDED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command succeeded';\n            log.durationMS = logObject.duration;\n            log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength);\n            return log;\n        case constants_1.COMMAND_FAILED:\n            log = attachCommandFields(log, logObject);\n            log.message = 'Command failed';\n            log.durationMS = logObject.duration;\n            log.failure = logObject.failure;\n            return log;\n        case constants_1.CONNECTION_POOL_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool created';\n            if (logObject.options) {\n                const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } = logObject.options;\n                log = {\n                    ...log,\n                    maxIdleTimeMS,\n                    minPoolSize,\n                    maxPoolSize,\n                    maxConnecting,\n                    waitQueueTimeoutMS\n                };\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool ready';\n            return log;\n        case constants_1.CONNECTION_POOL_CLEARED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool cleared';\n            if (logObject.serviceId?._bsontype === 'ObjectId') {\n                log.serviceId = logObject.serviceId.toHexString();\n            }\n            return log;\n        case constants_1.CONNECTION_POOL_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection pool closed';\n            return log;\n        case constants_1.CONNECTION_CREATED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection created';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_READY:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection ready';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CLOSED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection closed';\n            log.driverConnectionId = logObject.connectionId;\n            switch (logObject.reason) {\n                case 'stale':\n                    log.reason = 'Connection became stale because the pool was cleared';\n                    break;\n                case 'idle':\n                    log.reason =\n                        'Connection has been available but unused for longer than the configured max idle time';\n                    break;\n                case 'error':\n                    log.reason = 'An error occurred while using the connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_STARTED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout started';\n            return log;\n        case constants_1.CONNECTION_CHECK_OUT_FAILED:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checkout failed';\n            switch (logObject.reason) {\n                case 'poolClosed':\n                    log.reason = 'Connection pool was closed';\n                    break;\n                case 'timeout':\n                    log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n                    break;\n                case 'connectionError':\n                    log.reason = 'An error occurred while trying to establish a new connection';\n                    if (logObject.error) {\n                        log.error = logObject.error;\n                    }\n                    break;\n                default:\n                    log.reason = `Unknown close reason: ${logObject.reason}`;\n            }\n            return log;\n        case constants_1.CONNECTION_CHECKED_OUT:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked out';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        case constants_1.CONNECTION_CHECKED_IN:\n            log = attachConnectionFields(log, logObject);\n            log.message = 'Connection checked in';\n            log.driverConnectionId = logObject.connectionId;\n            return log;\n        default:\n            for (const [key, value] of Object.entries(logObject)) {\n                if (value != null)\n                    log[key] = value;\n            }\n    }\n    return log;\n}\n/** @internal */\nclass MongoLogger {\n    constructor(options) {\n        /**\n         * This method should be used when logging errors that do not have a public driver API for\n         * reporting errors.\n         */\n        this.error = this.log.bind(this, 'error');\n        /**\n         * This method should be used to log situations where undesirable application behaviour might\n         * occur. For example, failing to end sessions on `MongoClient.close`.\n         */\n        this.warn = this.log.bind(this, 'warn');\n        /**\n         * This method should be used to report high-level information about normal driver behaviour.\n         * For example, the creation of a `MongoClient`.\n         */\n        this.info = this.log.bind(this, 'info');\n        /**\n         * This method should be used to report information that would be helpful when debugging an\n         * application. For example, a command starting, succeeding or failing.\n         */\n        this.debug = this.log.bind(this, 'debug');\n        /**\n         * This method should be used to report fine-grained details related to logic flow. For example,\n         * entering and exiting a function body.\n         */\n        this.trace = this.log.bind(this, 'trace');\n        this.componentSeverities = options.componentSeverities;\n        this.maxDocumentLength = options.maxDocumentLength;\n        this.logDestination = options.logDestination;\n    }\n    log(severity, component, message) {\n        if (compareSeverity(severity, this.componentSeverities[component]) > 0)\n            return;\n        let logMessage = { t: new Date(), c: component, s: severity };\n        if (typeof message === 'string') {\n            logMessage.message = message;\n        }\n        else if (typeof message === 'object') {\n            if (isLogConvertible(message)) {\n                logMessage = { ...logMessage, ...message.toLog() };\n            }\n            else {\n                logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n            }\n        }\n        this.logDestination.write(logMessage);\n    }\n    /**\n     * Merges options set through environment variables and the MongoClient, preferring environment\n     * variables when both are set, and substituting defaults for values not set. Options set in\n     * constructor take precedence over both environment variables and MongoClient options.\n     *\n     * @remarks\n     * When parsing component severity levels, invalid values are treated as unset and replaced with\n     * the default severity.\n     *\n     * @param envOptions - options set for the logger from the environment\n     * @param clientOptions - options set for the logger in the MongoClient options\n     * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n     */\n    static resolveOptions(envOptions, clientOptions) {\n        // client options take precedence over env options\n        const combinedOptions = {\n            ...envOptions,\n            ...clientOptions,\n            mongodbLogPath: resolveLogPath(envOptions, clientOptions)\n        };\n        const defaultSeverity = parseSeverityFromString(combinedOptions.MONGODB_LOG_ALL) ?? exports.SeverityLevel.OFF;\n        return {\n            componentSeverities: {\n                command: parseSeverityFromString(combinedOptions.MONGODB_LOG_COMMAND) ?? defaultSeverity,\n                topology: parseSeverityFromString(combinedOptions.MONGODB_LOG_TOPOLOGY) ?? defaultSeverity,\n                serverSelection: parseSeverityFromString(combinedOptions.MONGODB_LOG_SERVER_SELECTION) ?? defaultSeverity,\n                connection: parseSeverityFromString(combinedOptions.MONGODB_LOG_CONNECTION) ?? defaultSeverity,\n                default: defaultSeverity\n            },\n            maxDocumentLength: (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ?? 1000,\n            logDestination: combinedOptions.mongodbLogPath\n        };\n    }\n}\nexports.MongoLogger = MongoLogger;\n//# sourceMappingURL=mongo_logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/mongo_logger.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/mongo_types.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CancellationToken = exports.TypedEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\n/**\n * Typescript type safe event emitter\n * @public\n */\nclass TypedEventEmitter extends events_1.EventEmitter {\n    /** @internal */\n    emitAndLog(event, ...args) {\n        this.emit(event, ...args);\n        if (this.component)\n            this.mongoLogger?.debug(this.component, args[0]);\n    }\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n/** @public */\nclass CancellationToken extends TypedEventEmitter {\n}\nexports.CancellationToken = CancellationToken;\n//# sourceMappingURL=mongo_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL21vbmdvX3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLHlCQUF5QjtBQUNyRCxpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL21vbmdvX3R5cGVzLmpzPzJmZTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNhbmNlbGxhdGlvblRva2VuID0gZXhwb3J0cy5UeXBlZEV2ZW50RW1pdHRlciA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbi8qKlxuICogVHlwZXNjcmlwdCB0eXBlIHNhZmUgZXZlbnQgZW1pdHRlclxuICogQHB1YmxpY1xuICovXG5jbGFzcyBUeXBlZEV2ZW50RW1pdHRlciBleHRlbmRzIGV2ZW50c18xLkV2ZW50RW1pdHRlciB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGVtaXRBbmRMb2coZXZlbnQsIC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5lbWl0KGV2ZW50LCAuLi5hcmdzKTtcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KVxuICAgICAgICAgICAgdGhpcy5tb25nb0xvZ2dlcj8uZGVidWcodGhpcy5jb21wb25lbnQsIGFyZ3NbMF0pO1xuICAgIH1cbn1cbmV4cG9ydHMuVHlwZWRFdmVudEVtaXR0ZXIgPSBUeXBlZEV2ZW50RW1pdHRlcjtcbi8qKiBAcHVibGljICovXG5jbGFzcyBDYW5jZWxsYXRpb25Ub2tlbiBleHRlbmRzIFR5cGVkRXZlbnRFbWl0dGVyIHtcbn1cbmV4cG9ydHMuQ2FuY2VsbGF0aW9uVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vbmdvX3R5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/aggregate.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/aggregate.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nclass AggregateOperation extends command_1.CommandOperation {\n    constructor(ns, pipeline, options) {\n        super(undefined, { ...options, dbName: ns.db });\n        this.options = { ...options };\n        // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n        this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n        this.pipeline = pipeline;\n        // determine if we have a write stage, override read preference if so\n        this.hasWriteStage = false;\n        if (typeof options?.out === 'string') {\n            this.pipeline = this.pipeline.concat({ $out: options.out });\n            this.hasWriteStage = true;\n        }\n        else if (pipeline.length > 0) {\n            const finalStage = pipeline[pipeline.length - 1];\n            if (finalStage.$out || finalStage.$merge) {\n                this.hasWriteStage = true;\n            }\n        }\n        if (this.hasWriteStage) {\n            this.trySecondaryWrite = true;\n        }\n        else {\n            delete this.options.writeConcern;\n        }\n        if (this.explain && this.writeConcern) {\n            throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n        }\n        if (options?.cursor != null && typeof options.cursor !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n        }\n    }\n    get canRetryRead() {\n        return !this.hasWriteStage;\n    }\n    addToPipeline(stage) {\n        this.pipeline.push(stage);\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const command = { aggregate: this.target, pipeline: this.pipeline };\n        if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n            this.readConcern = undefined;\n        }\n        if (this.hasWriteStage && this.writeConcern) {\n            write_concern_1.WriteConcern.apply(command, this.writeConcern);\n        }\n        if (options.bypassDocumentValidation === true) {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (typeof options.allowDiskUse === 'boolean') {\n            command.allowDiskUse = options.allowDiskUse;\n        }\n        if (options.hint) {\n            command.hint = options.hint;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        command.cursor = options.cursor || {};\n        if (options.batchSize && !this.hasWriteStage) {\n            command.cursor.batchSize = options.batchSize;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=aggregate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvYWdncmVnYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQixHQUFHLCtCQUErQjtBQUM1RCxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQyx3RkFBa0I7QUFDbEQsa0JBQWtCLG1CQUFPLENBQUMsc0ZBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsMEZBQWE7QUFDekM7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMkJBQTJCO0FBQ3RELHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsbUJBQW1CO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9hZ2dyZWdhdGUuanM/MWIwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWdncmVnYXRlT3BlcmF0aW9uID0gZXhwb3J0cy5EQl9BR0dSRUdBVEVfQ09MTEVDVElPTiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3Qgd3JpdGVfY29uY2Vybl8xID0gcmVxdWlyZShcIi4uL3dyaXRlX2NvbmNlcm5cIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLkRCX0FHR1JFR0FURV9DT0xMRUNUSU9OID0gMTtcbmNvbnN0IE1JTl9XSVJFX1ZFUlNJT05fJE9VVF9SRUFEX0NPTkNFUk5fU1VQUE9SVCA9IDg7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBBZ2dyZWdhdGVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIHBpcGVsaW5lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHVuZGVmaW5lZCwgeyAuLi5vcHRpb25zLCBkYk5hbWU6IG5zLmRiIH0pO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLm9wdGlvbnMgfTtcbiAgICAgICAgLy8gQ292ZXJzIHdoZW4gbnMuY29sbGVjdGlvbiBpcyBudWxsLCB1bmRlZmluZWQgb3IgdGhlIGVtcHR5IHN0cmluZywgdXNlIERCX0FHR1JFR0FURV9DT0xMRUNUSU9OXG4gICAgICAgIHRoaXMudGFyZ2V0ID0gbnMuY29sbGVjdGlvbiB8fCBleHBvcnRzLkRCX0FHR1JFR0FURV9DT0xMRUNUSU9OO1xuICAgICAgICB0aGlzLnBpcGVsaW5lID0gcGlwZWxpbmU7XG4gICAgICAgIC8vIGRldGVybWluZSBpZiB3ZSBoYXZlIGEgd3JpdGUgc3RhZ2UsIG92ZXJyaWRlIHJlYWQgcHJlZmVyZW5jZSBpZiBzb1xuICAgICAgICB0aGlzLmhhc1dyaXRlU3RhZ2UgPSBmYWxzZTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zPy5vdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLnBpcGVsaW5lID0gdGhpcy5waXBlbGluZS5jb25jYXQoeyAkb3V0OiBvcHRpb25zLm91dCB9KTtcbiAgICAgICAgICAgIHRoaXMuaGFzV3JpdGVTdGFnZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGlwZWxpbmUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZmluYWxTdGFnZSA9IHBpcGVsaW5lW3BpcGVsaW5lLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGZpbmFsU3RhZ2UuJG91dCB8fCBmaW5hbFN0YWdlLiRtZXJnZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzV3JpdGVTdGFnZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzV3JpdGVTdGFnZSkge1xuICAgICAgICAgICAgdGhpcy50cnlTZWNvbmRhcnlXcml0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5vcHRpb25zLndyaXRlQ29uY2VybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leHBsYWluICYmIHRoaXMud3JpdGVDb25jZXJuKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdPcHRpb24gXCJleHBsYWluXCIgY2Fubm90IGJlIHVzZWQgb24gYW4gYWdncmVnYXRlIGNhbGwgd2l0aCB3cml0ZUNvbmNlcm4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucz8uY3Vyc29yICE9IG51bGwgJiYgdHlwZW9mIG9wdGlvbnMuY3Vyc29yICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcignQ3Vyc29yIG9wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuaGFzV3JpdGVTdGFnZTtcbiAgICB9XG4gICAgYWRkVG9QaXBlbGluZShzdGFnZSkge1xuICAgICAgICB0aGlzLnBpcGVsaW5lLnB1c2goc3RhZ2UpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzZXJ2ZXJXaXJlVmVyc2lvbiA9ICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpO1xuICAgICAgICBjb25zdCBjb21tYW5kID0geyBhZ2dyZWdhdGU6IHRoaXMudGFyZ2V0LCBwaXBlbGluZTogdGhpcy5waXBlbGluZSB9O1xuICAgICAgICBpZiAodGhpcy5oYXNXcml0ZVN0YWdlICYmIHNlcnZlcldpcmVWZXJzaW9uIDwgTUlOX1dJUkVfVkVSU0lPTl8kT1VUX1JFQURfQ09OQ0VSTl9TVVBQT1JUKSB7XG4gICAgICAgICAgICB0aGlzLnJlYWRDb25jZXJuID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc1dyaXRlU3RhZ2UgJiYgdGhpcy53cml0ZUNvbmNlcm4pIHtcbiAgICAgICAgICAgIHdyaXRlX2NvbmNlcm5fMS5Xcml0ZUNvbmNlcm4uYXBwbHkoY29tbWFuZCwgdGhpcy53cml0ZUNvbmNlcm4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29tbWFuZC5ieXBhc3NEb2N1bWVudFZhbGlkYXRpb24gPSBvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYWxsb3dEaXNrVXNlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuYWxsb3dEaXNrVXNlID0gb3B0aW9ucy5hbGxvd0Rpc2tVc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaGludCkge1xuICAgICAgICAgICAgY29tbWFuZC5oaW50ID0gb3B0aW9ucy5oaW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmxldCkge1xuICAgICAgICAgICAgY29tbWFuZC5sZXQgPSBvcHRpb25zLmxldDtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjaGVjayBmb3IgdW5kZWZpbmVkIHNwZWNpZmljYWxseSBoZXJlIHRvIGFsbG93IGZhbHN5IHZhbHVlc1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKG9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb21tYW5kLmNvbW1lbnQgPSBvcHRpb25zLmNvbW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgY29tbWFuZC5jdXJzb3IgPSBvcHRpb25zLmN1cnNvciB8fCB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYmF0Y2hTaXplICYmICF0aGlzLmhhc1dyaXRlU3RhZ2UpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY3Vyc29yLmJhdGNoU2l6ZSA9IG9wdGlvbnMuYmF0Y2hTaXplO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNvbW1hbmQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWdncmVnYXRlT3BlcmF0aW9uID0gQWdncmVnYXRlT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEFnZ3JlZ2F0ZU9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFnZ3JlZ2F0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/aggregate.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/bulk_write.js":
/*!************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/bulk_write.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BulkWriteOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n    constructor(collection, operations, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.operations = operations;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const operations = this.operations;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        // Create the bulk operation\n        const bulk = options.ordered === false\n            ? coll.initializeUnorderedBulkOp(options)\n            : coll.initializeOrderedBulkOp(options);\n        // for each op go through and add to the bulk\n        for (let i = 0; i < operations.length; i++) {\n            bulk.raw(operations[i]);\n        }\n        // Execute the bulk\n        const result = await bulk.execute({ ...options, session });\n        return result;\n    }\n}\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=bulk_write.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvYnVsa193cml0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEI7QUFDMUIsb0JBQW9CLG1CQUFPLENBQUMsMEZBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMscUJBQXFCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvYnVsa193cml0ZS5qcz83ZThmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CdWxrV3JpdGVPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEJ1bGtXcml0ZU9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcGVyYXRpb25zLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm9wZXJhdGlvbnMgPSBvcGVyYXRpb25zO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBvcGVyYXRpb25zID0gdGhpcy5vcGVyYXRpb25zO1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIC4uLnRoaXMuYnNvbk9wdGlvbnMsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlIH07XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYnVsayBvcGVyYXRpb25cbiAgICAgICAgY29uc3QgYnVsayA9IG9wdGlvbnMub3JkZXJlZCA9PT0gZmFsc2VcbiAgICAgICAgICAgID8gY29sbC5pbml0aWFsaXplVW5vcmRlcmVkQnVsa09wKG9wdGlvbnMpXG4gICAgICAgICAgICA6IGNvbGwuaW5pdGlhbGl6ZU9yZGVyZWRCdWxrT3Aob3B0aW9ucyk7XG4gICAgICAgIC8vIGZvciBlYWNoIG9wIGdvIHRocm91Z2ggYW5kIGFkZCB0byB0aGUgYnVsa1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wZXJhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJ1bGsucmF3KG9wZXJhdGlvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJ1bGtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYnVsay5leGVjdXRlKHsgLi4ub3B0aW9ucywgc2Vzc2lvbiB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5leHBvcnRzLkJ1bGtXcml0ZU9wZXJhdGlvbiA9IEJ1bGtXcml0ZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShCdWxrV3JpdGVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWxrX3dyaXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/bulk_write.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/collections.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/collections.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CollectionsOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/../../../../../node_modules/mongodb/lib/collection.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CollectionsOperation extends operation_1.AbstractOperation {\n    constructor(db, options) {\n        super(options);\n        this.options = options;\n        this.db = db;\n    }\n    async execute(server, session) {\n        // Let's get the collection names\n        const documents = await this.db\n            .listCollections({}, { ...this.options, nameOnly: true, readPreference: this.readPreference, session })\n            .toArray();\n        const collections = [];\n        for (const { name } of documents) {\n            if (!name.includes('$')) {\n                // Filter collections removing any illegal ones\n                collections.push(new collection_1.Collection(this.db, name, this.db.s.options));\n            }\n        }\n        // Return the collection objects\n        return collections;\n    }\n}\nexports.CollectionsOperation = CollectionsOperation;\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29sbGVjdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLHFCQUFxQixtQkFBTyxDQUFDLGtGQUFlO0FBQzVDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLElBQUksK0VBQStFO0FBQ2xIO0FBQ0E7QUFDQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb2xsZWN0aW9ucy5qcz9jZWY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xsZWN0aW9uc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBDb2xsZWN0aW9uc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICAvLyBMZXQncyBnZXQgdGhlIGNvbGxlY3Rpb24gbmFtZXNcbiAgICAgICAgY29uc3QgZG9jdW1lbnRzID0gYXdhaXQgdGhpcy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7fSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiB0cnVlLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSwgc2Vzc2lvbiB9KVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCB7IG5hbWUgfSBvZiBkb2N1bWVudHMpIHtcbiAgICAgICAgICAgIGlmICghbmFtZS5pbmNsdWRlcygnJCcpKSB7XG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIGNvbGxlY3Rpb25zIHJlbW92aW5nIGFueSBpbGxlZ2FsIG9uZXNcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9ucy5wdXNoKG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbih0aGlzLmRiLCBuYW1lLCB0aGlzLmRiLnMub3B0aW9ucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiB0aGUgY29sbGVjdGlvbiBvYmplY3RzXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9ucztcbiAgICB9XG59XG5leHBvcnRzLkNvbGxlY3Rpb25zT3BlcmF0aW9uID0gQ29sbGVjdGlvbnNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/collections.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js":
/*!*********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/command.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommandOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst explain_1 = __webpack_require__(/*! ../explain */ \"(ssr)/../../../../../node_modules/mongodb/lib/explain.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, options) {\n        super(options);\n        this.options = options ?? {};\n        // NOTE: this was explicitly added for the add/remove user operations, it's likely\n        //       something we'd want to reconsider. Perhaps those commands can use `Admin`\n        //       as a parent?\n        const dbNameOverride = options?.dbName || options?.authdb;\n        if (dbNameOverride) {\n            this.ns = new utils_1.MongoDBNamespace(dbNameOverride, '$cmd');\n        }\n        else {\n            this.ns = parent\n                ? parent.s.namespace.withCollection('$cmd')\n                : new utils_1.MongoDBNamespace('admin', '$cmd');\n        }\n        this.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        this.writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            this.explain = explain_1.Explain.fromOptions(options);\n        }\n        else if (options?.explain != null) {\n            throw new error_1.MongoInvalidArgumentError(`Option \"explain\" is not supported on this command`);\n        }\n    }\n    get canRetryWrite() {\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE)) {\n            return this.explain == null;\n        }\n        return true;\n    }\n    async executeCommand(server, session, cmd) {\n        // TODO: consider making this a non-enumerable property\n        this.server = server;\n        const options = {\n            ...this.options,\n            ...this.bsonOptions,\n            readPreference: this.readPreference,\n            session\n        };\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const inTransaction = this.session && this.session.inTransaction();\n        if (this.readConcern && (0, utils_1.commandSupportsReadConcern)(cmd) && !inTransaction) {\n            Object.assign(cmd, { readConcern: this.readConcern });\n        }\n        if (this.trySecondaryWrite && serverWireVersion < server_selection_1.MIN_SECONDARY_WRITE_WIRE_VERSION) {\n            options.omitReadPreference = true;\n        }\n        if (this.writeConcern && this.hasAspect(operation_1.Aspect.WRITE_OPERATION) && !inTransaction) {\n            write_concern_1.WriteConcern.apply(cmd, this.writeConcern);\n        }\n        if (options.collation &&\n            typeof options.collation === 'object' &&\n            !this.hasAspect(operation_1.Aspect.SKIP_COLLATION)) {\n            Object.assign(cmd, { collation: options.collation });\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        if (this.hasAspect(operation_1.Aspect.EXPLAINABLE) && this.explain) {\n            cmd = (0, utils_1.decorateWithExplain)(cmd, this.explain);\n        }\n        return server.commandAsync(this.ns, cmd, options);\n    }\n}\nexports.CommandOperation = CommandOperation;\n//# sourceMappingURL=command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29tbWFuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsNEVBQVk7QUFDdEMsdUJBQXVCLG1CQUFPLENBQUMsc0ZBQWlCO0FBQ2hELDJCQUEyQixtQkFBTyxDQUFDLHdHQUEwQjtBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQyx3RkFBa0I7QUFDbEQsb0JBQW9CLG1CQUFPLENBQUMsMEZBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQywrQkFBK0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29tbWFuZC5qcz84ZWVmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21tYW5kT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGV4cGxhaW5fMSA9IHJlcXVpcmUoXCIuLi9leHBsYWluXCIpO1xuY29uc3QgcmVhZF9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9jb25jZXJuXCIpO1xuY29uc3Qgc2VydmVyX3NlbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uL3NkYW0vc2VydmVyX3NlbGVjdGlvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCB3cml0ZV9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vd3JpdGVfY29uY2VyblwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ29tbWFuZE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIC8vIE5PVEU6IHRoaXMgd2FzIGV4cGxpY2l0bHkgYWRkZWQgZm9yIHRoZSBhZGQvcmVtb3ZlIHVzZXIgb3BlcmF0aW9ucywgaXQncyBsaWtlbHlcbiAgICAgICAgLy8gICAgICAgc29tZXRoaW5nIHdlJ2Qgd2FudCB0byByZWNvbnNpZGVyLiBQZXJoYXBzIHRob3NlIGNvbW1hbmRzIGNhbiB1c2UgYEFkbWluYFxuICAgICAgICAvLyAgICAgICBhcyBhIHBhcmVudD9cbiAgICAgICAgY29uc3QgZGJOYW1lT3ZlcnJpZGUgPSBvcHRpb25zPy5kYk5hbWUgfHwgb3B0aW9ucz8uYXV0aGRiO1xuICAgICAgICBpZiAoZGJOYW1lT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKGRiTmFtZU92ZXJyaWRlLCAnJGNtZCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5ucyA9IHBhcmVudFxuICAgICAgICAgICAgICAgID8gcGFyZW50LnMubmFtZXNwYWNlLndpdGhDb2xsZWN0aW9uKCckY21kJylcbiAgICAgICAgICAgICAgICA6IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlYWRDb25jZXJuID0gcmVhZF9jb25jZXJuXzEuUmVhZENvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHRoaXMud3JpdGVDb25jZXJuID0gd3JpdGVfY29uY2Vybl8xLldyaXRlQ29uY2Vybi5mcm9tT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSkpIHtcbiAgICAgICAgICAgIHRoaXMuZXhwbGFpbiA9IGV4cGxhaW5fMS5FeHBsYWluLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnM/LmV4cGxhaW4gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgT3B0aW9uIFwiZXhwbGFpblwiIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBjb21tYW5kYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc0FzcGVjdChvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5leHBsYWluID09IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKSB7XG4gICAgICAgIC8vIFRPRE86IGNvbnNpZGVyIG1ha2luZyB0aGlzIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAuLi50aGlzLmJzb25PcHRpb25zLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHNlcnZlcldpcmVWZXJzaW9uID0gKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcik7XG4gICAgICAgIGNvbnN0IGluVHJhbnNhY3Rpb24gPSB0aGlzLnNlc3Npb24gJiYgdGhpcy5zZXNzaW9uLmluVHJhbnNhY3Rpb24oKTtcbiAgICAgICAgaWYgKHRoaXMucmVhZENvbmNlcm4gJiYgKDAsIHV0aWxzXzEuY29tbWFuZFN1cHBvcnRzUmVhZENvbmNlcm4pKGNtZCkgJiYgIWluVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY21kLCB7IHJlYWRDb25jZXJuOiB0aGlzLnJlYWRDb25jZXJuIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRyeVNlY29uZGFyeVdyaXRlICYmIHNlcnZlcldpcmVWZXJzaW9uIDwgc2VydmVyX3NlbGVjdGlvbl8xLk1JTl9TRUNPTkRBUllfV1JJVEVfV0lSRV9WRVJTSU9OKSB7XG4gICAgICAgICAgICBvcHRpb25zLm9taXRSZWFkUHJlZmVyZW5jZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMud3JpdGVDb25jZXJuICYmIHRoaXMuaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT04pICYmICFpblRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICB3cml0ZV9jb25jZXJuXzEuV3JpdGVDb25jZXJuLmFwcGx5KGNtZCwgdGhpcy53cml0ZUNvbmNlcm4pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNvbGxhdGlvbiAmJlxuICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuY29sbGF0aW9uID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgIXRoaXMuaGFzQXNwZWN0KG9wZXJhdGlvbl8xLkFzcGVjdC5TS0lQX0NPTExBVElPTikpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY21kLCB7IGNvbGxhdGlvbjogb3B0aW9ucy5jb2xsYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSBvcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oYXNBc3BlY3Qob3BlcmF0aW9uXzEuQXNwZWN0LkVYUExBSU5BQkxFKSAmJiB0aGlzLmV4cGxhaW4pIHtcbiAgICAgICAgICAgIGNtZCA9ICgwLCB1dGlsc18xLmRlY29yYXRlV2l0aEV4cGxhaW4pKGNtZCwgdGhpcy5leHBsYWluKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmRBc3luYyh0aGlzLm5zLCBjbWQsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29tbWFuZE9wZXJhdGlvbiA9IENvbW1hbmRPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tYW5kLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/common_functions.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/common_functions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.prepareDocs = exports.indexInformation = void 0;\nasync function indexInformation(db, name, options) {\n    if (options == null) {\n        options = {};\n    }\n    // If we specified full information\n    const full = options.full == null ? false : options.full;\n    // Get the list of indexes of the specified collection\n    const indexes = await db.collection(name).listIndexes(options).toArray();\n    if (full)\n        return indexes;\n    const info = {};\n    for (const index of indexes) {\n        info[index.name] = Object.entries(index.key);\n    }\n    return info;\n}\nexports.indexInformation = indexInformation;\nfunction prepareDocs(coll, docs, options) {\n    const forceServerObjectId = typeof options.forceServerObjectId === 'boolean'\n        ? options.forceServerObjectId\n        : coll.s.db.options?.forceServerObjectId;\n    // no need to modify the docs if server sets the ObjectId\n    if (forceServerObjectId === true) {\n        return docs;\n    }\n    return docs.map(doc => {\n        if (doc._id == null) {\n            doc._id = coll.s.pkFactory.createPk();\n        }\n        return doc;\n    });\n}\nexports.prepareDocs = prepareDocs;\n//# sourceMappingURL=common_functions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY29tbW9uX2Z1bmN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyx3QkFBd0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb21tb25fZnVuY3Rpb25zLmpzP2E3MDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByZXBhcmVEb2NzID0gZXhwb3J0cy5pbmRleEluZm9ybWF0aW9uID0gdm9pZCAwO1xuYXN5bmMgZnVuY3Rpb24gaW5kZXhJbmZvcm1hdGlvbihkYiwgbmFtZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICAvLyBJZiB3ZSBzcGVjaWZpZWQgZnVsbCBpbmZvcm1hdGlvblxuICAgIGNvbnN0IGZ1bGwgPSBvcHRpb25zLmZ1bGwgPT0gbnVsbCA/IGZhbHNlIDogb3B0aW9ucy5mdWxsO1xuICAgIC8vIEdldCB0aGUgbGlzdCBvZiBpbmRleGVzIG9mIHRoZSBzcGVjaWZpZWQgY29sbGVjdGlvblxuICAgIGNvbnN0IGluZGV4ZXMgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKG5hbWUpLmxpc3RJbmRleGVzKG9wdGlvbnMpLnRvQXJyYXkoKTtcbiAgICBpZiAoZnVsbClcbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG4gICAgY29uc3QgaW5mbyA9IHt9O1xuICAgIGZvciAoY29uc3QgaW5kZXggb2YgaW5kZXhlcykge1xuICAgICAgICBpbmZvW2luZGV4Lm5hbWVdID0gT2JqZWN0LmVudHJpZXMoaW5kZXgua2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG59XG5leHBvcnRzLmluZGV4SW5mb3JtYXRpb24gPSBpbmRleEluZm9ybWF0aW9uO1xuZnVuY3Rpb24gcHJlcGFyZURvY3MoY29sbCwgZG9jcywgb3B0aW9ucykge1xuICAgIGNvbnN0IGZvcmNlU2VydmVyT2JqZWN0SWQgPSB0eXBlb2Ygb3B0aW9ucy5mb3JjZVNlcnZlck9iamVjdElkID09PSAnYm9vbGVhbidcbiAgICAgICAgPyBvcHRpb25zLmZvcmNlU2VydmVyT2JqZWN0SWRcbiAgICAgICAgOiBjb2xsLnMuZGIub3B0aW9ucz8uZm9yY2VTZXJ2ZXJPYmplY3RJZDtcbiAgICAvLyBubyBuZWVkIHRvIG1vZGlmeSB0aGUgZG9jcyBpZiBzZXJ2ZXIgc2V0cyB0aGUgT2JqZWN0SWRcbiAgICBpZiAoZm9yY2VTZXJ2ZXJPYmplY3RJZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gZG9jcztcbiAgICB9XG4gICAgcmV0dXJuIGRvY3MubWFwKGRvYyA9PiB7XG4gICAgICAgIGlmIChkb2MuX2lkID09IG51bGwpIHtcbiAgICAgICAgICAgIGRvYy5faWQgPSBjb2xsLnMucGtGYWN0b3J5LmNyZWF0ZVBrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvYztcbiAgICB9KTtcbn1cbmV4cG9ydHMucHJlcGFyZURvY3MgPSBwcmVwYXJlRG9jcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbl9mdW5jdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/common_functions.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/count.js":
/*!*******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/count.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CountOperation extends command_1.CommandOperation {\n    constructor(namespace, filter, options) {\n        super({ s: { namespace: namespace } }, options);\n        this.options = options;\n        this.collectionName = namespace.collection;\n        this.query = filter;\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const cmd = {\n            count: this.collectionName,\n            query: this.query\n        };\n        if (typeof options.limit === 'number') {\n            cmd.limit = options.limit;\n        }\n        if (typeof options.skip === 'number') {\n            cmd.skip = options.skip;\n        }\n        if (options.hint != null) {\n            cmd.hint = options.hint;\n        }\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        const result = await super.executeCommand(server, session, cmd);\n        return result ? result.n : 0;\n    }\n}\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY291bnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixLQUFLLHdCQUF3QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jb3VudC5qcz8zMTJkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db3VudE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIENvdW50T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWVzcGFjZSwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHsgczogeyBuYW1lc3BhY2U6IG5hbWVzcGFjZSB9IH0sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gbmFtZXNwYWNlLmNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMucXVlcnkgPSBmaWx0ZXI7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNtZCA9IHtcbiAgICAgICAgICAgIGNvdW50OiB0aGlzLmNvbGxlY3Rpb25OYW1lLFxuICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLmxpbWl0ID0gb3B0aW9ucy5saW1pdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5za2lwID0gb3B0aW9ucy5za2lwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmhpbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY21kLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSBvcHRpb25zLm1heFRpbWVNUztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgICAgIHJldHVybiByZXN1bHQgPyByZXN1bHQubiA6IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Db3VudE9wZXJhdGlvbiA9IENvdW50T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKENvdW50T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/count.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/count_documents.js":
/*!*****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/count_documents.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CountDocumentsOperation = void 0;\nconst aggregate_1 = __webpack_require__(/*! ./aggregate */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/aggregate.js\");\n/** @internal */\nclass CountDocumentsOperation extends aggregate_1.AggregateOperation {\n    constructor(collection, query, options) {\n        const pipeline = [];\n        pipeline.push({ $match: query });\n        if (typeof options.skip === 'number') {\n            pipeline.push({ $skip: options.skip });\n        }\n        if (typeof options.limit === 'number') {\n            pipeline.push({ $limit: options.limit });\n        }\n        pipeline.push({ $group: { _id: 1, n: { $sum: 1 } } });\n        super(collection.s.namespace, pipeline, options);\n    }\n    async execute(server, session) {\n        const result = await super.execute(server, session);\n        // NOTE: We're avoiding creating a cursor here to reduce the callstack.\n        const response = result;\n        if (response.cursor == null || response.cursor.firstBatch == null) {\n            return 0;\n        }\n        const docs = response.cursor.firstBatch;\n        return docs.length ? docs[0].n : 0;\n    }\n}\nexports.CountDocumentsOperation = CountDocumentsOperation;\n//# sourceMappingURL=count_documents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY291bnRfZG9jdW1lbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQjtBQUMvQixvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDO0FBQ0EsNEJBQTRCLHFCQUFxQjtBQUNqRDtBQUNBO0FBQ0EsNEJBQTRCLHVCQUF1QjtBQUNuRDtBQUNBLHdCQUF3QixVQUFVLGFBQWEsYUFBYTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2NvdW50X2RvY3VtZW50cy5qcz9jZjM4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db3VudERvY3VtZW50c09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGFnZ3JlZ2F0ZV8xID0gcmVxdWlyZShcIi4vYWdncmVnYXRlXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ291bnREb2N1bWVudHNPcGVyYXRpb24gZXh0ZW5kcyBhZ2dyZWdhdGVfMS5BZ2dyZWdhdGVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHBpcGVsaW5lID0gW107XG4gICAgICAgIHBpcGVsaW5lLnB1c2goeyAkbWF0Y2g6IHF1ZXJ5IH0pO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLnB1c2goeyAkc2tpcDogb3B0aW9ucy5za2lwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHBpcGVsaW5lLnB1c2goeyAkbGltaXQ6IG9wdGlvbnMubGltaXQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcGlwZWxpbmUucHVzaCh7ICRncm91cDogeyBfaWQ6IDEsIG46IHsgJHN1bTogMSB9IH0gfSk7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIHBpcGVsaW5lLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3VwZXIuZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pO1xuICAgICAgICAvLyBOT1RFOiBXZSdyZSBhdm9pZGluZyBjcmVhdGluZyBhIGN1cnNvciBoZXJlIHRvIHJlZHVjZSB0aGUgY2FsbHN0YWNrLlxuICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlc3VsdDtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmN1cnNvciA9PSBudWxsIHx8IHJlc3BvbnNlLmN1cnNvci5maXJzdEJhdGNoID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRvY3MgPSByZXNwb25zZS5jdXJzb3IuZmlyc3RCYXRjaDtcbiAgICAgICAgcmV0dXJuIGRvY3MubGVuZ3RoID8gZG9jc1swXS5uIDogMDtcbiAgICB9XG59XG5leHBvcnRzLkNvdW50RG9jdW1lbnRzT3BlcmF0aW9uID0gQ291bnREb2N1bWVudHNPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudF9kb2N1bWVudHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/count_documents.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/create_collection.js":
/*!*******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/create_collection.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateCollectionOperation = void 0;\nconst constants_1 = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/../../../../../node_modules/mongodb/lib/collection.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst indexes_1 = __webpack_require__(/*! ./indexes */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/indexes.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n    'w',\n    'wtimeout',\n    'j',\n    'fsync',\n    'autoIndexId',\n    'pkFactory',\n    'raw',\n    'readPreference',\n    'session',\n    'readConcern',\n    'writeConcern',\n    'raw',\n    'fieldsAsRaw',\n    'useBigInt64',\n    'promoteLongs',\n    'promoteValues',\n    'promoteBuffers',\n    'bsonRegExp',\n    'serializeFunctions',\n    'ignoreUndefined',\n    'enableUtf8Validation'\n]);\n/* @internal */\nconst INVALID_QE_VERSION = 'Driver support of Queryable Encryption is incompatible with server. Upgrade server to use Queryable Encryption.';\n/** @internal */\nclass CreateCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.options = options;\n        this.db = db;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const encryptedFields = options.encryptedFields ??\n            db.client.options.autoEncryption?.encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (encryptedFields) {\n            // Creating a QE collection required min server of 7.0.0\n            // TODO(NODE-5353): Get wire version information from connection.\n            if (!server.loadBalanced &&\n                server.description.maxWireVersion < constants_1.MIN_SUPPORTED_QE_WIRE_VERSION) {\n                throw new error_1.MongoCompatibilityError(`${INVALID_QE_VERSION} The minimum server version required is ${constants_1.MIN_SUPPORTED_QE_SERVER_VERSION}`);\n            }\n            // Create auxilliary collections for queryable encryption support.\n            const escCollection = encryptedFields.escCollection ?? `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection ?? `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                const createOp = new CreateCollectionOperation(db, collectionName, {\n                    clusteredIndex: {\n                        key: { _id: 1 },\n                        unique: true\n                    }\n                });\n                await createOp.executeWithoutEncryptedFieldsCheck(server, session);\n            }\n            if (!options.encryptedFields) {\n                this.options = { ...this.options, encryptedFields };\n            }\n        }\n        const coll = await this.executeWithoutEncryptedFieldsCheck(server, session);\n        if (encryptedFields) {\n            // Create the required index for queryable encryption support.\n            const createIndexOp = new indexes_1.CreateIndexOperation(db, name, { __safeContent__: 1 }, {});\n            await createIndexOp.execute(server, session);\n        }\n        return coll;\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        const db = this.db;\n        const name = this.name;\n        const options = this.options;\n        const cmd = { create: name };\n        for (const n in options) {\n            if (options[n] != null &&\n                typeof options[n] !== 'function' &&\n                !ILLEGAL_COMMAND_FIELDS.has(n)) {\n                cmd[n] = options[n];\n            }\n        }\n        // otherwise just execute the command\n        await super.executeCommand(server, session, cmd);\n        return new collection_1.Collection(db, name, options);\n    }\n}\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=create_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvY3JlYXRlX2NvbGxlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDO0FBQ2pDLG9CQUFvQixtQkFBTyxDQUFDLHNIQUFpQztBQUM3RCxxQkFBcUIsbUJBQU8sQ0FBQyxrRkFBZTtBQUM1QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBVztBQUNyQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsZ0JBQWdCLEdBQUcsS0FBSztBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELG9CQUFvQix5Q0FBeUMsNENBQTRDO0FBQ3RLO0FBQ0E7QUFDQSw4RUFBOEUsS0FBSztBQUNuRixnRkFBZ0YsS0FBSztBQUNyRjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLG9CQUFvQixJQUFJO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9jcmVhdGVfY29sbGVjdGlvbi5qcz9lZWRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY21hcC93aXJlX3Byb3RvY29sL2NvbnN0YW50c1wiKTtcbmNvbnN0IGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jb2xsZWN0aW9uXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBpbmRleGVzXzEgPSByZXF1aXJlKFwiLi9pbmRleGVzXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG5jb25zdCBJTExFR0FMX0NPTU1BTkRfRklFTERTID0gbmV3IFNldChbXG4gICAgJ3cnLFxuICAgICd3dGltZW91dCcsXG4gICAgJ2onLFxuICAgICdmc3luYycsXG4gICAgJ2F1dG9JbmRleElkJyxcbiAgICAncGtGYWN0b3J5JyxcbiAgICAncmF3JyxcbiAgICAncmVhZFByZWZlcmVuY2UnLFxuICAgICdzZXNzaW9uJyxcbiAgICAncmVhZENvbmNlcm4nLFxuICAgICd3cml0ZUNvbmNlcm4nLFxuICAgICdyYXcnLFxuICAgICdmaWVsZHNBc1JhdycsXG4gICAgJ3VzZUJpZ0ludDY0JyxcbiAgICAncHJvbW90ZUxvbmdzJyxcbiAgICAncHJvbW90ZVZhbHVlcycsXG4gICAgJ3Byb21vdGVCdWZmZXJzJyxcbiAgICAnYnNvblJlZ0V4cCcsXG4gICAgJ3NlcmlhbGl6ZUZ1bmN0aW9ucycsXG4gICAgJ2lnbm9yZVVuZGVmaW5lZCcsXG4gICAgJ2VuYWJsZVV0ZjhWYWxpZGF0aW9uJ1xuXSk7XG4vKiBAaW50ZXJuYWwgKi9cbmNvbnN0IElOVkFMSURfUUVfVkVSU0lPTiA9ICdEcml2ZXIgc3VwcG9ydCBvZiBRdWVyeWFibGUgRW5jcnlwdGlvbiBpcyBpbmNvbXBhdGlibGUgd2l0aCBzZXJ2ZXIuIFVwZ3JhZGUgc2VydmVyIHRvIHVzZSBRdWVyeWFibGUgRW5jcnlwdGlvbi4nO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5kYiA9IGRiO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBkYiA9IHRoaXMuZGI7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZEZpZWxkcyA9IG9wdGlvbnMuZW5jcnlwdGVkRmllbGRzID8/XG4gICAgICAgICAgICBkYi5jbGllbnQub3B0aW9ucy5hdXRvRW5jcnlwdGlvbj8uZW5jcnlwdGVkRmllbGRzTWFwPy5bYCR7ZGIuZGF0YWJhc2VOYW1lfS4ke25hbWV9YF07XG4gICAgICAgIGlmIChlbmNyeXB0ZWRGaWVsZHMpIHtcbiAgICAgICAgICAgIC8vIENyZWF0aW5nIGEgUUUgY29sbGVjdGlvbiByZXF1aXJlZCBtaW4gc2VydmVyIG9mIDcuMC4wXG4gICAgICAgICAgICAvLyBUT0RPKE5PREUtNTM1Myk6IEdldCB3aXJlIHZlcnNpb24gaW5mb3JtYXRpb24gZnJvbSBjb25uZWN0aW9uLlxuICAgICAgICAgICAgaWYgKCFzZXJ2ZXIubG9hZEJhbGFuY2VkICYmXG4gICAgICAgICAgICAgICAgc2VydmVyLmRlc2NyaXB0aW9uLm1heFdpcmVWZXJzaW9uIDwgY29uc3RhbnRzXzEuTUlOX1NVUFBPUlRFRF9RRV9XSVJFX1ZFUlNJT04pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcihgJHtJTlZBTElEX1FFX1ZFUlNJT059IFRoZSBtaW5pbXVtIHNlcnZlciB2ZXJzaW9uIHJlcXVpcmVkIGlzICR7Y29uc3RhbnRzXzEuTUlOX1NVUFBPUlRFRF9RRV9TRVJWRVJfVkVSU0lPTn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhdXhpbGxpYXJ5IGNvbGxlY3Rpb25zIGZvciBxdWVyeWFibGUgZW5jcnlwdGlvbiBzdXBwb3J0LlxuICAgICAgICAgICAgY29uc3QgZXNjQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lc2NDb2xsZWN0aW9uID8/IGBlbnhjb2xfLiR7bmFtZX0uZXNjYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2NDb2xsZWN0aW9uID0gZW5jcnlwdGVkRmllbGRzLmVjb2NDb2xsZWN0aW9uID8/IGBlbnhjb2xfLiR7bmFtZX0uZWNvY2A7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb25OYW1lIG9mIFtlc2NDb2xsZWN0aW9uLCBlY29jQ29sbGVjdGlvbl0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdGVPcCA9IG5ldyBDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uKGRiLCBjb2xsZWN0aW9uTmFtZSwge1xuICAgICAgICAgICAgICAgICAgICBjbHVzdGVyZWRJbmRleDoge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiB7IF9pZDogMSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pcXVlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhd2FpdCBjcmVhdGVPcC5leGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZW5jcnlwdGVkRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi50aGlzLm9wdGlvbnMsIGVuY3J5cHRlZEZpZWxkcyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbGwgPSBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKGVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSByZXF1aXJlZCBpbmRleCBmb3IgcXVlcnlhYmxlIGVuY3J5cHRpb24gc3VwcG9ydC5cbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZUluZGV4T3AgPSBuZXcgaW5kZXhlc18xLkNyZWF0ZUluZGV4T3BlcmF0aW9uKGRiLCBuYW1lLCB7IF9fc2FmZUNvbnRlbnRfXzogMSB9LCB7fSk7XG4gICAgICAgICAgICBhd2FpdCBjcmVhdGVJbmRleE9wLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbDtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZGIgPSB0aGlzLmRiO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjbWQgPSB7IGNyZWF0ZTogbmFtZSB9O1xuICAgICAgICBmb3IgKGNvbnN0IG4gaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnNbbl0gIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zW25dICE9PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgICAgIUlMTEVHQUxfQ09NTUFORF9GSUVMRFMuaGFzKG4pKSB7XG4gICAgICAgICAgICAgICAgY21kW25dID0gb3B0aW9uc1tuXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBvdGhlcndpc2UganVzdCBleGVjdXRlIHRoZSBjb21tYW5kXG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIG5ldyBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvbihkYiwgbmFtZSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5DcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uID0gQ3JlYXRlQ29sbGVjdGlvbk9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShDcmVhdGVDb2xsZWN0aW9uT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlX2NvbGxlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/create_collection.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/delete.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/delete.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeDeleteStatement = exports.DeleteManyOperation = exports.DeleteOneOperation = exports.DeleteOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DeleteOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => (op.limit != null ? op.limit > 0 : true));\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            delete: this.ns.collection,\n            deletes: this.statements,\n            ordered\n        };\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DeleteOperation = DeleteOperation;\nclass DeleteOneOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, { ...options, limit: 1 })], options);\n    }\n    async execute(server, session) {\n        const res = (await super.execute(server, session));\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteOneOperation = DeleteOneOperation;\nclass DeleteManyOperation extends DeleteOperation {\n    constructor(collection, filter, options) {\n        super(collection.s.namespace, [makeDeleteStatement(filter, options)], options);\n    }\n    async execute(server, session) {\n        const res = (await super.execute(server, session));\n        if (this.explain)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            deletedCount: res.n\n        };\n    }\n}\nexports.DeleteManyOperation = DeleteManyOperation;\nfunction makeDeleteStatement(filter, options) {\n    const op = {\n        q: filter,\n        limit: typeof options.limit === 'number' ? options.limit : 0\n    };\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    return op;\n}\nexports.makeDeleteStatement = makeDeleteStatement;\n(0, operation_1.defineAspects)(DeleteOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DeleteOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(DeleteManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=delete.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZGVsZXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLDJCQUEyQixHQUFHLDBCQUEwQixHQUFHLHVCQUF1QjtBQUNoSCxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EscUVBQXFFLHNCQUFzQjtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZGVsZXRlLmpzPzkyMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1ha2VEZWxldGVTdGF0ZW1lbnQgPSBleHBvcnRzLkRlbGV0ZU1hbnlPcGVyYXRpb24gPSBleHBvcnRzLkRlbGV0ZU9uZU9wZXJhdGlvbiA9IGV4cG9ydHMuRGVsZXRlT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIERlbGV0ZU9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihucywgc3RhdGVtZW50cywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih1bmRlZmluZWQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMuc3RhdGVtZW50cyA9IHN0YXRlbWVudHM7XG4gICAgfVxuICAgIGdldCBjYW5SZXRyeVdyaXRlKCkge1xuICAgICAgICBpZiAoc3VwZXIuY2FuUmV0cnlXcml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZW1lbnRzLmV2ZXJ5KG9wID0+IChvcC5saW1pdCAhPSBudWxsID8gb3AubGltaXQgPiAwIDogdHJ1ZSkpO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGRlbGV0ZTogdGhpcy5ucy5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgZGVsZXRlczogdGhpcy5zdGF0ZW1lbnRzLFxuICAgICAgICAgICAgb3JkZXJlZFxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucy5sZXQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQubGV0ID0gb3B0aW9ucy5sZXQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmIChvcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29tbWFuZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVuYWNrbm93bGVkZ2VkV3JpdGUgPSB0aGlzLndyaXRlQ29uY2VybiAmJiB0aGlzLndyaXRlQ29uY2Vybi53ID09PSAwO1xuICAgICAgICBpZiAodW5hY2tub3dsZWRnZWRXcml0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGVtZW50cy5maW5kKChvKSA9PiBvLmhpbnQpKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETyhOT0RFLTM1NDEpOiBmaXggZXJyb3IgZm9yIGhpbnQgd2l0aCB1bmFja25vd2xlZGdlZCB3cml0ZXNcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0NvbXBhdGliaWxpdHlFcnJvcihgaGludCBpcyBub3Qgc3VwcG9ydGVkIHdpdGggdW5hY2tub3dsZWRnZWQgd3JpdGVzYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgfVxufVxuZXhwb3J0cy5EZWxldGVPcGVyYXRpb24gPSBEZWxldGVPcGVyYXRpb247XG5jbGFzcyBEZWxldGVPbmVPcGVyYXRpb24gZXh0ZW5kcyBEZWxldGVPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIGZpbHRlciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLnMubmFtZXNwYWNlLCBbbWFrZURlbGV0ZVN0YXRlbWVudChmaWx0ZXIsIHsgLi4ub3B0aW9ucywgbGltaXQ6IDEgfSldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzID0gKGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSk7XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4pXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgZGVsZXRlZENvdW50OiByZXMublxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRGVsZXRlT25lT3BlcmF0aW9uID0gRGVsZXRlT25lT3BlcmF0aW9uO1xuY2xhc3MgRGVsZXRlTWFueU9wZXJhdGlvbiBleHRlbmRzIERlbGV0ZU9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsIFttYWtlRGVsZXRlU3RhdGVtZW50KGZpbHRlciwgb3B0aW9ucyldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgcmVzID0gKGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSk7XG4gICAgICAgIGlmICh0aGlzLmV4cGxhaW4pXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICBpZiAocmVzLmNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcyk7XG4gICAgICAgIGlmIChyZXMud3JpdGVFcnJvcnMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckVycm9yKHJlcy53cml0ZUVycm9yc1swXSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY2tub3dsZWRnZWQ6IHRoaXMud3JpdGVDb25jZXJuPy53ICE9PSAwLFxuICAgICAgICAgICAgZGVsZXRlZENvdW50OiByZXMublxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuRGVsZXRlTWFueU9wZXJhdGlvbiA9IERlbGV0ZU1hbnlPcGVyYXRpb247XG5mdW5jdGlvbiBtYWtlRGVsZXRlU3RhdGVtZW50KGZpbHRlciwgb3B0aW9ucykge1xuICAgIGNvbnN0IG9wID0ge1xuICAgICAgICBxOiBmaWx0ZXIsXG4gICAgICAgIGxpbWl0OiB0eXBlb2Ygb3B0aW9ucy5saW1pdCA9PT0gJ251bWJlcicgPyBvcHRpb25zLmxpbWl0IDogMFxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMuY29sbGF0aW9uKSB7XG4gICAgICAgIG9wLmNvbGxhdGlvbiA9IG9wdGlvbnMuY29sbGF0aW9uO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5oaW50KSB7XG4gICAgICAgIG9wLmhpbnQgPSBvcHRpb25zLmhpbnQ7XG4gICAgfVxuICAgIHJldHVybiBvcDtcbn1cbmV4cG9ydHMubWFrZURlbGV0ZVN0YXRlbWVudCA9IG1ha2VEZWxldGVTdGF0ZW1lbnQ7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRGVsZXRlT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFVFJZQUJMRSwgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERlbGV0ZU9uZU9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OXG5dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEZWxldGVNYW55T3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlNLSVBfQ09MTEFUSU9OXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbGV0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/delete.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/distinct.js":
/*!**********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/distinct.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DistinctOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nclass DistinctOperation extends command_1.CommandOperation {\n    /**\n     * Construct a Distinct operation.\n     *\n     * @param collection - Collection instance.\n     * @param key - Field of the document to find distinct values for.\n     * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n     */\n    constructor(collection, key, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.key = key;\n        this.query = query;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const key = this.key;\n        const query = this.query;\n        const options = this.options;\n        // Distinct command\n        const cmd = {\n            distinct: coll.collectionName,\n            key: key,\n            query: query\n        };\n        // Add maxTimeMS if defined\n        if (typeof options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (typeof options.comment !== 'undefined') {\n            cmd.comment = options.comment;\n        }\n        // Do we have a readConcern specified\n        (0, utils_1.decorateWithReadConcern)(cmd, coll, options);\n        // Have we specified collation\n        (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        const result = await super.executeCommand(server, session, cmd);\n        return this.explain ? result : result.values;\n    }\n}\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);\n//# sourceMappingURL=distinct.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZGlzdGluY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZGlzdGluY3QuanM/NDlmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGlzdGluY3RPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqXG4gKiBSZXR1cm4gYSBsaXN0IG9mIGRpc3RpbmN0IHZhbHVlcyBmb3IgdGhlIGdpdmVuIGtleSBhY3Jvc3MgYSBjb2xsZWN0aW9uLlxuICogQGludGVybmFsXG4gKi9cbmNsYXNzIERpc3RpbmN0T3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIERpc3RpbmN0IG9wZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uIC0gQ29sbGVjdGlvbiBpbnN0YW5jZS5cbiAgICAgKiBAcGFyYW0ga2V5IC0gRmllbGQgb2YgdGhlIGRvY3VtZW50IHRvIGZpbmQgZGlzdGluY3QgdmFsdWVzIGZvci5cbiAgICAgKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgZm9yIGZpbHRlcmluZyB0aGUgc2V0IG9mIGRvY3VtZW50cyB0byB3aGljaCB3ZSBhcHBseSB0aGUgZGlzdGluY3QgZmlsdGVyLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwgc2V0dGluZ3MuIFNlZSBDb2xsZWN0aW9uLnByb3RvdHlwZS5kaXN0aW5jdCBmb3IgYSBsaXN0IG9mIG9wdGlvbnMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwga2V5LCBxdWVyeSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXk7XG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy5xdWVyeTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgLy8gRGlzdGluY3QgY29tbWFuZFxuICAgICAgICBjb25zdCBjbWQgPSB7XG4gICAgICAgICAgICBkaXN0aW5jdDogY29sbC5jb2xsZWN0aW9uTmFtZSxcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICAgIH07XG4gICAgICAgIC8vIEFkZCBtYXhUaW1lTVMgaWYgZGVmaW5lZFxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubWF4VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgY21kLm1heFRpbWVNUyA9IG9wdGlvbnMubWF4VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY29tbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNtZC5jb21tZW50ID0gb3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIERvIHdlIGhhdmUgYSByZWFkQ29uY2VybiBzcGVjaWZpZWRcbiAgICAgICAgKDAsIHV0aWxzXzEuZGVjb3JhdGVXaXRoUmVhZENvbmNlcm4pKGNtZCwgY29sbCwgb3B0aW9ucyk7XG4gICAgICAgIC8vIEhhdmUgd2Ugc3BlY2lmaWVkIGNvbGxhdGlvblxuICAgICAgICAoMCwgdXRpbHNfMS5kZWNvcmF0ZVdpdGhDb2xsYXRpb24pKGNtZCwgY29sbCwgb3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXhwbGFpbiA/IHJlc3VsdCA6IHJlc3VsdC52YWx1ZXM7XG4gICAgfVxufVxuZXhwb3J0cy5EaXN0aW5jdE9wZXJhdGlvbiA9IERpc3RpbmN0T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERpc3RpbmN0T3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuRVhQTEFJTkFCTEVdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpc3RpbmN0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/distinct.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/drop.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/drop.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropDatabaseOperation = exports.DropCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropCollectionOperation extends command_1.CommandOperation {\n    constructor(db, name, options = {}) {\n        super(db, options);\n        this.db = db;\n        this.options = options;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const options = this.options;\n        const name = this.name;\n        const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;\n        let encryptedFields = options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];\n        if (!encryptedFields && encryptedFieldsMap) {\n            // If the MongoClient was configured with an encryptedFieldsMap,\n            // and no encryptedFields config was available in it or explicitly\n            // passed as an argument, the spec tells us to look one up using\n            // listCollections().\n            const listCollectionsResult = await db\n                .listCollections({ name }, { nameOnly: false })\n                .toArray();\n            encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;\n        }\n        if (encryptedFields) {\n            const escCollection = encryptedFields.escCollection || `enxcol_.${name}.esc`;\n            const ecocCollection = encryptedFields.ecocCollection || `enxcol_.${name}.ecoc`;\n            for (const collectionName of [escCollection, ecocCollection]) {\n                // Drop auxilliary collections, ignoring potential NamespaceNotFound errors.\n                const dropOp = new DropCollectionOperation(db, collectionName);\n                try {\n                    await dropOp.executeWithoutEncryptedFieldsCheck(server, session);\n                }\n                catch (err) {\n                    if (!(err instanceof error_1.MongoServerError) ||\n                        err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n                        throw err;\n                    }\n                }\n            }\n        }\n        return this.executeWithoutEncryptedFieldsCheck(server, session);\n    }\n    async executeWithoutEncryptedFieldsCheck(server, session) {\n        await super.executeCommand(server, session, { drop: this.name });\n        return true;\n    }\n}\nexports.DropCollectionOperation = DropCollectionOperation;\n/** @internal */\nclass DropDatabaseOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropDatabase: 1 });\n        return true;\n    }\n}\nexports.DropDatabaseOperation = DropDatabaseOperation;\n(0, operation_1.defineAspects)(DropCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropDatabaseOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZHJvcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkIsR0FBRywrQkFBK0I7QUFDL0QsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsc0ZBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsMEZBQWE7QUFDekM7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixnQkFBZ0IsR0FBRyxLQUFLO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxNQUFNLElBQUksaUJBQWlCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLEtBQUs7QUFDbkYsZ0ZBQWdGLEtBQUs7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQkFBaUI7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlCQUFpQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZHJvcC5qcz83Yzk5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ecm9wRGF0YWJhc2VPcGVyYXRpb24gPSBleHBvcnRzLkRyb3BDb2xsZWN0aW9uT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGRiID0gdGhpcy5kYjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZTtcbiAgICAgICAgY29uc3QgZW5jcnlwdGVkRmllbGRzTWFwID0gZGIuY2xpZW50Lm9wdGlvbnMuYXV0b0VuY3J5cHRpb24/LmVuY3J5cHRlZEZpZWxkc01hcDtcbiAgICAgICAgbGV0IGVuY3J5cHRlZEZpZWxkcyA9IG9wdGlvbnMuZW5jcnlwdGVkRmllbGRzID8/IGVuY3J5cHRlZEZpZWxkc01hcD8uW2Ake2RiLmRhdGFiYXNlTmFtZX0uJHtuYW1lfWBdO1xuICAgICAgICBpZiAoIWVuY3J5cHRlZEZpZWxkcyAmJiBlbmNyeXB0ZWRGaWVsZHNNYXApIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBNb25nb0NsaWVudCB3YXMgY29uZmlndXJlZCB3aXRoIGFuIGVuY3J5cHRlZEZpZWxkc01hcCxcbiAgICAgICAgICAgIC8vIGFuZCBubyBlbmNyeXB0ZWRGaWVsZHMgY29uZmlnIHdhcyBhdmFpbGFibGUgaW4gaXQgb3IgZXhwbGljaXRseVxuICAgICAgICAgICAgLy8gcGFzc2VkIGFzIGFuIGFyZ3VtZW50LCB0aGUgc3BlYyB0ZWxscyB1cyB0byBsb29rIG9uZSB1cCB1c2luZ1xuICAgICAgICAgICAgLy8gbGlzdENvbGxlY3Rpb25zKCkuXG4gICAgICAgICAgICBjb25zdCBsaXN0Q29sbGVjdGlvbnNSZXN1bHQgPSBhd2FpdCBkYlxuICAgICAgICAgICAgICAgIC5saXN0Q29sbGVjdGlvbnMoeyBuYW1lIH0sIHsgbmFtZU9ubHk6IGZhbHNlIH0pXG4gICAgICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIGVuY3J5cHRlZEZpZWxkcyA9IGxpc3RDb2xsZWN0aW9uc1Jlc3VsdD8uWzBdPy5vcHRpb25zPy5lbmNyeXB0ZWRGaWVsZHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuY3J5cHRlZEZpZWxkcykge1xuICAgICAgICAgICAgY29uc3QgZXNjQ29sbGVjdGlvbiA9IGVuY3J5cHRlZEZpZWxkcy5lc2NDb2xsZWN0aW9uIHx8IGBlbnhjb2xfLiR7bmFtZX0uZXNjYDtcbiAgICAgICAgICAgIGNvbnN0IGVjb2NDb2xsZWN0aW9uID0gZW5jcnlwdGVkRmllbGRzLmVjb2NDb2xsZWN0aW9uIHx8IGBlbnhjb2xfLiR7bmFtZX0uZWNvY2A7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbGxlY3Rpb25OYW1lIG9mIFtlc2NDb2xsZWN0aW9uLCBlY29jQ29sbGVjdGlvbl0pIHtcbiAgICAgICAgICAgICAgICAvLyBEcm9wIGF1eGlsbGlhcnkgY29sbGVjdGlvbnMsIGlnbm9yaW5nIHBvdGVudGlhbCBOYW1lc3BhY2VOb3RGb3VuZCBlcnJvcnMuXG4gICAgICAgICAgICAgICAgY29uc3QgZHJvcE9wID0gbmV3IERyb3BDb2xsZWN0aW9uT3BlcmF0aW9uKGRiLCBjb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgZHJvcE9wLmV4ZWN1dGVXaXRob3V0RW5jcnlwdGVkRmllbGRzQ2hlY2soc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShlcnIgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnIuY29kZSAhPT0gZXJyb3JfMS5NT05HT0RCX0VSUk9SX0NPREVTLk5hbWVzcGFjZU5vdEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZXhlY3V0ZVdpdGhvdXRFbmNyeXB0ZWRGaWVsZHNDaGVjayhzZXJ2ZXIsIHNlc3Npb24pO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlV2l0aG91dEVuY3J5cHRlZEZpZWxkc0NoZWNrKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcDogdGhpcy5uYW1lIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLkRyb3BDb2xsZWN0aW9uT3BlcmF0aW9uID0gRHJvcENvbGxlY3Rpb25PcGVyYXRpb247XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEcm9wRGF0YWJhc2VPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcERhdGFiYXNlOiAxIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLkRyb3BEYXRhYmFzZU9wZXJhdGlvbiA9IERyb3BEYXRhYmFzZU9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEcm9wQ29sbGVjdGlvbk9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShEcm9wRGF0YWJhc2VPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/drop.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/estimated_document_count.js":
/*!**************************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/estimated_document_count.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EstimatedDocumentCountOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass EstimatedDocumentCountOperation extends command_1.CommandOperation {\n    constructor(collection, options = {}) {\n        super(collection, options);\n        this.options = options;\n        this.collectionName = collection.collectionName;\n    }\n    async execute(server, session) {\n        const cmd = { count: this.collectionName };\n        if (typeof this.options.maxTimeMS === 'number') {\n            cmd.maxTimeMS = this.options.maxTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        const response = await super.executeCommand(server, session, cmd);\n        return response?.n || 0;\n    }\n}\nexports.EstimatedDocumentCountOperation = EstimatedDocumentCountOperation;\n(0, operation_1.defineAspects)(EstimatedDocumentCountOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=estimated_document_count.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZXN0aW1hdGVkX2RvY3VtZW50X2NvdW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVDQUF1QztBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2VzdGltYXRlZF9kb2N1bWVudF9jb3VudC5qcz85ZjJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Fc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbk5hbWUgPSBjb2xsZWN0aW9uLmNvbGxlY3Rpb25OYW1lO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjbWQgPSB7IGNvdW50OiB0aGlzLmNvbGxlY3Rpb25OYW1lIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNtZC5tYXhUaW1lTVMgPSB0aGlzLm9wdGlvbnMubWF4VGltZU1TO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNvbW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY21kLmNvbW1lbnQgPSB0aGlzLm9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY21kKTtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlPy5uIHx8IDA7XG4gICAgfVxufVxuZXhwb3J0cy5Fc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uID0gRXN0aW1hdGVkRG9jdW1lbnRDb3VudE9wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShFc3RpbWF0ZWREb2N1bWVudENvdW50T3BlcmF0aW9uLCBbXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsXG4gICAgb3BlcmF0aW9uXzEuQXNwZWN0LkNVUlNPUl9DUkVBVElOR1xuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lc3RpbWF0ZWRfZG9jdW1lbnRfY291bnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/estimated_document_count.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js":
/*!*******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/execute_operation.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.executeOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst server_selection_1 = __webpack_require__(/*! ../sdam/server_selection */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_selection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = error_1.MONGODB_ERROR_CODES.IllegalOperation;\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE = 'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\nfunction executeOperation(client, operation, callback) {\n    return (0, utils_1.maybeCallback)(() => executeOperationAsync(client, operation), callback);\n}\nexports.executeOperation = executeOperation;\nasync function executeOperationAsync(client, operation) {\n    if (!(operation instanceof operation_1.AbstractOperation)) {\n        // TODO(NODE-3483): Extend MongoRuntimeError\n        throw new error_1.MongoRuntimeError('This method requires a valid operation instance');\n    }\n    if (client.topology == null) {\n        // Auto connect on operation\n        if (client.s.hasBeenClosed) {\n            throw new error_1.MongoNotConnectedError('Client must be connected before running operations');\n        }\n        client.s.options[Symbol.for('@@mdb.skipPingOnConnect')] = true;\n        try {\n            await client.connect();\n        }\n        finally {\n            delete client.s.options[Symbol.for('@@mdb.skipPingOnConnect')];\n        }\n    }\n    const { topology } = client;\n    if (topology == null) {\n        throw new error_1.MongoRuntimeError('client.connect did not create a topology but also did not throw');\n    }\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session = operation.session;\n    let owner;\n    if (session == null) {\n        owner = Symbol();\n        session = client.startSession({ owner, explicit: false });\n    }\n    else if (session.hasEnded) {\n        throw new error_1.MongoExpiredSessionError('Use of expired sessions is not permitted');\n    }\n    else if (session.snapshotEnabled && !topology.capabilities.supportsSnapshotReads) {\n        throw new error_1.MongoCompatibilityError('Snapshot reads require MongoDB 5.0 or later');\n    }\n    else if (session.client !== client) {\n        throw new error_1.MongoInvalidArgumentError('ClientSession must be from the same MongoClient');\n    }\n    const readPreference = operation.readPreference ?? read_preference_1.ReadPreference.primary;\n    const inTransaction = !!session?.inTransaction();\n    if (inTransaction && !readPreference.equals(read_preference_1.ReadPreference.primary)) {\n        throw new error_1.MongoTransactionError(`Read preference in a transaction must be primary, not: ${readPreference.mode}`);\n    }\n    if (session?.isPinned && session.transaction.isCommitted && !operation.bypassPinningCheck) {\n        session.unpin();\n    }\n    let selector;\n    if (operation.hasAspect(operation_1.Aspect.MUST_SELECT_SAME_SERVER)) {\n        // GetMore and KillCursor operations must always select the same server, but run through\n        // server selection to potentially force monitor checks if the server is\n        // in an unknown state.\n        selector = (0, server_selection_1.sameServerSelector)(operation.server?.description);\n    }\n    else if (operation.trySecondaryWrite) {\n        // If operation should try to write to secondary use the custom server selector\n        // otherwise provide the read preference.\n        selector = (0, server_selection_1.secondaryWritableServerSelector)(topology.commonWireVersion, readPreference);\n    }\n    else {\n        selector = readPreference;\n    }\n    const server = await topology.selectServerAsync(selector, { session });\n    if (session == null) {\n        // No session also means it is not retryable, early exit\n        return operation.execute(server, undefined);\n    }\n    if (!operation.hasAspect(operation_1.Aspect.RETRYABLE)) {\n        // non-retryable operation, early exit\n        try {\n            return await operation.execute(server, session);\n        }\n        finally {\n            if (session?.owner != null && session.owner === owner) {\n                await session.endSession().catch(() => null);\n            }\n        }\n    }\n    const willRetryRead = topology.s.options.retryReads && !inTransaction && operation.canRetryRead;\n    const willRetryWrite = topology.s.options.retryWrites &&\n        !inTransaction &&\n        (0, utils_1.supportsRetryableWrites)(server) &&\n        operation.canRetryWrite;\n    const hasReadAspect = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    const hasWriteAspect = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const willRetry = (hasReadAspect && willRetryRead) || (hasWriteAspect && willRetryWrite);\n    if (hasWriteAspect && willRetryWrite) {\n        operation.options.willRetryWrite = true;\n        session.incrementTransactionNumber();\n    }\n    try {\n        return await operation.execute(server, session);\n    }\n    catch (operationError) {\n        if (willRetry && operationError instanceof error_1.MongoError) {\n            return await retryOperation(operation, operationError, {\n                session,\n                topology,\n                selector\n            });\n        }\n        throw operationError;\n    }\n    finally {\n        if (session?.owner != null && session.owner === owner) {\n            await session.endSession().catch(() => null);\n        }\n    }\n}\nasync function retryOperation(operation, originalError, { session, topology, selector }) {\n    const isWriteOperation = operation.hasAspect(operation_1.Aspect.WRITE_OPERATION);\n    const isReadOperation = operation.hasAspect(operation_1.Aspect.READ_OPERATION);\n    if (isWriteOperation && originalError.code === MMAPv1_RETRY_WRITES_ERROR_CODE) {\n        throw new error_1.MongoServerError({\n            message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n            originalError\n        });\n    }\n    if (isWriteOperation && !(0, error_1.isRetryableWriteError)(originalError)) {\n        throw originalError;\n    }\n    if (isReadOperation && !(0, error_1.isRetryableReadError)(originalError)) {\n        throw originalError;\n    }\n    if (originalError instanceof error_1.MongoNetworkError &&\n        session.isPinned &&\n        !session.inTransaction() &&\n        operation.hasAspect(operation_1.Aspect.CURSOR_CREATING)) {\n        // If we have a cursor and the initial command fails with a network error,\n        // we can retry it on another connection. So we need to check it back in, clear the\n        // pool for the service id, and retry again.\n        session.unpin({ force: true, forceClear: true });\n    }\n    // select a new server, and attempt to retry the operation\n    const server = await topology.selectServerAsync(selector, { session });\n    if (isWriteOperation && !(0, utils_1.supportsRetryableWrites)(server)) {\n        throw new error_1.MongoUnexpectedServerResponseError('Selected server does not support retryable writes');\n    }\n    try {\n        return await operation.execute(server, session);\n    }\n    catch (retryError) {\n        if (retryError instanceof error_1.MongoError &&\n            retryError.hasErrorLabel(error_1.MongoErrorLabel.NoWritesPerformed)) {\n            throw originalError;\n        }\n        throw retryError;\n    }\n}\n//# sourceMappingURL=execute_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/find.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/find.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ../read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/../../../../../node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass FindOperation extends command_1.CommandOperation {\n    constructor(collection, ns, filter = {}, options = {}) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.ns = ns;\n        if (typeof filter !== 'object' || Array.isArray(filter)) {\n            throw new error_1.MongoInvalidArgumentError('Query filter must be a plain object or ObjectId');\n        }\n        // special case passing in an ObjectId as a filter\n        this.filter = filter != null && filter._bsontype === 'ObjectId' ? { _id: filter } : filter;\n    }\n    async execute(server, session) {\n        this.server = server;\n        const options = this.options;\n        let findCommand = makeFindCommand(this.ns, this.filter, options);\n        if (this.explain) {\n            findCommand = (0, utils_1.decorateWithExplain)(findCommand, this.explain);\n        }\n        return server.commandAsync(this.ns, findCommand, {\n            ...this.options,\n            ...this.bsonOptions,\n            documentsReturnedIn: 'firstBatch',\n            session\n        });\n    }\n}\nexports.FindOperation = FindOperation;\nfunction makeFindCommand(ns, filter, options) {\n    const findCommand = {\n        find: ns.collection,\n        filter\n    };\n    if (options.sort) {\n        findCommand.sort = (0, sort_1.formatSort)(options.sort);\n    }\n    if (options.projection) {\n        let projection = options.projection;\n        if (projection && Array.isArray(projection)) {\n            projection = projection.length\n                ? projection.reduce((result, field) => {\n                    result[field] = 1;\n                    return result;\n                }, {})\n                : { _id: 1 };\n        }\n        findCommand.projection = projection;\n    }\n    if (options.hint) {\n        findCommand.hint = (0, utils_1.normalizeHintField)(options.hint);\n    }\n    if (typeof options.skip === 'number') {\n        findCommand.skip = options.skip;\n    }\n    if (typeof options.limit === 'number') {\n        if (options.limit < 0) {\n            findCommand.limit = -options.limit;\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.limit = options.limit;\n        }\n    }\n    if (typeof options.batchSize === 'number') {\n        if (options.batchSize < 0) {\n            if (options.limit &&\n                options.limit !== 0 &&\n                Math.abs(options.batchSize) < Math.abs(options.limit)) {\n                findCommand.limit = -options.batchSize;\n            }\n            findCommand.singleBatch = true;\n        }\n        else {\n            findCommand.batchSize = options.batchSize;\n        }\n    }\n    if (typeof options.singleBatch === 'boolean') {\n        findCommand.singleBatch = options.singleBatch;\n    }\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (options.comment !== undefined) {\n        findCommand.comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n        findCommand.maxTimeMS = options.maxTimeMS;\n    }\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n        findCommand.readConcern = readConcern.toJSON();\n    }\n    if (options.max) {\n        findCommand.max = options.max;\n    }\n    if (options.min) {\n        findCommand.min = options.min;\n    }\n    if (typeof options.returnKey === 'boolean') {\n        findCommand.returnKey = options.returnKey;\n    }\n    if (typeof options.showRecordId === 'boolean') {\n        findCommand.showRecordId = options.showRecordId;\n    }\n    if (typeof options.tailable === 'boolean') {\n        findCommand.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === 'boolean') {\n        findCommand.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === 'boolean') {\n        findCommand.noCursorTimeout = !options.timeout;\n    }\n    else if (typeof options.noCursorTimeout === 'boolean') {\n        findCommand.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === 'boolean') {\n        findCommand.awaitData = options.awaitData;\n    }\n    if (typeof options.allowPartialResults === 'boolean') {\n        findCommand.allowPartialResults = options.allowPartialResults;\n    }\n    if (options.collation) {\n        findCommand.collation = options.collation;\n    }\n    if (typeof options.allowDiskUse === 'boolean') {\n        findCommand.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.let) {\n        findCommand.let = options.let;\n    }\n    return findCommand;\n}\n(0, operation_1.defineAspects)(FindOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=find.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZmluZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckIsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsdUJBQXVCLG1CQUFPLENBQUMsc0ZBQWlCO0FBQ2hELGVBQWUsbUJBQU8sQ0FBQyxzRUFBUztBQUNoQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0EsMkNBQTJDLGNBQWM7QUFDekQ7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLGNBQWM7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsSUFBSTtBQUNyQixvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9maW5kLmpzPzIzMmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZpbmRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgcmVhZF9jb25jZXJuXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9jb25jZXJuXCIpO1xuY29uc3Qgc29ydF8xID0gcmVxdWlyZShcIi4uL3NvcnRcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgRmluZE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBucywgZmlsdGVyID0ge30sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihjb2xsZWN0aW9uLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KGZpbHRlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1F1ZXJ5IGZpbHRlciBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0IG9yIE9iamVjdElkJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3BlY2lhbCBjYXNlIHBhc3NpbmcgaW4gYW4gT2JqZWN0SWQgYXMgYSBmaWx0ZXJcbiAgICAgICAgdGhpcy5maWx0ZXIgPSBmaWx0ZXIgIT0gbnVsbCAmJiBmaWx0ZXIuX2Jzb250eXBlID09PSAnT2JqZWN0SWQnID8geyBfaWQ6IGZpbHRlciB9IDogZmlsdGVyO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgbGV0IGZpbmRDb21tYW5kID0gbWFrZUZpbmRDb21tYW5kKHRoaXMubnMsIHRoaXMuZmlsdGVyLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuZXhwbGFpbikge1xuICAgICAgICAgICAgZmluZENvbW1hbmQgPSAoMCwgdXRpbHNfMS5kZWNvcmF0ZVdpdGhFeHBsYWluKShmaW5kQ29tbWFuZCwgdGhpcy5leHBsYWluKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VydmVyLmNvbW1hbmRBc3luYyh0aGlzLm5zLCBmaW5kQ29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgLi4udGhpcy5ic29uT3B0aW9ucyxcbiAgICAgICAgICAgIGRvY3VtZW50c1JldHVybmVkSW46ICdmaXJzdEJhdGNoJyxcbiAgICAgICAgICAgIHNlc3Npb25cbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5GaW5kT3BlcmF0aW9uID0gRmluZE9wZXJhdGlvbjtcbmZ1bmN0aW9uIG1ha2VGaW5kQ29tbWFuZChucywgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZmluZENvbW1hbmQgPSB7XG4gICAgICAgIGZpbmQ6IG5zLmNvbGxlY3Rpb24sXG4gICAgICAgIGZpbHRlclxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMuc29ydCkge1xuICAgICAgICBmaW5kQ29tbWFuZC5zb3J0ID0gKDAsIHNvcnRfMS5mb3JtYXRTb3J0KShvcHRpb25zLnNvcnQpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5wcm9qZWN0aW9uKSB7XG4gICAgICAgIGxldCBwcm9qZWN0aW9uID0gb3B0aW9ucy5wcm9qZWN0aW9uO1xuICAgICAgICBpZiAocHJvamVjdGlvbiAmJiBBcnJheS5pc0FycmF5KHByb2plY3Rpb24pKSB7XG4gICAgICAgICAgICBwcm9qZWN0aW9uID0gcHJvamVjdGlvbi5sZW5ndGhcbiAgICAgICAgICAgICAgICA/IHByb2plY3Rpb24ucmVkdWNlKChyZXN1bHQsIGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtmaWVsZF0gPSAxO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0sIHt9KVxuICAgICAgICAgICAgICAgIDogeyBfaWQ6IDEgfTtcbiAgICAgICAgfVxuICAgICAgICBmaW5kQ29tbWFuZC5wcm9qZWN0aW9uID0gcHJvamVjdGlvbjtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuaGludCkge1xuICAgICAgICBmaW5kQ29tbWFuZC5oaW50ID0gKDAsIHV0aWxzXzEubm9ybWFsaXplSGludEZpZWxkKShvcHRpb25zLmhpbnQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuc2tpcCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZmluZENvbW1hbmQuc2tpcCA9IG9wdGlvbnMuc2tpcDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAob3B0aW9ucy5saW1pdCA8IDApIHtcbiAgICAgICAgICAgIGZpbmRDb21tYW5kLmxpbWl0ID0gLW9wdGlvbnMubGltaXQ7XG4gICAgICAgICAgICBmaW5kQ29tbWFuZC5zaW5nbGVCYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmaW5kQ29tbWFuZC5saW1pdCA9IG9wdGlvbnMubGltaXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmJhdGNoU2l6ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYmF0Y2hTaXplIDwgMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubGltaXQgJiZcbiAgICAgICAgICAgICAgICBvcHRpb25zLmxpbWl0ICE9PSAwICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMob3B0aW9ucy5iYXRjaFNpemUpIDwgTWF0aC5hYnMob3B0aW9ucy5saW1pdCkpIHtcbiAgICAgICAgICAgICAgICBmaW5kQ29tbWFuZC5saW1pdCA9IC1vcHRpb25zLmJhdGNoU2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmRDb21tYW5kLnNpbmdsZUJhdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZpbmRDb21tYW5kLmJhdGNoU2l6ZSA9IG9wdGlvbnMuYmF0Y2hTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zaW5nbGVCYXRjaCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGZpbmRDb21tYW5kLnNpbmdsZUJhdGNoID0gb3B0aW9ucy5zaW5nbGVCYXRjaDtcbiAgICB9XG4gICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZmluZENvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLm1heFRpbWVNUyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZmluZENvbW1hbmQubWF4VGltZU1TID0gb3B0aW9ucy5tYXhUaW1lTVM7XG4gICAgfVxuICAgIGNvbnN0IHJlYWRDb25jZXJuID0gcmVhZF9jb25jZXJuXzEuUmVhZENvbmNlcm4uZnJvbU9wdGlvbnMob3B0aW9ucyk7XG4gICAgaWYgKHJlYWRDb25jZXJuKSB7XG4gICAgICAgIGZpbmRDb21tYW5kLnJlYWRDb25jZXJuID0gcmVhZENvbmNlcm4udG9KU09OKCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLm1heCkge1xuICAgICAgICBmaW5kQ29tbWFuZC5tYXggPSBvcHRpb25zLm1heDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubWluKSB7XG4gICAgICAgIGZpbmRDb21tYW5kLm1pbiA9IG9wdGlvbnMubWluO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmV0dXJuS2V5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgZmluZENvbW1hbmQucmV0dXJuS2V5ID0gb3B0aW9ucy5yZXR1cm5LZXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zaG93UmVjb3JkSWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5zaG93UmVjb3JkSWQgPSBvcHRpb25zLnNob3dSZWNvcmRJZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnRhaWxhYmxlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgZmluZENvbW1hbmQudGFpbGFibGUgPSBvcHRpb25zLnRhaWxhYmxlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMub3Bsb2dSZXBsYXkgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5vcGxvZ1JlcGxheSA9IG9wdGlvbnMub3Bsb2dSZXBsYXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50aW1lb3V0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgZmluZENvbW1hbmQubm9DdXJzb3JUaW1lb3V0ID0gIW9wdGlvbnMudGltZW91dDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubm9DdXJzb3JUaW1lb3V0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgZmluZENvbW1hbmQubm9DdXJzb3JUaW1lb3V0ID0gb3B0aW9ucy5ub0N1cnNvclRpbWVvdXQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hd2FpdERhdGEgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5hd2FpdERhdGEgPSBvcHRpb25zLmF3YWl0RGF0YTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmFsbG93UGFydGlhbFJlc3VsdHMgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5hbGxvd1BhcnRpYWxSZXN1bHRzID0gb3B0aW9ucy5hbGxvd1BhcnRpYWxSZXN1bHRzO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jb2xsYXRpb24pIHtcbiAgICAgICAgZmluZENvbW1hbmQuY29sbGF0aW9uID0gb3B0aW9ucy5jb2xsYXRpb247XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5hbGxvd0Rpc2tVc2UgPT09ICdib29sZWFuJykge1xuICAgICAgICBmaW5kQ29tbWFuZC5hbGxvd0Rpc2tVc2UgPSBvcHRpb25zLmFsbG93RGlza1VzZTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubGV0KSB7XG4gICAgICAgIGZpbmRDb21tYW5kLmxldCA9IG9wdGlvbnMubGV0O1xuICAgIH1cbiAgICByZXR1cm4gZmluZENvbW1hbmQ7XG59XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoRmluZE9wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5FWFBMQUlOQUJMRSxcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuQ1VSU09SX0NSRUFUSU5HXG5dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/find.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/find_and_modify.js":
/*!*****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/find_and_modify.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FindOneAndUpdateOperation = exports.FindOneAndReplaceOperation = exports.FindOneAndDeleteOperation = exports.ReturnDocument = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst sort_1 = __webpack_require__(/*! ../sort */ \"(ssr)/../../../../../node_modules/mongodb/lib/sort.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @public */\nexports.ReturnDocument = Object.freeze({\n    BEFORE: 'before',\n    AFTER: 'after'\n});\nfunction configureFindAndModifyCmdBaseUpdateOpts(cmdBase, options) {\n    cmdBase.new = options.returnDocument === exports.ReturnDocument.AFTER;\n    cmdBase.upsert = options.upsert === true;\n    if (options.bypassDocumentValidation === true) {\n        cmdBase.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    return cmdBase;\n}\n/** @internal */\nclass FindAndModifyOperation extends command_1.CommandOperation {\n    constructor(collection, query, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.cmdBase = {\n            remove: false,\n            new: false,\n            upsert: false\n        };\n        options.includeResultMetadata ??= false;\n        const sort = (0, sort_1.formatSort)(options.sort);\n        if (sort) {\n            this.cmdBase.sort = sort;\n        }\n        if (options.projection) {\n            this.cmdBase.fields = options.projection;\n        }\n        if (options.maxTimeMS) {\n            this.cmdBase.maxTimeMS = options.maxTimeMS;\n        }\n        // Decorate the findAndModify command with the write Concern\n        if (options.writeConcern) {\n            this.cmdBase.writeConcern = options.writeConcern;\n        }\n        if (options.let) {\n            this.cmdBase.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            this.cmdBase.comment = options.comment;\n        }\n        // force primary read preference\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.collection = collection;\n        this.query = query;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const query = this.query;\n        const options = { ...this.options, ...this.bsonOptions };\n        // Create findAndModify command object\n        const cmd = {\n            findAndModify: coll.collectionName,\n            query: query,\n            ...this.cmdBase\n        };\n        // Have we specified collation\n        try {\n            (0, utils_1.decorateWithCollation)(cmd, coll, options);\n        }\n        catch (err) {\n            return err;\n        }\n        if (options.hint) {\n            // TODO: once this method becomes a CommandOperation we will have the server\n            // in place to check.\n            const unacknowledgedWrite = this.writeConcern?.w === 0;\n            if (unacknowledgedWrite || (0, utils_1.maxWireVersion)(server) < 8) {\n                throw new error_1.MongoCompatibilityError('The current topology does not support a hint on findAndModify commands');\n            }\n            cmd.hint = options.hint;\n        }\n        // Execute the command\n        const result = await super.executeCommand(server, session, cmd);\n        return options.includeResultMetadata ? result : result.value ?? null;\n    }\n}\n/** @internal */\nclass FindOneAndDeleteOperation extends FindAndModifyOperation {\n    constructor(collection, filter, options) {\n        // Basic validation\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        super(collection, filter, options);\n        this.cmdBase.remove = true;\n    }\n}\nexports.FindOneAndDeleteOperation = FindOneAndDeleteOperation;\n/** @internal */\nclass FindOneAndReplaceOperation extends FindAndModifyOperation {\n    constructor(collection, filter, replacement, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (replacement == null || typeof replacement !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"replacement\" must be an object');\n        }\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = replacement;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n    }\n}\nexports.FindOneAndReplaceOperation = FindOneAndReplaceOperation;\n/** @internal */\nclass FindOneAndUpdateOperation extends FindAndModifyOperation {\n    constructor(collection, filter, update, options) {\n        if (filter == null || typeof filter !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"filter\" must be an object');\n        }\n        if (update == null || typeof update !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('Argument \"update\" must be an object');\n        }\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n        super(collection, filter, options);\n        this.cmdBase.update = update;\n        configureFindAndModifyCmdBaseUpdateOpts(this.cmdBase, options);\n        if (options.arrayFilters) {\n            this.cmdBase.arrayFilters = options.arrayFilters;\n        }\n    }\n}\nexports.FindOneAndUpdateOperation = FindOneAndUpdateOperation;\n(0, operation_1.defineAspects)(FindAndModifyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.EXPLAINABLE\n]);\n//# sourceMappingURL=find_and_modify.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/find_and_modify.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/get_more.js":
/*!**********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/get_more.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GetMoreOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass GetMoreOperation extends operation_1.AbstractOperation {\n    constructor(ns, cursorId, server, options) {\n        super(options);\n        this.options = options;\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    /**\n     * Although there is a server already associated with the get more operation, the signature\n     * for execute passes a server so we will just use that one.\n     */\n    async execute(server, _session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Getmore must run on the same server operation began on');\n        }\n        if (this.cursorId == null || this.cursorId.isZero()) {\n            throw new error_1.MongoRuntimeError('Unable to iterate cursor with no id');\n        }\n        const collection = this.ns.collection;\n        if (collection == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before getMore');\n        }\n        const getMoreCmd = {\n            getMore: this.cursorId,\n            collection\n        };\n        if (typeof this.options.batchSize === 'number') {\n            getMoreCmd.batchSize = Math.abs(this.options.batchSize);\n        }\n        if (typeof this.options.maxAwaitTimeMS === 'number') {\n            getMoreCmd.maxTimeMS = this.options.maxAwaitTimeMS;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (this.options.comment !== undefined && (0, utils_1.maxWireVersion)(server) >= 9) {\n            getMoreCmd.comment = this.options.comment;\n        }\n        const commandOptions = {\n            returnFieldSelector: null,\n            documentsReturnedIn: 'nextBatch',\n            ...this.options\n        };\n        return server.commandAsync(this.ns, getMoreCmd, commandOptions);\n    }\n}\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=get_more.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvZ2V0X21vcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9nZXRfbW9yZS5qcz9kOWU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HZXRNb3JlT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEdldE1vcmVPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IobnMsIGN1cnNvcklkLCBzZXJ2ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgdGhpcy5jdXJzb3JJZCA9IGN1cnNvcklkO1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWx0aG91Z2ggdGhlcmUgaXMgYSBzZXJ2ZXIgYWxyZWFkeSBhc3NvY2lhdGVkIHdpdGggdGhlIGdldCBtb3JlIG9wZXJhdGlvbiwgdGhlIHNpZ25hdHVyZVxuICAgICAqIGZvciBleGVjdXRlIHBhc3NlcyBhIHNlcnZlciBzbyB3ZSB3aWxsIGp1c3QgdXNlIHRoYXQgb25lLlxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBfc2Vzc2lvbikge1xuICAgICAgICBpZiAoc2VydmVyICE9PSB0aGlzLnNlcnZlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ0dldG1vcmUgbXVzdCBydW4gb24gdGhlIHNhbWUgc2VydmVyIG9wZXJhdGlvbiBiZWdhbiBvbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmN1cnNvcklkID09IG51bGwgfHwgdGhpcy5jdXJzb3JJZC5pc1plcm8oKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ1VuYWJsZSB0byBpdGVyYXRlIGN1cnNvciB3aXRoIG5vIGlkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29sbGVjdGlvbiA9IHRoaXMubnMuY29sbGVjdGlvbjtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQ3Vyc29ycyBzaG91bGQgaGF2ZSBhZG9wdGVkIHRoZSBuYW1lc3BhY2UgcmV0dXJuZWQgYnkgTW9uZ29EQlxuICAgICAgICAgICAgLy8gd2hpY2ggc2hvdWxkIGFsd2F5cyBkZWZpbmVkIGEgY29sbGVjdGlvbiBuYW1lIChldmVuIGEgcHNldWRvIG9uZSwgZXguIGRiLmFnZ3JlZ2F0ZSgpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ0EgY29sbGVjdGlvbiBuYW1lIG11c3QgYmUgZGV0ZXJtaW5lZCBiZWZvcmUgZ2V0TW9yZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGdldE1vcmVDbWQgPSB7XG4gICAgICAgICAgICBnZXRNb3JlOiB0aGlzLmN1cnNvcklkLFxuICAgICAgICAgICAgY29sbGVjdGlvblxuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5iYXRjaFNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBnZXRNb3JlQ21kLmJhdGNoU2l6ZSA9IE1hdGguYWJzKHRoaXMub3B0aW9ucy5iYXRjaFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm1heEF3YWl0VGltZU1TID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZ2V0TW9yZUNtZC5tYXhUaW1lTVMgPSB0aGlzLm9wdGlvbnMubWF4QXdhaXRUaW1lTVM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkICYmICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpID49IDkpIHtcbiAgICAgICAgICAgIGdldE1vcmVDbWQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbW1hbmRPcHRpb25zID0ge1xuICAgICAgICAgICAgcmV0dXJuRmllbGRTZWxlY3RvcjogbnVsbCxcbiAgICAgICAgICAgIGRvY3VtZW50c1JldHVybmVkSW46ICduZXh0QmF0Y2gnLFxuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzZXJ2ZXIuY29tbWFuZEFzeW5jKHRoaXMubnMsIGdldE1vcmVDbWQsIGNvbW1hbmRPcHRpb25zKTtcbiAgICB9XG59XG5leHBvcnRzLkdldE1vcmVPcGVyYXRpb24gPSBHZXRNb3JlT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEdldE1vcmVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT04sIG9wZXJhdGlvbl8xLkFzcGVjdC5NVVNUX1NFTEVDVF9TQU1FX1NFUlZFUl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0X21vcmUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/get_more.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/indexes.js":
/*!*********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/indexes.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\nconst VALID_INDEX_OPTIONS = new Set([\n    'background',\n    'unique',\n    'name',\n    'partialFilterExpression',\n    'sparse',\n    'hidden',\n    'expireAfterSeconds',\n    'storageEngine',\n    'collation',\n    'version',\n    // text indexes\n    'weights',\n    'default_language',\n    'language_override',\n    'textIndexVersion',\n    // 2d-sphere indexes\n    '2dsphereIndexVersion',\n    // 2d indexes\n    'bits',\n    'min',\n    'max',\n    // geoHaystack Indexes\n    'bucketSize',\n    // wildcard indexes\n    'wildcardProjection'\n]);\nfunction isIndexDirection(x) {\n    return (typeof x === 'number' || x === '2d' || x === '2dsphere' || x === 'text' || x === 'geoHaystack');\n}\nfunction isSingleIndexTuple(t) {\n    return Array.isArray(t) && t.length === 2 && isIndexDirection(t[1]);\n}\nfunction makeIndexSpec(indexSpec, options) {\n    const key = new Map();\n    const indexSpecs = !Array.isArray(indexSpec) || isSingleIndexTuple(indexSpec) ? [indexSpec] : indexSpec;\n    // Iterate through array and handle different types\n    for (const spec of indexSpecs) {\n        if (typeof spec === 'string') {\n            key.set(spec, 1);\n        }\n        else if (Array.isArray(spec)) {\n            key.set(spec[0], spec[1] ?? 1);\n        }\n        else if (spec instanceof Map) {\n            for (const [property, value] of spec) {\n                key.set(property, value);\n            }\n        }\n        else if ((0, utils_1.isObject)(spec)) {\n            for (const [property, value] of Object.entries(spec)) {\n                key.set(property, value);\n            }\n        }\n    }\n    return { ...options, key };\n}\n/** @internal */\nclass IndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(_server, session) {\n        const coll = this.collection;\n        const options = this.options;\n        return (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            full: true,\n            ...options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n    constructor(parent, collectionName, indexes, options) {\n        super(parent, options);\n        this.options = options ?? {};\n        this.collectionName = collectionName;\n        this.indexes = indexes.map(userIndex => {\n            // Ensure the key is a Map to preserve index key ordering\n            const key = userIndex.key instanceof Map ? userIndex.key : new Map(Object.entries(userIndex.key));\n            const name = userIndex.name != null ? userIndex.name : Array.from(key).flat().join('_');\n            const validIndexOptions = Object.fromEntries(Object.entries({ ...userIndex }).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName)));\n            return {\n                ...validIndexOptions,\n                name,\n                key\n            };\n        });\n    }\n    async execute(server, session) {\n        const options = this.options;\n        const indexes = this.indexes;\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cmd = { createIndexes: this.collectionName, indexes };\n        if (options.commitQuorum != null) {\n            if (serverWireVersion < 9) {\n                throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4');\n            }\n            cmd.commitQuorum = options.commitQuorum;\n        }\n        // collation is set on each index, it should not be defined at the root\n        this.options.collation = undefined;\n        await super.executeCommand(server, session, cmd);\n        const indexNames = indexes.map(index => index.name || '');\n        return indexNames;\n    }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass CreateIndexOperation extends CreateIndexesOperation {\n    constructor(parent, collectionName, indexSpec, options) {\n        super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n    }\n    async execute(server, session) {\n        const indexNames = await super.execute(server, session);\n        return indexNames[0];\n    }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */\nclass EnsureIndexOperation extends CreateIndexOperation {\n    constructor(db, collectionName, indexSpec, options) {\n        super(db, collectionName, indexSpec, options);\n        this.readPreference = read_preference_1.ReadPreference.primary;\n        this.db = db;\n        this.collectionName = collectionName;\n    }\n    async execute(server, session) {\n        const indexName = this.indexes[0].name;\n        const indexes = await this.db\n            .collection(this.collectionName)\n            .listIndexes({ session })\n            .toArray()\n            .catch(error => {\n            if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound)\n                return [];\n            throw error;\n        });\n        if (indexName && indexes.some(index => index.name === indexName))\n            return indexName;\n        return super.execute(server, session);\n    }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n    constructor(collection, indexName, options) {\n        super(collection, options);\n        this.options = options ?? {};\n        this.collection = collection;\n        this.indexName = indexName;\n    }\n    async execute(server, session) {\n        const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n    constructor(collection, options) {\n        super(collection, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.collectionNamespace = collection.s.namespace;\n    }\n    async execute(server, session) {\n        const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n        const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n        const command = { listIndexes: this.collectionNamespace.collection, cursor };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */\nclass IndexExistsOperation extends operation_1.AbstractOperation {\n    constructor(collection, indexes, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n        this.indexes = indexes;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const indexes = this.indexes;\n        const info = await (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n        // Let's check for the index names\n        if (!Array.isArray(indexes))\n            return info[indexes] != null;\n        // All keys found return true\n        return indexes.every(indexName => info[indexName] != null);\n    }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */\nclass IndexInformationOperation extends operation_1.AbstractOperation {\n    constructor(db, name, options) {\n        super(options);\n        this.options = options ?? {};\n        this.db = db;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const db = this.db;\n        const name = this.name;\n        return (0, common_functions_1.indexInformation)(db, name, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=indexes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/indexes.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/insert.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/insert.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InsertManyOperation = exports.InsertOneOperation = exports.InsertOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst write_concern_1 = __webpack_require__(/*! ../write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\nconst bulk_write_1 = __webpack_require__(/*! ./bulk_write */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/bulk_write.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst common_functions_1 = __webpack_require__(/*! ./common_functions */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/common_functions.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass InsertOperation extends command_1.CommandOperation {\n    constructor(ns, documents, options) {\n        super(undefined, options);\n        this.options = { ...options, checkKeys: options.checkKeys ?? false };\n        this.ns = ns;\n        this.documents = documents;\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            insert: this.ns.collection,\n            documents: this.documents,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.InsertOperation = InsertOperation;\nclass InsertOneOperation extends InsertOperation {\n    constructor(collection, doc, options) {\n        super(collection.s.namespace, (0, common_functions_1.prepareDocs)(collection, [doc], options), options);\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors) {\n            // This should be a WriteError but we can't change it now because of error hierarchy\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        }\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            insertedId: this.documents[0]._id\n        };\n    }\n}\nexports.InsertOneOperation = InsertOneOperation;\n/** @internal */\nclass InsertManyOperation extends operation_1.AbstractOperation {\n    constructor(collection, docs, options) {\n        super(options);\n        if (!Array.isArray(docs)) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"docs\" must be an array of documents');\n        }\n        this.options = options;\n        this.collection = collection;\n        this.docs = docs;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        const bulkWriteOperation = new bulk_write_1.BulkWriteOperation(coll, (0, common_functions_1.prepareDocs)(coll, this.docs, options).map(document => ({ insertOne: { document } })), options);\n        try {\n            const res = await bulkWriteOperation.execute(server, session);\n            return {\n                acknowledged: writeConcern?.w !== 0,\n                insertedCount: res.insertedCount,\n                insertedIds: res.insertedIds\n            };\n        }\n        catch (err) {\n            if (err && err.message === 'Operation must be an object with an operation key') {\n                throw new error_1.MongoInvalidArgumentError('Collection.insertMany() cannot be called with an array that has null/undefined values');\n            }\n            throw err;\n        }\n    }\n}\nexports.InsertManyOperation = InsertManyOperation;\n(0, operation_1.defineAspects)(InsertOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertOneOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(InsertManyOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=insert.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaW5zZXJ0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLDBCQUEwQixHQUFHLHVCQUF1QjtBQUNsRixnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyx3QkFBd0IsbUJBQU8sQ0FBQyx3RkFBa0I7QUFDbEQscUJBQXFCLG1CQUFPLENBQUMsNEZBQWM7QUFDM0Msa0JBQWtCLG1CQUFPLENBQUMsc0ZBQVc7QUFDckMsMkJBQTJCLG1CQUFPLENBQUMsd0dBQW9CO0FBQ3ZELG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLDhKQUE4SixhQUFhLFlBQVk7QUFDdkw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pbnNlcnQuanM/MTg3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW5zZXJ0TWFueU9wZXJhdGlvbiA9IGV4cG9ydHMuSW5zZXJ0T25lT3BlcmF0aW9uID0gZXhwb3J0cy5JbnNlcnRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3Qgd3JpdGVfY29uY2Vybl8xID0gcmVxdWlyZShcIi4uL3dyaXRlX2NvbmNlcm5cIik7XG5jb25zdCBidWxrX3dyaXRlXzEgPSByZXF1aXJlKFwiLi9idWxrX3dyaXRlXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IGNvbW1vbl9mdW5jdGlvbnNfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbl9mdW5jdGlvbnNcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIEluc2VydE9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihucywgZG9jdW1lbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHsgLi4ub3B0aW9ucywgY2hlY2tLZXlzOiBvcHRpb25zLmNoZWNrS2V5cyA/PyBmYWxzZSB9O1xuICAgICAgICB0aGlzLm5zID0gbnM7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRzID0gZG9jdW1lbnRzO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zID8/IHt9O1xuICAgICAgICBjb25zdCBvcmRlcmVkID0gdHlwZW9mIG9wdGlvbnMub3JkZXJlZCA9PT0gJ2Jvb2xlYW4nID8gb3B0aW9ucy5vcmRlcmVkIDogdHJ1ZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGluc2VydDogdGhpcy5ucy5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgZG9jdW1lbnRzOiB0aGlzLmRvY3VtZW50cyxcbiAgICAgICAgICAgIG9yZGVyZWRcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjb21tYW5kLmJ5cGFzc0RvY3VtZW50VmFsaWRhdGlvbiA9IG9wdGlvbnMuYnlwYXNzRG9jdW1lbnRWYWxpZGF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAob3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IG9wdGlvbnMuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICB9XG59XG5leHBvcnRzLkluc2VydE9wZXJhdGlvbiA9IEluc2VydE9wZXJhdGlvbjtcbmNsYXNzIEluc2VydE9uZU9wZXJhdGlvbiBleHRlbmRzIEluc2VydE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgZG9jLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGNvbGxlY3Rpb24ucy5uYW1lc3BhY2UsICgwLCBjb21tb25fZnVuY3Rpb25zXzEucHJlcGFyZURvY3MpKGNvbGxlY3Rpb24sIFtkb2NdLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHN1cGVyLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgaWYgKHJlcy5jb2RlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvcihyZXMpO1xuICAgICAgICBpZiAocmVzLndyaXRlRXJyb3JzKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHNob3VsZCBiZSBhIFdyaXRlRXJyb3IgYnV0IHdlIGNhbid0IGNoYW5nZSBpdCBub3cgYmVjYXVzZSBvZiBlcnJvciBoaWVyYXJjaHlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvU2VydmVyRXJyb3IocmVzLndyaXRlRXJyb3JzWzBdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB0aGlzLndyaXRlQ29uY2Vybj8udyAhPT0gMCxcbiAgICAgICAgICAgIGluc2VydGVkSWQ6IHRoaXMuZG9jdW1lbnRzWzBdLl9pZFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuSW5zZXJ0T25lT3BlcmF0aW9uID0gSW5zZXJ0T25lT3BlcmF0aW9uO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgSW5zZXJ0TWFueU9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkb2NzLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZG9jcykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0FyZ3VtZW50IFwiZG9jc1wiIG11c3QgYmUgYW4gYXJyYXkgb2YgZG9jdW1lbnRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5kb2NzID0gZG9jcztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY29sbCA9IHRoaXMuY29sbGVjdGlvbjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgLi4udGhpcy5vcHRpb25zLCAuLi50aGlzLmJzb25PcHRpb25zLCByZWFkUHJlZmVyZW5jZTogdGhpcy5yZWFkUHJlZmVyZW5jZSB9O1xuICAgICAgICBjb25zdCB3cml0ZUNvbmNlcm4gPSB3cml0ZV9jb25jZXJuXzEuV3JpdGVDb25jZXJuLmZyb21PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBidWxrV3JpdGVPcGVyYXRpb24gPSBuZXcgYnVsa193cml0ZV8xLkJ1bGtXcml0ZU9wZXJhdGlvbihjb2xsLCAoMCwgY29tbW9uX2Z1bmN0aW9uc18xLnByZXBhcmVEb2NzKShjb2xsLCB0aGlzLmRvY3MsIG9wdGlvbnMpLm1hcChkb2N1bWVudCA9PiAoeyBpbnNlcnRPbmU6IHsgZG9jdW1lbnQgfSB9KSksIG9wdGlvbnMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgYnVsa1dyaXRlT3BlcmF0aW9uLmV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWNrbm93bGVkZ2VkOiB3cml0ZUNvbmNlcm4/LncgIT09IDAsXG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWRDb3VudDogcmVzLmluc2VydGVkQ291bnQsXG4gICAgICAgICAgICAgICAgaW5zZXJ0ZWRJZHM6IHJlcy5pbnNlcnRlZElkc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoZXJyICYmIGVyci5tZXNzYWdlID09PSAnT3BlcmF0aW9uIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYW4gb3BlcmF0aW9uIGtleScpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdDb2xsZWN0aW9uLmluc2VydE1hbnkoKSBjYW5ub3QgYmUgY2FsbGVkIHdpdGggYW4gYXJyYXkgdGhhdCBoYXMgbnVsbC91bmRlZmluZWQgdmFsdWVzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkluc2VydE1hbnlPcGVyYXRpb24gPSBJbnNlcnRNYW55T3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKEluc2VydE9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5SRVRSWUFCTEUsIG9wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShJbnNlcnRPbmVPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLCBvcGVyYXRpb25fMS5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OXSk7XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoSW5zZXJ0TWFueU9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc2VydC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/insert.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/is_capped.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/is_capped.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IsCappedOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass IsCappedOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return !!collection.options?.capped;\n    }\n}\nexports.IsCappedOperation = IsCappedOperation;\n//# sourceMappingURL=is_capped.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvaXNfY2FwcGVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQiwyQkFBMkIsSUFBSSxnRkFBZ0Y7QUFDOUk7QUFDQTtBQUNBLDBEQUEwRCxnQkFBZ0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9pc19jYXBwZWQuanM/ZjhhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSXNDYXBwZWRPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBJc0NhcHBlZE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb2xsID0gdGhpcy5jb2xsZWN0aW9uO1xuICAgICAgICBjb25zdCBbY29sbGVjdGlvbl0gPSBhd2FpdCBjb2xsLnMuZGJcbiAgICAgICAgICAgIC5saXN0Q29sbGVjdGlvbnMoeyBuYW1lOiBjb2xsLmNvbGxlY3Rpb25OYW1lIH0sIHsgLi4udGhpcy5vcHRpb25zLCBuYW1lT25seTogZmFsc2UsIHJlYWRQcmVmZXJlbmNlOiB0aGlzLnJlYWRQcmVmZXJlbmNlLCBzZXNzaW9uIH0pXG4gICAgICAgICAgICAudG9BcnJheSgpO1xuICAgICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsIHx8IGNvbGxlY3Rpb24ub3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0FQSUVycm9yKGBjb2xsZWN0aW9uICR7Y29sbC5uYW1lc3BhY2V9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhIWNvbGxlY3Rpb24ub3B0aW9ucz8uY2FwcGVkO1xuICAgIH1cbn1cbmV4cG9ydHMuSXNDYXBwZWRPcGVyYXRpb24gPSBJc0NhcHBlZE9wZXJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzX2NhcHBlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/is_capped.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/kill_cursors.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/kill_cursors.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.KillCursorsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\nclass KillCursorsOperation extends operation_1.AbstractOperation {\n    constructor(cursorId, ns, server, options) {\n        super(options);\n        this.ns = ns;\n        this.cursorId = cursorId;\n        this.server = server;\n    }\n    async execute(server, session) {\n        if (server !== this.server) {\n            throw new error_1.MongoRuntimeError('Killcursor must run on the same server operation began on');\n        }\n        const killCursors = this.ns.collection;\n        if (killCursors == null) {\n            // Cursors should have adopted the namespace returned by MongoDB\n            // which should always defined a collection name (even a pseudo one, ex. db.aggregate())\n            throw new error_1.MongoRuntimeError('A collection name must be determined before killCursors');\n        }\n        const killCursorsCommand = {\n            killCursors,\n            cursors: [this.cursorId]\n        };\n        try {\n            await server.commandAsync(this.ns, killCursorsCommand, { session });\n        }\n        catch {\n            // The driver should never emit errors from killCursors, this is spec-ed behavior\n        }\n    }\n}\nexports.KillCursorsOperation = KillCursorsOperation;\n(0, operation_1.defineAspects)(KillCursorsOperation, [operation_1.Aspect.MUST_SELECT_SAME_SERVER]);\n//# sourceMappingURL=kill_cursors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMva2lsbF9jdXJzb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxTQUFTO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMva2lsbF9jdXJzb3JzLmpzP2E1ZTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLktpbGxDdXJzb3JzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuY2xhc3MgS2lsbEN1cnNvcnNPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY3Vyc29ySWQsIG5zLCBzZXJ2ZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMubnMgPSBucztcbiAgICAgICAgdGhpcy5jdXJzb3JJZCA9IGN1cnNvcklkO1xuICAgICAgICB0aGlzLnNlcnZlciA9IHNlcnZlcjtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlcnZlciAhPT0gdGhpcy5zZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdLaWxsY3Vyc29yIG11c3QgcnVuIG9uIHRoZSBzYW1lIHNlcnZlciBvcGVyYXRpb24gYmVnYW4gb24nKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBraWxsQ3Vyc29ycyA9IHRoaXMubnMuY29sbGVjdGlvbjtcbiAgICAgICAgaWYgKGtpbGxDdXJzb3JzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEN1cnNvcnMgc2hvdWxkIGhhdmUgYWRvcHRlZCB0aGUgbmFtZXNwYWNlIHJldHVybmVkIGJ5IE1vbmdvREJcbiAgICAgICAgICAgIC8vIHdoaWNoIHNob3VsZCBhbHdheXMgZGVmaW5lZCBhIGNvbGxlY3Rpb24gbmFtZSAoZXZlbiBhIHBzZXVkbyBvbmUsIGV4LiBkYi5hZ2dyZWdhdGUoKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdBIGNvbGxlY3Rpb24gbmFtZSBtdXN0IGJlIGRldGVybWluZWQgYmVmb3JlIGtpbGxDdXJzb3JzJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2lsbEN1cnNvcnNDb21tYW5kID0ge1xuICAgICAgICAgICAga2lsbEN1cnNvcnMsXG4gICAgICAgICAgICBjdXJzb3JzOiBbdGhpcy5jdXJzb3JJZF1cbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kQXN5bmModGhpcy5ucywga2lsbEN1cnNvcnNDb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgLy8gVGhlIGRyaXZlciBzaG91bGQgbmV2ZXIgZW1pdCBlcnJvcnMgZnJvbSBraWxsQ3Vyc29ycywgdGhpcyBpcyBzcGVjLWVkIGJlaGF2aW9yXG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLktpbGxDdXJzb3JzT3BlcmF0aW9uID0gS2lsbEN1cnNvcnNPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoS2lsbEN1cnNvcnNPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVJdKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtpbGxfY3Vyc29ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/kill_cursors.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/list_collections.js":
/*!******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/list_collections.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListCollectionsOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n    constructor(db, filter, options) {\n        super(db, options);\n        this.options = { ...options };\n        delete this.options.writeConcern;\n        this.db = db;\n        this.filter = filter;\n        this.nameOnly = !!this.options.nameOnly;\n        this.authorizedCollections = !!this.options.authorizedCollections;\n        if (typeof this.options.batchSize === 'number') {\n            this.batchSize = this.options.batchSize;\n        }\n    }\n    async execute(server, session) {\n        return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)));\n    }\n    /* This is here for the purpose of unit testing the final command that gets sent. */\n    generateCommand(wireVersion) {\n        const command = {\n            listCollections: 1,\n            filter: this.filter,\n            cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n            nameOnly: this.nameOnly,\n            authorizedCollections: this.authorizedCollections\n        };\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (wireVersion >= 9 && this.options.comment !== undefined) {\n            command.comment = this.options.comment;\n        }\n        return command;\n    }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [\n    operation_1.Aspect.READ_OPERATION,\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.CURSOR_CREATING\n]);\n//# sourceMappingURL=list_collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbGlzdF9jb2xsZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0M7QUFDaEMsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsc0ZBQVc7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsMEZBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw0QkFBNEIsSUFBSTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL2xpc3RfY29sbGVjdGlvbnMuanM/ZTY4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihkYiwgZmlsdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0geyAuLi5vcHRpb25zIH07XG4gICAgICAgIGRlbGV0ZSB0aGlzLm9wdGlvbnMud3JpdGVDb25jZXJuO1xuICAgICAgICB0aGlzLmRiID0gZGI7XG4gICAgICAgIHRoaXMuZmlsdGVyID0gZmlsdGVyO1xuICAgICAgICB0aGlzLm5hbWVPbmx5ID0gISF0aGlzLm9wdGlvbnMubmFtZU9ubHk7XG4gICAgICAgIHRoaXMuYXV0aG9yaXplZENvbGxlY3Rpb25zID0gISF0aGlzLm9wdGlvbnMuYXV0aG9yaXplZENvbGxlY3Rpb25zO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5iYXRjaFNpemUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmJhdGNoU2l6ZSA9IHRoaXMub3B0aW9ucy5iYXRjaFNpemU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgdGhpcy5nZW5lcmF0ZUNvbW1hbmQoKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikpKTtcbiAgICB9XG4gICAgLyogVGhpcyBpcyBoZXJlIGZvciB0aGUgcHVycG9zZSBvZiB1bml0IHRlc3RpbmcgdGhlIGZpbmFsIGNvbW1hbmQgdGhhdCBnZXRzIHNlbnQuICovXG4gICAgZ2VuZXJhdGVDb21tYW5kKHdpcmVWZXJzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB7XG4gICAgICAgICAgICBsaXN0Q29sbGVjdGlvbnM6IDEsXG4gICAgICAgICAgICBmaWx0ZXI6IHRoaXMuZmlsdGVyLFxuICAgICAgICAgICAgY3Vyc29yOiB0aGlzLmJhdGNoU2l6ZSA/IHsgYmF0Y2hTaXplOiB0aGlzLmJhdGNoU2l6ZSB9IDoge30sXG4gICAgICAgICAgICBuYW1lT25seTogdGhpcy5uYW1lT25seSxcbiAgICAgICAgICAgIGF1dGhvcml6ZWRDb2xsZWN0aW9uczogdGhpcy5hdXRob3JpemVkQ29sbGVjdGlvbnNcbiAgICAgICAgfTtcbiAgICAgICAgLy8gd2UgY2hlY2sgZm9yIHVuZGVmaW5lZCBzcGVjaWZpY2FsbHkgaGVyZSB0byBhbGxvdyBmYWxzeSB2YWx1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICh3aXJlVmVyc2lvbiA+PSA5ICYmIHRoaXMub3B0aW9ucy5jb21tZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIH1cbn1cbmV4cG9ydHMuTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uID0gTGlzdENvbGxlY3Rpb25zT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKExpc3RDb2xsZWN0aW9uc09wZXJhdGlvbiwgW1xuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5SRUFEX09QRVJBVElPTixcbiAgICBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFLFxuICAgIG9wZXJhdGlvbl8xLkFzcGVjdC5DVVJTT1JfQ1JFQVRJTkdcbl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlzdF9jb2xsZWN0aW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/list_collections.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/list_databases.js":
/*!****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/list_databases.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ListDatabasesOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass ListDatabasesOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options ?? {};\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    async execute(server, session) {\n        const cmd = { listDatabases: 1 };\n        if (typeof this.options.nameOnly === 'boolean') {\n            cmd.nameOnly = this.options.nameOnly;\n        }\n        if (this.options.filter) {\n            cmd.filter = this.options.filter;\n        }\n        if (typeof this.options.authorizedDatabases === 'boolean') {\n            cmd.authorizedDatabases = this.options.authorizedDatabases;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if ((0, utils_1.maxWireVersion)(server) >= 9 && this.options.comment !== undefined) {\n            cmd.comment = this.options.comment;\n        }\n        return super.executeCommand(server, session, cmd);\n    }\n}\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);\n//# sourceMappingURL=list_databases.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbGlzdF9kYXRhYmFzZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsOEJBQThCO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvbGlzdF9kYXRhYmFzZXMuanM/OWE3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGlzdERhdGFiYXNlc09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBMaXN0RGF0YWJhc2VzT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA/PyB7fTtcbiAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgY21kID0geyBsaXN0RGF0YWJhc2VzOiAxIH07XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLm5hbWVPbmx5ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGNtZC5uYW1lT25seSA9IHRoaXMub3B0aW9ucy5uYW1lT25seTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpbHRlcikge1xuICAgICAgICAgICAgY21kLmZpbHRlciA9IHRoaXMub3B0aW9ucy5maWx0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuYXV0aG9yaXplZERhdGFiYXNlcyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjbWQuYXV0aG9yaXplZERhdGFiYXNlcyA9IHRoaXMub3B0aW9ucy5hdXRob3JpemVkRGF0YWJhc2VzO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIGNoZWNrIGZvciB1bmRlZmluZWQgc3BlY2lmaWNhbGx5IGhlcmUgdG8gYWxsb3cgZmFsc3kgdmFsdWVzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoKDAsIHV0aWxzXzEubWF4V2lyZVZlcnNpb24pKHNlcnZlcikgPj0gOSAmJiB0aGlzLm9wdGlvbnMuY29tbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbWQuY29tbWVudCA9IHRoaXMub3B0aW9ucy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIGNtZCk7XG4gICAgfVxufVxuZXhwb3J0cy5MaXN0RGF0YWJhc2VzT3BlcmF0aW9uID0gTGlzdERhdGFiYXNlc09wZXJhdGlvbjtcbigwLCBvcGVyYXRpb25fMS5kZWZpbmVBc3BlY3RzKShMaXN0RGF0YWJhc2VzT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LlJFQURfT1BFUkFUSU9OLCBvcGVyYXRpb25fMS5Bc3BlY3QuUkVUUllBQkxFXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1saXN0X2RhdGFiYXNlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/list_databases.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js":
/*!***********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/operation.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defineAspects = exports.AbstractOperation = exports.Aspect = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nexports.Aspect = {\n    READ_OPERATION: Symbol('READ_OPERATION'),\n    WRITE_OPERATION: Symbol('WRITE_OPERATION'),\n    RETRYABLE: Symbol('RETRYABLE'),\n    EXPLAINABLE: Symbol('EXPLAINABLE'),\n    SKIP_COLLATION: Symbol('SKIP_COLLATION'),\n    CURSOR_CREATING: Symbol('CURSOR_CREATING'),\n    MUST_SELECT_SAME_SERVER: Symbol('MUST_SELECT_SAME_SERVER')\n};\n/** @internal */\nconst kSession = Symbol('session');\n/**\n * This class acts as a parent class for any operation and is responsible for setting this.options,\n * as well as setting and getting a session.\n * Additionally, this class implements `hasAspect`, which determines whether an operation has\n * a specific aspect.\n * @internal\n */\nclass AbstractOperation {\n    constructor(options = {}) {\n        this.readPreference = this.hasAspect(exports.Aspect.WRITE_OPERATION)\n            ? read_preference_1.ReadPreference.primary\n            : read_preference_1.ReadPreference.fromOptions(options) ?? read_preference_1.ReadPreference.primary;\n        // Pull the BSON serialize options from the already-resolved options\n        this.bsonOptions = (0, bson_1.resolveBSONOptions)(options);\n        this[kSession] = options.session != null ? options.session : undefined;\n        this.options = options;\n        this.bypassPinningCheck = !!options.bypassPinningCheck;\n        this.trySecondaryWrite = false;\n    }\n    hasAspect(aspect) {\n        const ctor = this.constructor;\n        if (ctor.aspects == null) {\n            return false;\n        }\n        return ctor.aspects.has(aspect);\n    }\n    get session() {\n        return this[kSession];\n    }\n    clearSession() {\n        this[kSession] = undefined;\n    }\n    get canRetryRead() {\n        return true;\n    }\n    get canRetryWrite() {\n        return true;\n    }\n}\nexports.AbstractOperation = AbstractOperation;\nfunction defineAspects(operation, aspects) {\n    if (!Array.isArray(aspects) && !(aspects instanceof Set)) {\n        aspects = [aspects];\n    }\n    aspects = new Set(aspects);\n    Object.defineProperty(operation, 'aspects', {\n        value: aspects,\n        writable: false\n    });\n    return aspects;\n}\nexports.defineAspects = defineAspects;\n//# sourceMappingURL=operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3BlcmF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLHlCQUF5QixHQUFHLGNBQWM7QUFDbEUsZUFBZSxtQkFBTyxDQUFDLHNFQUFTO0FBQ2hDLDBCQUEwQixtQkFBTyxDQUFDLDRGQUFvQjtBQUN0RCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9vcGVyYXRpb24uanM/YjFjYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmaW5lQXNwZWN0cyA9IGV4cG9ydHMuQWJzdHJhY3RPcGVyYXRpb24gPSBleHBvcnRzLkFzcGVjdCA9IHZvaWQgMDtcbmNvbnN0IGJzb25fMSA9IHJlcXVpcmUoXCIuLi9ic29uXCIpO1xuY29uc3QgcmVhZF9wcmVmZXJlbmNlXzEgPSByZXF1aXJlKFwiLi4vcmVhZF9wcmVmZXJlbmNlXCIpO1xuZXhwb3J0cy5Bc3BlY3QgPSB7XG4gICAgUkVBRF9PUEVSQVRJT046IFN5bWJvbCgnUkVBRF9PUEVSQVRJT04nKSxcbiAgICBXUklURV9PUEVSQVRJT046IFN5bWJvbCgnV1JJVEVfT1BFUkFUSU9OJyksXG4gICAgUkVUUllBQkxFOiBTeW1ib2woJ1JFVFJZQUJMRScpLFxuICAgIEVYUExBSU5BQkxFOiBTeW1ib2woJ0VYUExBSU5BQkxFJyksXG4gICAgU0tJUF9DT0xMQVRJT046IFN5bWJvbCgnU0tJUF9DT0xMQVRJT04nKSxcbiAgICBDVVJTT1JfQ1JFQVRJTkc6IFN5bWJvbCgnQ1VSU09SX0NSRUFUSU5HJyksXG4gICAgTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVI6IFN5bWJvbCgnTVVTVF9TRUxFQ1RfU0FNRV9TRVJWRVInKVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtTZXNzaW9uID0gU3ltYm9sKCdzZXNzaW9uJyk7XG4vKipcbiAqIFRoaXMgY2xhc3MgYWN0cyBhcyBhIHBhcmVudCBjbGFzcyBmb3IgYW55IG9wZXJhdGlvbiBhbmQgaXMgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhpcy5vcHRpb25zLFxuICogYXMgd2VsbCBhcyBzZXR0aW5nIGFuZCBnZXR0aW5nIGEgc2Vzc2lvbi5cbiAqIEFkZGl0aW9uYWxseSwgdGhpcyBjbGFzcyBpbXBsZW1lbnRzIGBoYXNBc3BlY3RgLCB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgYW4gb3BlcmF0aW9uIGhhc1xuICogYSBzcGVjaWZpYyBhc3BlY3QuXG4gKiBAaW50ZXJuYWxcbiAqL1xuY2xhc3MgQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLnJlYWRQcmVmZXJlbmNlID0gdGhpcy5oYXNBc3BlY3QoZXhwb3J0cy5Bc3BlY3QuV1JJVEVfT1BFUkFUSU9OKVxuICAgICAgICAgICAgPyByZWFkX3ByZWZlcmVuY2VfMS5SZWFkUHJlZmVyZW5jZS5wcmltYXJ5XG4gICAgICAgICAgICA6IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLmZyb21PcHRpb25zKG9wdGlvbnMpID8/IHJlYWRfcHJlZmVyZW5jZV8xLlJlYWRQcmVmZXJlbmNlLnByaW1hcnk7XG4gICAgICAgIC8vIFB1bGwgdGhlIEJTT04gc2VyaWFsaXplIG9wdGlvbnMgZnJvbSB0aGUgYWxyZWFkeS1yZXNvbHZlZCBvcHRpb25zXG4gICAgICAgIHRoaXMuYnNvbk9wdGlvbnMgPSAoMCwgYnNvbl8xLnJlc29sdmVCU09OT3B0aW9ucykob3B0aW9ucyk7XG4gICAgICAgIHRoaXNba1Nlc3Npb25dID0gb3B0aW9ucy5zZXNzaW9uICE9IG51bGwgPyBvcHRpb25zLnNlc3Npb24gOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuYnlwYXNzUGlubmluZ0NoZWNrID0gISFvcHRpb25zLmJ5cGFzc1Bpbm5pbmdDaGVjaztcbiAgICAgICAgdGhpcy50cnlTZWNvbmRhcnlXcml0ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBoYXNBc3BlY3QoYXNwZWN0KSB7XG4gICAgICAgIGNvbnN0IGN0b3IgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICBpZiAoY3Rvci5hc3BlY3RzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3Rvci5hc3BlY3RzLmhhcyhhc3BlY3QpO1xuICAgIH1cbiAgICBnZXQgc2Vzc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNba1Nlc3Npb25dO1xuICAgIH1cbiAgICBjbGVhclNlc3Npb24oKSB7XG4gICAgICAgIHRoaXNba1Nlc3Npb25dID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXQgY2FuUmV0cnlSZWFkKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IGNhblJldHJ5V3JpdGUoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuQWJzdHJhY3RPcGVyYXRpb24gPSBBYnN0cmFjdE9wZXJhdGlvbjtcbmZ1bmN0aW9uIGRlZmluZUFzcGVjdHMob3BlcmF0aW9uLCBhc3BlY3RzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFzcGVjdHMpICYmICEoYXNwZWN0cyBpbnN0YW5jZW9mIFNldCkpIHtcbiAgICAgICAgYXNwZWN0cyA9IFthc3BlY3RzXTtcbiAgICB9XG4gICAgYXNwZWN0cyA9IG5ldyBTZXQoYXNwZWN0cyk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgJ2FzcGVjdHMnLCB7XG4gICAgICAgIHZhbHVlOiBhc3BlY3RzLFxuICAgICAgICB3cml0YWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gYXNwZWN0cztcbn1cbmV4cG9ydHMuZGVmaW5lQXNwZWN0cyA9IGRlZmluZUFzcGVjdHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/options_operation.js":
/*!*******************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/options_operation.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OptionsOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass OptionsOperation extends operation_1.AbstractOperation {\n    constructor(collection, options) {\n        super(options);\n        this.options = options;\n        this.collection = collection;\n    }\n    async execute(server, session) {\n        const coll = this.collection;\n        const [collection] = await coll.s.db\n            .listCollections({ name: coll.collectionName }, { ...this.options, nameOnly: false, readPreference: this.readPreference, session })\n            .toArray();\n        if (collection == null || collection.options == null) {\n            throw new error_1.MongoAPIError(`collection ${coll.namespace} not found`);\n        }\n        return collection.options;\n    }\n}\nexports.OptionsOperation = OptionsOperation;\n//# sourceMappingURL=options_operation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvb3B0aW9uc19vcGVyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLDJCQUEyQixJQUFJLGdGQUFnRjtBQUM5STtBQUNBO0FBQ0EsMERBQTBELGdCQUFnQjtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL29wdGlvbnNfb3BlcmF0aW9uLmpzPzNhYmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9wdGlvbnNPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBPcHRpb25zT3BlcmF0aW9uIGV4dGVuZHMgb3BlcmF0aW9uXzEuQWJzdHJhY3RPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNvbGxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGwgPSB0aGlzLmNvbGxlY3Rpb247XG4gICAgICAgIGNvbnN0IFtjb2xsZWN0aW9uXSA9IGF3YWl0IGNvbGwucy5kYlxuICAgICAgICAgICAgLmxpc3RDb2xsZWN0aW9ucyh7IG5hbWU6IGNvbGwuY29sbGVjdGlvbk5hbWUgfSwgeyAuLi50aGlzLm9wdGlvbnMsIG5hbWVPbmx5OiBmYWxzZSwgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsIHNlc3Npb24gfSlcbiAgICAgICAgICAgIC50b0FycmF5KCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwgfHwgY29sbGVjdGlvbi5vcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvQVBJRXJyb3IoYGNvbGxlY3Rpb24gJHtjb2xsLm5hbWVzcGFjZX0gbm90IGZvdW5kYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24ub3B0aW9ucztcbiAgICB9XG59XG5leHBvcnRzLk9wdGlvbnNPcGVyYXRpb24gPSBPcHRpb25zT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3B0aW9uc19vcGVyYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/options_operation.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/profiling_level.js":
/*!*****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/profiling_level.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProfilingLevelOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        const doc = await super.executeCommand(server, session, { profile: -1 });\n        if (doc.ok === 1) {\n            const was = doc.was;\n            if (was === 0)\n                return 'off';\n            if (was === 1)\n                return 'slow_only';\n            if (was === 2)\n                return 'all';\n            throw new error_1.MongoUnexpectedServerResponseError(`Illegal profiling level value ${was}`);\n        }\n        else {\n            throw new error_1.MongoUnexpectedServerResponseError('Error with profile command');\n        }\n    }\n}\nexports.ProfilingLevelOperation = ProfilingLevelOperation;\n//# sourceMappingURL=profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcHJvZmlsaW5nX2xldmVsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQjtBQUMvQixnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxhQUFhO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrR0FBa0csSUFBSTtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9wcm9maWxpbmdfbGV2ZWwuanM/Y2Y5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJvZmlsaW5nTGV2ZWxPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgZG9jID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB7IHByb2ZpbGU6IC0xIH0pO1xuICAgICAgICBpZiAoZG9jLm9rID09PSAxKSB7XG4gICAgICAgICAgICBjb25zdCB3YXMgPSBkb2Mud2FzO1xuICAgICAgICAgICAgaWYgKHdhcyA9PT0gMClcbiAgICAgICAgICAgICAgICByZXR1cm4gJ29mZic7XG4gICAgICAgICAgICBpZiAod2FzID09PSAxKVxuICAgICAgICAgICAgICAgIHJldHVybiAnc2xvd19vbmx5JztcbiAgICAgICAgICAgIGlmICh3YXMgPT09IDIpXG4gICAgICAgICAgICAgICAgcmV0dXJuICdhbGwnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSWxsZWdhbCBwcm9maWxpbmcgbGV2ZWwgdmFsdWUgJHt3YXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKCdFcnJvciB3aXRoIHByb2ZpbGUgY29tbWFuZCcpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9maWxpbmdMZXZlbE9wZXJhdGlvbiA9IFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvZmlsaW5nX2xldmVsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/profiling_level.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/remove_user.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/remove_user.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RemoveUserOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RemoveUserOperation extends command_1.CommandOperation {\n    constructor(db, username, options) {\n        super(db, options);\n        this.options = options;\n        this.username = username;\n    }\n    async execute(server, session) {\n        await super.executeCommand(server, session, { dropUser: this.username });\n        return true;\n    }\n}\nexports.RemoveUserOperation = RemoveUserOperation;\n(0, operation_1.defineAspects)(RemoveUserOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=remove_user.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVtb3ZlX3VzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QseUJBQXlCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVtb3ZlX3VzZXIuanM/OTQ5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVtb3ZlVXNlck9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFJlbW92ZVVzZXJPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIHVzZXJuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGRiLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy51c2VybmFtZSA9IHVzZXJuYW1lO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBhd2FpdCBzdXBlci5leGVjdXRlQ29tbWFuZChzZXJ2ZXIsIHNlc3Npb24sIHsgZHJvcFVzZXI6IHRoaXMudXNlcm5hbWUgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuUmVtb3ZlVXNlck9wZXJhdGlvbiA9IFJlbW92ZVVzZXJPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoUmVtb3ZlVXNlck9wZXJhdGlvbiwgW29wZXJhdGlvbl8xLkFzcGVjdC5XUklURV9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlbW92ZV91c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/remove_user.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/rename.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/rename.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RenameOperation = void 0;\nconst collection_1 = __webpack_require__(/*! ../collection */ \"(ssr)/../../../../../node_modules/mongodb/lib/collection.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RenameOperation extends command_1.CommandOperation {\n    constructor(collection, newName, options) {\n        (0, utils_1.checkCollectionName)(newName);\n        super(collection, options);\n        this.collection = collection;\n        this.newName = newName;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    async execute(server, session) {\n        // Build the command\n        const renameCollection = this.collection.namespace;\n        const toCollection = this.collection.s.namespace.withCollection(this.newName).toString();\n        const dropTarget = typeof this.options.dropTarget === 'boolean' ? this.options.dropTarget : false;\n        const command = {\n            renameCollection: renameCollection,\n            to: toCollection,\n            dropTarget: dropTarget\n        };\n        await super.executeCommand(server, session, command);\n        return new collection_1.Collection(this.collection.s.db, this.newName, this.collection.s.options);\n    }\n}\nexports.RenameOperation = RenameOperation;\n(0, operation_1.defineAspects)(RenameOperation, [operation_1.Aspect.WRITE_OPERATION]);\n//# sourceMappingURL=rename.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcmVuYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QixxQkFBcUIsbUJBQU8sQ0FBQyxrRkFBZTtBQUM1QyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxrQkFBa0IsbUJBQU8sQ0FBQyxzRkFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQywwRkFBYTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3JlbmFtZS5qcz8zMWM2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZW5hbWVPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBjb2xsZWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vY29sbGVjdGlvblwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5jb25zdCBjb21tYW5kXzEgPSByZXF1aXJlKFwiLi9jb21tYW5kXCIpO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBSZW5hbWVPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbmV3TmFtZSwgb3B0aW9ucykge1xuICAgICAgICAoMCwgdXRpbHNfMS5jaGVja0NvbGxlY3Rpb25OYW1lKShuZXdOYW1lKTtcbiAgICAgICAgc3VwZXIoY29sbGVjdGlvbiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMubmV3TmFtZSA9IG5ld05hbWU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBuZXcgdXRpbHNfMS5Nb25nb0RCTmFtZXNwYWNlKCdhZG1pbicsICckY21kJyk7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIC8vIEJ1aWxkIHRoZSBjb21tYW5kXG4gICAgICAgIGNvbnN0IHJlbmFtZUNvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ubmFtZXNwYWNlO1xuICAgICAgICBjb25zdCB0b0NvbGxlY3Rpb24gPSB0aGlzLmNvbGxlY3Rpb24ucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24odGhpcy5uZXdOYW1lKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBkcm9wVGFyZ2V0ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5kcm9wVGFyZ2V0ID09PSAnYm9vbGVhbicgPyB0aGlzLm9wdGlvbnMuZHJvcFRhcmdldCA6IGZhbHNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgcmVuYW1lQ29sbGVjdGlvbjogcmVuYW1lQ29sbGVjdGlvbixcbiAgICAgICAgICAgIHRvOiB0b0NvbGxlY3Rpb24sXG4gICAgICAgICAgICBkcm9wVGFyZ2V0OiBkcm9wVGFyZ2V0XG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgY29tbWFuZCk7XG4gICAgICAgIHJldHVybiBuZXcgY29sbGVjdGlvbl8xLkNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uLnMuZGIsIHRoaXMubmV3TmFtZSwgdGhpcy5jb2xsZWN0aW9uLnMub3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5SZW5hbWVPcGVyYXRpb24gPSBSZW5hbWVPcGVyYXRpb247XG4oMCwgb3BlcmF0aW9uXzEuZGVmaW5lQXNwZWN0cykoUmVuYW1lT3BlcmF0aW9uLCBbb3BlcmF0aW9uXzEuQXNwZWN0LldSSVRFX09QRVJBVElPTl0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVuYW1lLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/rename.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/run_command.js":
/*!*************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/run_command.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RunAdminCommandOperation = exports.RunCommandOperation = void 0;\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass RunCommandOperation extends operation_1.AbstractOperation {\n    constructor(parent, command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = parent.s.namespace.withCollection('$cmd');\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.commandAsync(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunCommandOperation = RunCommandOperation;\nclass RunAdminCommandOperation extends operation_1.AbstractOperation {\n    constructor(command, options) {\n        super(options);\n        this.command = command;\n        this.options = options;\n        this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n    }\n    async execute(server, session) {\n        this.server = server;\n        return server.commandAsync(this.ns, this.command, {\n            ...this.options,\n            readPreference: this.readPreference,\n            session\n        });\n    }\n}\nexports.RunAdminCommandOperation = RunAdminCommandOperation;\n//# sourceMappingURL=run_command.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcnVuX2NvbW1hbmQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsMkJBQTJCO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLHdFQUFVO0FBQ2xDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvcnVuX2NvbW1hbmQuanM/YmNlZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uID0gZXhwb3J0cy5SdW5Db21tYW5kT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcbmNvbnN0IG9wZXJhdGlvbl8xID0gcmVxdWlyZShcIi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUnVuQ29tbWFuZE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQsIGNvbW1hbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29tbWFuZCA9IGNvbW1hbmQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnMgPSBwYXJlbnQucy5uYW1lc3BhY2Uud2l0aENvbGxlY3Rpb24oJyRjbWQnKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgICAgIHJldHVybiBzZXJ2ZXIuY29tbWFuZEFzeW5jKHRoaXMubnMsIHRoaXMuY29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuQ29tbWFuZE9wZXJhdGlvbiA9IFJ1bkNvbW1hbmRPcGVyYXRpb247XG5jbGFzcyBSdW5BZG1pbkNvbW1hbmRPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29tbWFuZCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jb21tYW5kID0gY29tbWFuZDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5ucyA9IG5ldyB1dGlsc18xLk1vbmdvREJOYW1lc3BhY2UoJ2FkbWluJywgJyRjbWQnKTtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgdGhpcy5zZXJ2ZXIgPSBzZXJ2ZXI7XG4gICAgICAgIHJldHVybiBzZXJ2ZXIuY29tbWFuZEFzeW5jKHRoaXMubnMsIHRoaXMuY29tbWFuZCwge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcmVhZFByZWZlcmVuY2U6IHRoaXMucmVhZFByZWZlcmVuY2UsXG4gICAgICAgICAgICBzZXNzaW9uXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uID0gUnVuQWRtaW5Db21tYW5kT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVuX2NvbW1hbmQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/run_command.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/create.js":
/*!***********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/search_indexes/create.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CreateSearchIndexesOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass CreateSearchIndexesOperation extends operation_1.AbstractOperation {\n    constructor(collection, descriptions) {\n        super();\n        this.collection = collection;\n        this.descriptions = descriptions;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            createSearchIndexes: namespace.collection,\n            indexes: this.descriptions\n        };\n        const res = await server.commandAsync(namespace, command, { session });\n        const indexesCreated = res?.indexesCreated ?? [];\n        return indexesCreated.map(({ name }) => name);\n    }\n}\nexports.CreateSearchIndexesOperation = CreateSearchIndexesOperation;\n//# sourceMappingURL=create.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvY3JlYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQztBQUNwQyxvQkFBb0IsbUJBQU8sQ0FBQywyRkFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxTQUFTO0FBQzdFO0FBQ0EscUNBQXFDLE1BQU07QUFDM0M7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9vcGVyYXRpb25zL3NlYXJjaF9pbmRleGVzL2NyZWF0ZS5qcz8yMDFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uID0gdm9pZCAwO1xuY29uc3Qgb3BlcmF0aW9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0aW9uXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgQ3JlYXRlU2VhcmNoSW5kZXhlc09wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBkZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbnMgPSBkZXNjcmlwdGlvbnM7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY29sbGVjdGlvbi5mdWxsTmFtZXNwYWNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgY3JlYXRlU2VhcmNoSW5kZXhlczogbmFtZXNwYWNlLmNvbGxlY3Rpb24sXG4gICAgICAgICAgICBpbmRleGVzOiB0aGlzLmRlc2NyaXB0aW9uc1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBzZXJ2ZXIuY29tbWFuZEFzeW5jKG5hbWVzcGFjZSwgY29tbWFuZCwgeyBzZXNzaW9uIH0pO1xuICAgICAgICBjb25zdCBpbmRleGVzQ3JlYXRlZCA9IHJlcz8uaW5kZXhlc0NyZWF0ZWQgPz8gW107XG4gICAgICAgIHJldHVybiBpbmRleGVzQ3JlYXRlZC5tYXAoKHsgbmFtZSB9KSA9PiBuYW1lKTtcbiAgICB9XG59XG5leHBvcnRzLkNyZWF0ZVNlYXJjaEluZGV4ZXNPcGVyYXRpb24gPSBDcmVhdGVTZWFyY2hJbmRleGVzT3BlcmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/create.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/drop.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/search_indexes/drop.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DropSearchIndexOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DropSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name) {\n        super();\n        this.collection = collection;\n        this.name = name;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            dropSearchIndex: namespace.collection\n        };\n        if (typeof this.name === 'string') {\n            command.name = this.name;\n        }\n        try {\n            await server.commandAsync(namespace, command, { session });\n        }\n        catch (error) {\n            const isNamespaceNotFoundError = error instanceof error_1.MongoServerError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound;\n            if (!isNamespaceNotFoundError) {\n                throw error;\n            }\n        }\n    }\n}\nexports.DropSearchIndexOperation = DropSearchIndexOperation;\n//# sourceMappingURL=drop.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvZHJvcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQ0FBZ0M7QUFDaEMsZ0JBQWdCLG1CQUFPLENBQUMsMkVBQWE7QUFDckMsb0JBQW9CLG1CQUFPLENBQUMsMkZBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsU0FBUztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy9kcm9wLmpzP2Y5ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRyb3BTZWFyY2hJbmRleE9wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vZXJyb3JcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBEcm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gZXh0ZW5kcyBvcGVyYXRpb25fMS5BYnN0cmFjdE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoY29sbGVjdGlvbiwgbmFtZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2UgPSB0aGlzLmNvbGxlY3Rpb24uZnVsbE5hbWVzcGFjZTtcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcbiAgICAgICAgICAgIGRyb3BTZWFyY2hJbmRleDogbmFtZXNwYWNlLmNvbGxlY3Rpb25cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb21tYW5kLm5hbWUgPSB0aGlzLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kQXN5bmMobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBpc05hbWVzcGFjZU5vdEZvdW5kRXJyb3IgPSBlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29TZXJ2ZXJFcnJvciAmJiBlcnJvci5jb2RlID09PSBlcnJvcl8xLk1PTkdPREJfRVJST1JfQ09ERVMuTmFtZXNwYWNlTm90Rm91bmQ7XG4gICAgICAgICAgICBpZiAoIWlzTmFtZXNwYWNlTm90Rm91bmRFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Ecm9wU2VhcmNoSW5kZXhPcGVyYXRpb24gPSBEcm9wU2VhcmNoSW5kZXhPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kcm9wLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/drop.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/update.js":
/*!***********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/search_indexes/update.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UpdateSearchIndexOperation = void 0;\nconst operation_1 = __webpack_require__(/*! ../operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass UpdateSearchIndexOperation extends operation_1.AbstractOperation {\n    constructor(collection, name, definition) {\n        super();\n        this.collection = collection;\n        this.name = name;\n        this.definition = definition;\n    }\n    async execute(server, session) {\n        const namespace = this.collection.fullNamespace;\n        const command = {\n            updateSearchIndex: namespace.collection,\n            name: this.name,\n            definition: this.definition\n        };\n        await server.commandAsync(namespace, command, { session });\n        return;\n    }\n}\nexports.UpdateSearchIndexOperation = UpdateSearchIndexOperation;\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2VhcmNoX2luZGV4ZXMvdXBkYXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQztBQUNsQyxvQkFBb0IsbUJBQU8sQ0FBQywyRkFBYztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsU0FBUztBQUNqRTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZWFyY2hfaW5kZXhlcy91cGRhdGUuanM/ZTEwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRpb25cIik7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBVcGRhdGVTZWFyY2hJbmRleE9wZXJhdGlvbiBleHRlbmRzIG9wZXJhdGlvbl8xLkFic3RyYWN0T3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2xsZWN0aW9uLCBuYW1lLCBkZWZpbml0aW9uKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuZGVmaW5pdGlvbiA9IGRlZmluaXRpb247XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY29sbGVjdGlvbi5mdWxsTmFtZXNwYWNlO1xuICAgICAgICBjb25zdCBjb21tYW5kID0ge1xuICAgICAgICAgICAgdXBkYXRlU2VhcmNoSW5kZXg6IG5hbWVzcGFjZS5jb2xsZWN0aW9uLFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgZGVmaW5pdGlvbjogdGhpcy5kZWZpbml0aW9uXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IHNlcnZlci5jb21tYW5kQXN5bmMobmFtZXNwYWNlLCBjb21tYW5kLCB7IHNlc3Npb24gfSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59XG5leHBvcnRzLlVwZGF0ZVNlYXJjaEluZGV4T3BlcmF0aW9uID0gVXBkYXRlU2VhcmNoSW5kZXhPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGRhdGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/search_indexes/update.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/set_profiling_level.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/set_profiling_level.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\nexports.ProfilingLevel = Object.freeze({\n    off: 'off',\n    slowOnly: 'slow_only',\n    all: 'all'\n});\n/** @internal */\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n    constructor(db, level, options) {\n        super(db, options);\n        this.options = options;\n        switch (level) {\n            case exports.ProfilingLevel.off:\n                this.profile = 0;\n                break;\n            case exports.ProfilingLevel.slowOnly:\n                this.profile = 1;\n                break;\n            case exports.ProfilingLevel.all:\n                this.profile = 2;\n                break;\n            default:\n                this.profile = 0;\n                break;\n        }\n        this.level = level;\n    }\n    async execute(server, session) {\n        const level = this.level;\n        if (!levelValues.has(level)) {\n            throw new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`);\n        }\n        // TODO(NODE-3483): Determine error to put here\n        await super.executeCommand(server, session, { profile: this.profile });\n        return level;\n    }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;\n//# sourceMappingURL=set_profiling_level.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc2V0X3Byb2ZpbGluZ19sZXZlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsR0FBRyxzQkFBc0I7QUFDM0QsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsc0ZBQVc7QUFDckM7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkZBQTJGLGtEQUFrRDtBQUM3STtBQUNBO0FBQ0Esc0RBQXNELHVCQUF1QjtBQUM3RTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvb3BlcmF0aW9ucy9zZXRfcHJvZmlsaW5nX2xldmVsLmpzP2NmMGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gZXhwb3J0cy5Qcm9maWxpbmdMZXZlbCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbmNvbnN0IGxldmVsVmFsdWVzID0gbmV3IFNldChbJ29mZicsICdzbG93X29ubHknLCAnYWxsJ10pO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuUHJvZmlsaW5nTGV2ZWwgPSBPYmplY3QuZnJlZXplKHtcbiAgICBvZmY6ICdvZmYnLFxuICAgIHNsb3dPbmx5OiAnc2xvd19vbmx5JyxcbiAgICBhbGw6ICdhbGwnXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uIGV4dGVuZHMgY29tbWFuZF8xLkNvbW1hbmRPcGVyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRiLCBsZXZlbCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYiwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHN3aXRjaCAobGV2ZWwpIHtcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5Qcm9maWxpbmdMZXZlbC5vZmY6XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9maWxlID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5Qcm9maWxpbmdMZXZlbC5zbG93T25seTpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBleHBvcnRzLlByb2ZpbGluZ0xldmVsLmFsbDpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLnByb2ZpbGUgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGV2ZWwgPSBsZXZlbDtcbiAgICB9XG4gICAgYXN5bmMgZXhlY3V0ZShzZXJ2ZXIsIHNlc3Npb24pIHtcbiAgICAgICAgY29uc3QgbGV2ZWwgPSB0aGlzLmxldmVsO1xuICAgICAgICBpZiAoIWxldmVsVmFsdWVzLmhhcyhsZXZlbCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYFByb2ZpbGluZyBsZXZlbCBtdXN0IGJlIG9uZSBvZiBcIiR7KDAsIHV0aWxzXzEuZW51bVRvU3RyaW5nKShleHBvcnRzLlByb2ZpbGluZ0xldmVsKX1cImApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE8oTk9ERS0zNDgzKTogRGV0ZXJtaW5lIGVycm9yIHRvIHB1dCBoZXJlXG4gICAgICAgIGF3YWl0IHN1cGVyLmV4ZWN1dGVDb21tYW5kKHNlcnZlciwgc2Vzc2lvbiwgeyBwcm9maWxlOiB0aGlzLnByb2ZpbGUgfSk7XG4gICAgICAgIHJldHVybiBsZXZlbDtcbiAgICB9XG59XG5leHBvcnRzLlNldFByb2ZpbGluZ0xldmVsT3BlcmF0aW9uID0gU2V0UHJvZmlsaW5nTGV2ZWxPcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXRfcHJvZmlsaW5nX2xldmVsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/set_profiling_level.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/stats.js":
/*!*******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/stats.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DbStatsOperation = void 0;\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/** @internal */\nclass DbStatsOperation extends command_1.CommandOperation {\n    constructor(db, options) {\n        super(db, options);\n        this.options = options;\n    }\n    async execute(server, session) {\n        const command = { dbStats: true };\n        if (this.options.scale != null) {\n            command.scale = this.options.scale;\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.DbStatsOperation = DbStatsOperation;\n(0, operation_1.defineAspects)(DbStatsOperation, [operation_1.Aspect.READ_OPERATION]);\n//# sourceMappingURL=stats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc3RhdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGtCQUFrQixtQkFBTyxDQUFDLHNGQUFXO0FBQ3JDLG9CQUFvQixtQkFBTyxDQUFDLDBGQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvc3RhdHMuanM/NGYzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRGJTdGF0c09wZXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IGNvbW1hbmRfMSA9IHJlcXVpcmUoXCIuL2NvbW1hbmRcIik7XG5jb25zdCBvcGVyYXRpb25fMSA9IHJlcXVpcmUoXCIuL29wZXJhdGlvblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIERiU3RhdHNPcGVyYXRpb24gZXh0ZW5kcyBjb21tYW5kXzEuQ29tbWFuZE9wZXJhdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZGIsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBhc3luYyBleGVjdXRlKHNlcnZlciwgc2Vzc2lvbikge1xuICAgICAgICBjb25zdCBjb21tYW5kID0geyBkYlN0YXRzOiB0cnVlIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29tbWFuZC5zY2FsZSA9IHRoaXMub3B0aW9ucy5zY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCBjb21tYW5kKTtcbiAgICB9XG59XG5leHBvcnRzLkRiU3RhdHNPcGVyYXRpb24gPSBEYlN0YXRzT3BlcmF0aW9uO1xuKDAsIG9wZXJhdGlvbl8xLmRlZmluZUFzcGVjdHMpKERiU3RhdHNPcGVyYXRpb24sIFtvcGVyYXRpb25fMS5Bc3BlY3QuUkVBRF9PUEVSQVRJT05dKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0YXRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/stats.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/update.js":
/*!********************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/update.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeUpdateStatement = exports.ReplaceOneOperation = exports.UpdateManyOperation = exports.UpdateOneOperation = exports.UpdateOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\nconst operation_1 = __webpack_require__(/*! ./operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/operation.js\");\n/**\n * @internal\n * UpdateOperation is used in bulk write, while UpdateOneOperation and UpdateManyOperation are only used in the collections API\n */\nclass UpdateOperation extends command_1.CommandOperation {\n    constructor(ns, statements, options) {\n        super(undefined, options);\n        this.options = options;\n        this.ns = ns;\n        this.statements = statements;\n    }\n    get canRetryWrite() {\n        if (super.canRetryWrite === false) {\n            return false;\n        }\n        return this.statements.every(op => op.multi == null || op.multi === false);\n    }\n    async execute(server, session) {\n        const options = this.options ?? {};\n        const ordered = typeof options.ordered === 'boolean' ? options.ordered : true;\n        const command = {\n            update: this.ns.collection,\n            updates: this.statements,\n            ordered\n        };\n        if (typeof options.bypassDocumentValidation === 'boolean') {\n            command.bypassDocumentValidation = options.bypassDocumentValidation;\n        }\n        if (options.let) {\n            command.let = options.let;\n        }\n        // we check for undefined specifically here to allow falsy values\n        // eslint-disable-next-line no-restricted-syntax\n        if (options.comment !== undefined) {\n            command.comment = options.comment;\n        }\n        const unacknowledgedWrite = this.writeConcern && this.writeConcern.w === 0;\n        if (unacknowledgedWrite) {\n            if (this.statements.find((o) => o.hint)) {\n                // TODO(NODE-3541): fix error for hint with unacknowledged writes\n                throw new error_1.MongoCompatibilityError(`hint is not supported with unacknowledged writes`);\n            }\n        }\n        return super.executeCommand(server, session, command);\n    }\n}\nexports.UpdateOperation = UpdateOperation;\n/** @internal */\nclass UpdateOneOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: false })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateOneOperation = UpdateOneOperation;\n/** @internal */\nclass UpdateManyOperation extends UpdateOperation {\n    constructor(collection, filter, update, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, update, { ...options, multi: true })], options);\n        if (!(0, utils_1.hasAtomicOperators)(update)) {\n            throw new error_1.MongoInvalidArgumentError('Update document requires atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.UpdateManyOperation = UpdateManyOperation;\n/** @internal */\nclass ReplaceOneOperation extends UpdateOperation {\n    constructor(collection, filter, replacement, options) {\n        super(collection.s.namespace, [makeUpdateStatement(filter, replacement, { ...options, multi: false })], options);\n        if ((0, utils_1.hasAtomicOperators)(replacement)) {\n            throw new error_1.MongoInvalidArgumentError('Replacement document must not contain atomic operators');\n        }\n    }\n    async execute(server, session) {\n        const res = await super.execute(server, session);\n        if (this.explain != null)\n            return res;\n        if (res.code)\n            throw new error_1.MongoServerError(res);\n        if (res.writeErrors)\n            throw new error_1.MongoServerError(res.writeErrors[0]);\n        return {\n            acknowledged: this.writeConcern?.w !== 0,\n            modifiedCount: res.nModified ?? res.n,\n            upsertedId: Array.isArray(res.upserted) && res.upserted.length > 0 ? res.upserted[0]._id : null,\n            upsertedCount: Array.isArray(res.upserted) && res.upserted.length ? res.upserted.length : 0,\n            matchedCount: Array.isArray(res.upserted) && res.upserted.length > 0 ? 0 : res.n\n        };\n    }\n}\nexports.ReplaceOneOperation = ReplaceOneOperation;\nfunction makeUpdateStatement(filter, update, options) {\n    if (filter == null || typeof filter !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Selector must be a valid JavaScript object');\n    }\n    if (update == null || typeof update !== 'object') {\n        throw new error_1.MongoInvalidArgumentError('Document must be a valid JavaScript object');\n    }\n    const op = { q: filter, u: update };\n    if (typeof options.upsert === 'boolean') {\n        op.upsert = options.upsert;\n    }\n    if (options.multi) {\n        op.multi = options.multi;\n    }\n    if (options.hint) {\n        op.hint = options.hint;\n    }\n    if (options.arrayFilters) {\n        op.arrayFilters = options.arrayFilters;\n    }\n    if (options.collation) {\n        op.collation = options.collation;\n    }\n    return op;\n}\nexports.makeUpdateStatement = makeUpdateStatement;\n(0, operation_1.defineAspects)(UpdateOperation, [operation_1.Aspect.RETRYABLE, operation_1.Aspect.WRITE_OPERATION, operation_1.Aspect.SKIP_COLLATION]);\n(0, operation_1.defineAspects)(UpdateOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(UpdateManyOperation, [\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.EXPLAINABLE,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n(0, operation_1.defineAspects)(ReplaceOneOperation, [\n    operation_1.Aspect.RETRYABLE,\n    operation_1.Aspect.WRITE_OPERATION,\n    operation_1.Aspect.SKIP_COLLATION\n]);\n//# sourceMappingURL=update.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/update.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/operations/validate_collection.js":
/*!*********************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/operations/validate_collection.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValidateCollectionOperation = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst command_1 = __webpack_require__(/*! ./command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/command.js\");\n/** @internal */\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n    constructor(admin, collectionName, options) {\n        // Decorate command with extra options\n        const command = { validate: collectionName };\n        const keys = Object.keys(options);\n        for (let i = 0; i < keys.length; i++) {\n            if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n                command[keys[i]] = options[keys[i]];\n            }\n        }\n        super(admin.s.db, options);\n        this.options = options;\n        this.command = command;\n        this.collectionName = collectionName;\n    }\n    async execute(server, session) {\n        const collectionName = this.collectionName;\n        const doc = await super.executeCommand(server, session, this.command);\n        if (doc.result != null && typeof doc.result !== 'string')\n            throw new error_1.MongoUnexpectedServerResponseError('Error with validation data');\n        if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        if (doc.valid != null && !doc.valid)\n            throw new error_1.MongoUnexpectedServerResponseError(`Invalid collection ${collectionName}`);\n        return doc;\n    }\n}\nexports.ValidateCollectionOperation = ValidateCollectionOperation;\n//# sourceMappingURL=validate_collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdmFsaWRhdGVfY29sbGVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQ0FBbUM7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsc0ZBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVGQUF1RixlQUFlO0FBQ3RHO0FBQ0EsdUZBQXVGLGVBQWU7QUFDdEc7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL29wZXJhdGlvbnMvdmFsaWRhdGVfY29sbGVjdGlvbi5qcz9kODIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSB2b2lkIDA7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgY29tbWFuZF8xID0gcmVxdWlyZShcIi4vY29tbWFuZFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNsYXNzIFZhbGlkYXRlQ29sbGVjdGlvbk9wZXJhdGlvbiBleHRlbmRzIGNvbW1hbmRfMS5Db21tYW5kT3BlcmF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihhZG1pbiwgY29sbGVjdGlvbk5hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gRGVjb3JhdGUgY29tbWFuZCB3aXRoIGV4dHJhIG9wdGlvbnNcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHsgdmFsaWRhdGU6IGNvbGxlY3Rpb25OYW1lIH07XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsIGtleXNbaV0pICYmIGtleXNbaV0gIT09ICdzZXNzaW9uJykge1xuICAgICAgICAgICAgICAgIGNvbW1hbmRba2V5c1tpXV0gPSBvcHRpb25zW2tleXNbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1cGVyKGFkbWluLnMuZGIsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmNvbW1hbmQgPSBjb21tYW5kO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbk5hbWU7XG4gICAgfVxuICAgIGFzeW5jIGV4ZWN1dGUoc2VydmVyLCBzZXNzaW9uKSB7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gdGhpcy5jb2xsZWN0aW9uTmFtZTtcbiAgICAgICAgY29uc3QgZG9jID0gYXdhaXQgc3VwZXIuZXhlY3V0ZUNvbW1hbmQoc2VydmVyLCBzZXNzaW9uLCB0aGlzLmNvbW1hbmQpO1xuICAgICAgICBpZiAoZG9jLnJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiBkb2MucmVzdWx0ICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvVW5leHBlY3RlZFNlcnZlclJlc3BvbnNlRXJyb3IoJ0Vycm9yIHdpdGggdmFsaWRhdGlvbiBkYXRhJyk7XG4gICAgICAgIGlmIChkb2MucmVzdWx0ICE9IG51bGwgJiYgZG9jLnJlc3VsdC5tYXRjaCgvZXhjZXB0aW9ufGNvcnJ1cHQvKSAhPSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSW52YWxpZCBjb2xsZWN0aW9uICR7Y29sbGVjdGlvbk5hbWV9YCk7XG4gICAgICAgIGlmIChkb2MudmFsaWQgIT0gbnVsbCAmJiAhZG9jLnZhbGlkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29VbmV4cGVjdGVkU2VydmVyUmVzcG9uc2VFcnJvcihgSW52YWxpZCBjb2xsZWN0aW9uICR7Y29sbGVjdGlvbk5hbWV9YCk7XG4gICAgICAgIHJldHVybiBkb2M7XG4gICAgfVxufVxuZXhwb3J0cy5WYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb24gPSBWYWxpZGF0ZUNvbGxlY3Rpb25PcGVyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWxpZGF0ZV9jb2xsZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/operations/validate_collection.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/read_concern.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadConcern = exports.ReadConcernLevel = void 0;\n/** @public */\nexports.ReadConcernLevel = Object.freeze({\n    local: 'local',\n    majority: 'majority',\n    linearizable: 'linearizable',\n    available: 'available',\n    snapshot: 'snapshot'\n});\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nclass ReadConcern {\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level) {\n        /**\n         * A spec test exists that allows level to be any string.\n         * \"invalid readConcern with out stage\"\n         * @see ./test/spec/crud/v2/aggregate-out-readConcern.json\n         * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#unknown-levels-and-additional-options-for-string-based-readconcerns\n         */\n        this.level = exports.ReadConcernLevel[level] ?? level;\n    }\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options) {\n        if (options == null) {\n            return;\n        }\n        if (options.readConcern) {\n            const { readConcern } = options;\n            if (readConcern instanceof ReadConcern) {\n                return readConcern;\n            }\n            else if (typeof readConcern === 'string') {\n                return new ReadConcern(readConcern);\n            }\n            else if ('level' in readConcern && readConcern.level) {\n                return new ReadConcern(readConcern.level);\n            }\n        }\n        if (options.level) {\n            return new ReadConcern(options.level);\n        }\n        return;\n    }\n    static get MAJORITY() {\n        return exports.ReadConcernLevel.majority;\n    }\n    static get AVAILABLE() {\n        return exports.ReadConcernLevel.available;\n    }\n    static get LINEARIZABLE() {\n        return exports.ReadConcernLevel.linearizable;\n    }\n    static get SNAPSHOT() {\n        return exports.ReadConcernLevel.snapshot;\n    }\n    toJSON() {\n        return { level: this.level };\n    }\n}\nexports.ReadConcern = ReadConcern;\n//# sourceMappingURL=read_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3JlYWRfY29uY2Vybi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRyx3QkFBd0I7QUFDOUM7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvcmVhZF9jb25jZXJuLmpzPzVmZmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlYWRDb25jZXJuID0gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsID0gdm9pZCAwO1xuLyoqIEBwdWJsaWMgKi9cbmV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbCA9IE9iamVjdC5mcmVlemUoe1xuICAgIGxvY2FsOiAnbG9jYWwnLFxuICAgIG1ham9yaXR5OiAnbWFqb3JpdHknLFxuICAgIGxpbmVhcml6YWJsZTogJ2xpbmVhcml6YWJsZScsXG4gICAgYXZhaWxhYmxlOiAnYXZhaWxhYmxlJyxcbiAgICBzbmFwc2hvdDogJ3NuYXBzaG90J1xufSk7XG4vKipcbiAqIFRoZSBNb25nb0RCIFJlYWRDb25jZXJuLCB3aGljaCBhbGxvd3MgZm9yIGNvbnRyb2wgb2YgdGhlIGNvbnNpc3RlbmN5IGFuZCBpc29sYXRpb24gcHJvcGVydGllc1xuICogb2YgdGhlIGRhdGEgcmVhZCBmcm9tIHJlcGxpY2Egc2V0cyBhbmQgcmVwbGljYSBzZXQgc2hhcmRzLlxuICogQHB1YmxpY1xuICpcbiAqIEBzZWUgaHR0cHM6Ly93d3cubW9uZ29kYi5jb20vZG9jcy9tYW51YWwvcmVmZXJlbmNlL3JlYWQtY29uY2Vybi9pbmRleC5odG1sXG4gKi9cbmNsYXNzIFJlYWRDb25jZXJuIHtcbiAgICAvKiogQ29uc3RydWN0cyBhIFJlYWRDb25jZXJuIGZyb20gdGhlIHJlYWQgY29uY2VybiBsZXZlbC4qL1xuICAgIGNvbnN0cnVjdG9yKGxldmVsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHNwZWMgdGVzdCBleGlzdHMgdGhhdCBhbGxvd3MgbGV2ZWwgdG8gYmUgYW55IHN0cmluZy5cbiAgICAgICAgICogXCJpbnZhbGlkIHJlYWRDb25jZXJuIHdpdGggb3V0IHN0YWdlXCJcbiAgICAgICAgICogQHNlZSAuL3Rlc3Qvc3BlYy9jcnVkL3YyL2FnZ3JlZ2F0ZS1vdXQtcmVhZENvbmNlcm4uanNvblxuICAgICAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb25nb2RiL3NwZWNpZmljYXRpb25zL2Jsb2IvbWFzdGVyL3NvdXJjZS9yZWFkLXdyaXRlLWNvbmNlcm4vcmVhZC13cml0ZS1jb25jZXJuLnJzdCN1bmtub3duLWxldmVscy1hbmQtYWRkaXRpb25hbC1vcHRpb25zLWZvci1zdHJpbmctYmFzZWQtcmVhZGNvbmNlcm5zXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmxldmVsID0gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsW2xldmVsXSA/PyBsZXZlbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgUmVhZENvbmNlcm4gZ2l2ZW4gYW4gb3B0aW9ucyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIHdyaXRlIGNvbmNlcm4uXG4gICAgICovXG4gICAgc3RhdGljIGZyb21PcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnJlYWRDb25jZXJuKSB7XG4gICAgICAgICAgICBjb25zdCB7IHJlYWRDb25jZXJuIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgaWYgKHJlYWRDb25jZXJuIGluc3RhbmNlb2YgUmVhZENvbmNlcm4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVhZENvbmNlcm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgcmVhZENvbmNlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkQ29uY2VybihyZWFkQ29uY2Vybik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgnbGV2ZWwnIGluIHJlYWRDb25jZXJuICYmIHJlYWRDb25jZXJuLmxldmVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWFkQ29uY2VybihyZWFkQ29uY2Vybi5sZXZlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubGV2ZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZENvbmNlcm4ob3B0aW9ucy5sZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IE1BSk9SSVRZKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsLm1ham9yaXR5O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0IEFWQUlMQUJMRSgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5hdmFpbGFibGU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgTElORUFSSVpBQkxFKCkge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5SZWFkQ29uY2VybkxldmVsLmxpbmVhcml6YWJsZTtcbiAgICB9XG4gICAgc3RhdGljIGdldCBTTkFQU0hPVCgpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuUmVhZENvbmNlcm5MZXZlbC5zbmFwc2hvdDtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4geyBsZXZlbDogdGhpcy5sZXZlbCB9O1xuICAgIH1cbn1cbmV4cG9ydHMuUmVhZENvbmNlcm4gPSBSZWFkQ29uY2Vybjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWRfY29uY2Vybi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js":
/*!******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/read_preference.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReadPreference = exports.ReadPreferenceMode = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/** @public */\nexports.ReadPreferenceMode = Object.freeze({\n    primary: 'primary',\n    primaryPreferred: 'primaryPreferred',\n    secondary: 'secondary',\n    secondaryPreferred: 'secondaryPreferred',\n    nearest: 'nearest'\n});\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nclass ReadPreference {\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode, tags, options) {\n        if (!ReadPreference.isValid(mode)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference mode ${JSON.stringify(mode)}`);\n        }\n        if (options == null && typeof tags === 'object' && !Array.isArray(tags)) {\n            options = tags;\n            tags = undefined;\n        }\n        else if (tags && !Array.isArray(tags)) {\n            throw new error_1.MongoInvalidArgumentError('ReadPreference tags must be an array');\n        }\n        this.mode = mode;\n        this.tags = tags;\n        this.hedge = options?.hedge;\n        this.maxStalenessSeconds = undefined;\n        this.minWireVersion = undefined;\n        options = options ?? {};\n        if (options.maxStalenessSeconds != null) {\n            if (options.maxStalenessSeconds <= 0) {\n                throw new error_1.MongoInvalidArgumentError('maxStalenessSeconds must be a positive integer');\n            }\n            this.maxStalenessSeconds = options.maxStalenessSeconds;\n            // NOTE: The minimum required wire version is 5 for this read preference. If the existing\n            //       topology has a lower value then a MongoError will be thrown during server selection.\n            this.minWireVersion = 5;\n        }\n        if (this.mode === ReadPreference.PRIMARY) {\n            if (this.tags && Array.isArray(this.tags) && this.tags.length > 0) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with tags');\n            }\n            if (this.maxStalenessSeconds) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with maxStalenessSeconds');\n            }\n            if (this.hedge) {\n                throw new error_1.MongoInvalidArgumentError('Primary read preference cannot be combined with hedge');\n            }\n        }\n    }\n    // Support the deprecated `preference` property introduced in the porcelain layer\n    get preference() {\n        return this.mode;\n    }\n    static fromString(mode) {\n        return new ReadPreference(mode);\n    }\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options) {\n        if (!options)\n            return;\n        const readPreference = options.readPreference ?? options.session?.transaction.options.readPreference;\n        const readPreferenceTags = options.readPreferenceTags;\n        if (readPreference == null) {\n            return;\n        }\n        if (typeof readPreference === 'string') {\n            return new ReadPreference(readPreference, readPreferenceTags, {\n                maxStalenessSeconds: options.maxStalenessSeconds,\n                hedge: options.hedge\n            });\n        }\n        else if (!(readPreference instanceof ReadPreference) && typeof readPreference === 'object') {\n            const mode = readPreference.mode || readPreference.preference;\n            if (mode && typeof mode === 'string') {\n                return new ReadPreference(mode, readPreference.tags ?? readPreferenceTags, {\n                    maxStalenessSeconds: readPreference.maxStalenessSeconds,\n                    hedge: options.hedge\n                });\n            }\n        }\n        if (readPreferenceTags) {\n            readPreference.tags = readPreferenceTags;\n        }\n        return readPreference;\n    }\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options) {\n        if (options.readPreference == null)\n            return options;\n        const r = options.readPreference;\n        if (typeof r === 'string') {\n            options.readPreference = new ReadPreference(r);\n        }\n        else if (r && !(r instanceof ReadPreference) && typeof r === 'object') {\n            const mode = r.mode || r.preference;\n            if (mode && typeof mode === 'string') {\n                options.readPreference = new ReadPreference(mode, r.tags, {\n                    maxStalenessSeconds: r.maxStalenessSeconds\n                });\n            }\n        }\n        else if (!(r instanceof ReadPreference)) {\n            throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${r}`);\n        }\n        return options;\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode) {\n        const VALID_MODES = new Set([\n            ReadPreference.PRIMARY,\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST,\n            null\n        ]);\n        return VALID_MODES.has(mode);\n    }\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode) {\n        return ReadPreference.isValid(typeof mode === 'string' ? mode : this.mode);\n    }\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk() {\n        const NEEDS_SECONDARYOK = new Set([\n            ReadPreference.PRIMARY_PREFERRED,\n            ReadPreference.SECONDARY,\n            ReadPreference.SECONDARY_PREFERRED,\n            ReadPreference.NEAREST\n        ]);\n        return NEEDS_SECONDARYOK.has(this.mode);\n    }\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference) {\n        return readPreference.mode === this.mode;\n    }\n    /** Return JSON representation */\n    toJSON() {\n        const readPreference = { mode: this.mode };\n        if (Array.isArray(this.tags))\n            readPreference.tags = this.tags;\n        if (this.maxStalenessSeconds)\n            readPreference.maxStalenessSeconds = this.maxStalenessSeconds;\n        if (this.hedge)\n            readPreference.hedge = this.hedge;\n        return readPreference;\n    }\n}\nReadPreference.PRIMARY = exports.ReadPreferenceMode.primary;\nReadPreference.PRIMARY_PREFERRED = exports.ReadPreferenceMode.primaryPreferred;\nReadPreference.SECONDARY = exports.ReadPreferenceMode.secondary;\nReadPreference.SECONDARY_PREFERRED = exports.ReadPreferenceMode.secondaryPreferred;\nReadPreference.NEAREST = exports.ReadPreferenceMode.nearest;\nReadPreference.primary = new ReadPreference(exports.ReadPreferenceMode.primary);\nReadPreference.primaryPreferred = new ReadPreference(exports.ReadPreferenceMode.primaryPreferred);\nReadPreference.secondary = new ReadPreference(exports.ReadPreferenceMode.secondary);\nReadPreference.secondaryPreferred = new ReadPreference(exports.ReadPreferenceMode.secondaryPreferred);\nReadPreference.nearest = new ReadPreference(exports.ReadPreferenceMode.nearest);\nexports.ReadPreference = ReadPreference;\n//# sourceMappingURL=read_preference.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/common.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._advanceClusterTime = exports.drainTimerQueue = exports.ServerType = exports.TopologyType = exports.STATE_CONNECTED = exports.STATE_CONNECTING = exports.STATE_CLOSED = exports.STATE_CLOSING = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\n// shared state names\nexports.STATE_CLOSING = 'closing';\nexports.STATE_CLOSED = 'closed';\nexports.STATE_CONNECTING = 'connecting';\nexports.STATE_CONNECTED = 'connected';\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexports.TopologyType = Object.freeze({\n    Single: 'Single',\n    ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n    ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n    Sharded: 'Sharded',\n    Unknown: 'Unknown',\n    LoadBalanced: 'LoadBalanced'\n});\n/**\n * An enumeration of server types we know about\n * @public\n */\nexports.ServerType = Object.freeze({\n    Standalone: 'Standalone',\n    Mongos: 'Mongos',\n    PossiblePrimary: 'PossiblePrimary',\n    RSPrimary: 'RSPrimary',\n    RSSecondary: 'RSSecondary',\n    RSArbiter: 'RSArbiter',\n    RSOther: 'RSOther',\n    RSGhost: 'RSGhost',\n    Unknown: 'Unknown',\n    LoadBalancer: 'LoadBalancer'\n});\n/** @internal */\nfunction drainTimerQueue(queue) {\n    queue.forEach(timers_1.clearTimeout);\n    queue.clear();\n}\nexports.drainTimerQueue = drainTimerQueue;\n/** Shared function to determine clusterTime for a given topology or session */\nfunction _advanceClusterTime(entity, $clusterTime) {\n    if (entity.clusterTime == null) {\n        entity.clusterTime = $clusterTime;\n    }\n    else {\n        if ($clusterTime.clusterTime.greaterThan(entity.clusterTime.clusterTime)) {\n            entity.clusterTime = $clusterTime;\n        }\n    }\n}\nexports._advanceClusterTime = _advanceClusterTime;\n//# sourceMappingURL=common.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLHVCQUF1QixHQUFHLGtCQUFrQixHQUFHLG9CQUFvQixHQUFHLHVCQUF1QixHQUFHLHdCQUF3QixHQUFHLG9CQUFvQixHQUFHLHFCQUFxQjtBQUNyTSxpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQztBQUNBLHFCQUFxQjtBQUNyQixvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vY29tbW9uLmpzP2E3ZDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLl9hZHZhbmNlQ2x1c3RlclRpbWUgPSBleHBvcnRzLmRyYWluVGltZXJRdWV1ZSA9IGV4cG9ydHMuU2VydmVyVHlwZSA9IGV4cG9ydHMuVG9wb2xvZ3lUeXBlID0gZXhwb3J0cy5TVEFURV9DT05ORUNURUQgPSBleHBvcnRzLlNUQVRFX0NPTk5FQ1RJTkcgPSBleHBvcnRzLlNUQVRFX0NMT1NFRCA9IGV4cG9ydHMuU1RBVEVfQ0xPU0lORyA9IHZvaWQgMDtcbmNvbnN0IHRpbWVyc18xID0gcmVxdWlyZShcInRpbWVyc1wiKTtcbi8vIHNoYXJlZCBzdGF0ZSBuYW1lc1xuZXhwb3J0cy5TVEFURV9DTE9TSU5HID0gJ2Nsb3NpbmcnO1xuZXhwb3J0cy5TVEFURV9DTE9TRUQgPSAnY2xvc2VkJztcbmV4cG9ydHMuU1RBVEVfQ09OTkVDVElORyA9ICdjb25uZWN0aW5nJztcbmV4cG9ydHMuU1RBVEVfQ09OTkVDVEVEID0gJ2Nvbm5lY3RlZCc7XG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHRvcG9sb2d5IHR5cGVzIHdlIGtub3cgYWJvdXRcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5Ub3BvbG9neVR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBTaW5nbGU6ICdTaW5nbGUnLFxuICAgIFJlcGxpY2FTZXROb1ByaW1hcnk6ICdSZXBsaWNhU2V0Tm9QcmltYXJ5JyxcbiAgICBSZXBsaWNhU2V0V2l0aFByaW1hcnk6ICdSZXBsaWNhU2V0V2l0aFByaW1hcnknLFxuICAgIFNoYXJkZWQ6ICdTaGFyZGVkJyxcbiAgICBVbmtub3duOiAnVW5rbm93bicsXG4gICAgTG9hZEJhbGFuY2VkOiAnTG9hZEJhbGFuY2VkJ1xufSk7XG4vKipcbiAqIEFuIGVudW1lcmF0aW9uIG9mIHNlcnZlciB0eXBlcyB3ZSBrbm93IGFib3V0XG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydHMuU2VydmVyVHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIFN0YW5kYWxvbmU6ICdTdGFuZGFsb25lJyxcbiAgICBNb25nb3M6ICdNb25nb3MnLFxuICAgIFBvc3NpYmxlUHJpbWFyeTogJ1Bvc3NpYmxlUHJpbWFyeScsXG4gICAgUlNQcmltYXJ5OiAnUlNQcmltYXJ5JyxcbiAgICBSU1NlY29uZGFyeTogJ1JTU2Vjb25kYXJ5JyxcbiAgICBSU0FyYml0ZXI6ICdSU0FyYml0ZXInLFxuICAgIFJTT3RoZXI6ICdSU090aGVyJyxcbiAgICBSU0dob3N0OiAnUlNHaG9zdCcsXG4gICAgVW5rbm93bjogJ1Vua25vd24nLFxuICAgIExvYWRCYWxhbmNlcjogJ0xvYWRCYWxhbmNlcidcbn0pO1xuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gZHJhaW5UaW1lclF1ZXVlKHF1ZXVlKSB7XG4gICAgcXVldWUuZm9yRWFjaCh0aW1lcnNfMS5jbGVhclRpbWVvdXQpO1xuICAgIHF1ZXVlLmNsZWFyKCk7XG59XG5leHBvcnRzLmRyYWluVGltZXJRdWV1ZSA9IGRyYWluVGltZXJRdWV1ZTtcbi8qKiBTaGFyZWQgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGNsdXN0ZXJUaW1lIGZvciBhIGdpdmVuIHRvcG9sb2d5IG9yIHNlc3Npb24gKi9cbmZ1bmN0aW9uIF9hZHZhbmNlQ2x1c3RlclRpbWUoZW50aXR5LCAkY2x1c3RlclRpbWUpIHtcbiAgICBpZiAoZW50aXR5LmNsdXN0ZXJUaW1lID09IG51bGwpIHtcbiAgICAgICAgZW50aXR5LmNsdXN0ZXJUaW1lID0gJGNsdXN0ZXJUaW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCRjbHVzdGVyVGltZS5jbHVzdGVyVGltZS5ncmVhdGVyVGhhbihlbnRpdHkuY2x1c3RlclRpbWUuY2x1c3RlclRpbWUpKSB7XG4gICAgICAgICAgICBlbnRpdHkuY2x1c3RlclRpbWUgPSAkY2x1c3RlclRpbWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLl9hZHZhbmNlQ2x1c3RlclRpbWUgPSBfYWR2YW5jZUNsdXN0ZXJUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/events.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/events.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerHeartbeatFailedEvent = exports.ServerHeartbeatSucceededEvent = exports.ServerHeartbeatStartedEvent = exports.TopologyClosedEvent = exports.TopologyOpeningEvent = exports.TopologyDescriptionChangedEvent = exports.ServerClosedEvent = exports.ServerOpeningEvent = exports.ServerDescriptionChangedEvent = void 0;\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nclass ServerDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, address, previousDescription, newDescription) {\n        this.topologyId = topologyId;\n        this.address = address;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.ServerDescriptionChangedEvent = ServerDescriptionChangedEvent;\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nclass ServerOpeningEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerOpeningEvent = ServerOpeningEvent;\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nclass ServerClosedEvent {\n    /** @internal */\n    constructor(topologyId, address) {\n        this.topologyId = topologyId;\n        this.address = address;\n    }\n}\nexports.ServerClosedEvent = ServerClosedEvent;\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nclass TopologyDescriptionChangedEvent {\n    /** @internal */\n    constructor(topologyId, previousDescription, newDescription) {\n        this.topologyId = topologyId;\n        this.previousDescription = previousDescription;\n        this.newDescription = newDescription;\n    }\n}\nexports.TopologyDescriptionChangedEvent = TopologyDescriptionChangedEvent;\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nclass TopologyOpeningEvent {\n    /** @internal */\n    constructor(topologyId) {\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyOpeningEvent = TopologyOpeningEvent;\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nclass TopologyClosedEvent {\n    /** @internal */\n    constructor(topologyId) {\n        this.topologyId = topologyId;\n    }\n}\nexports.TopologyClosedEvent = TopologyClosedEvent;\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nclass ServerHeartbeatStartedEvent {\n    /** @internal */\n    constructor(connectionId) {\n        this.connectionId = connectionId;\n    }\n}\nexports.ServerHeartbeatStartedEvent = ServerHeartbeatStartedEvent;\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nclass ServerHeartbeatSucceededEvent {\n    /** @internal */\n    constructor(connectionId, duration, reply) {\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.reply = reply ?? {};\n    }\n}\nexports.ServerHeartbeatSucceededEvent = ServerHeartbeatSucceededEvent;\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nclass ServerHeartbeatFailedEvent {\n    /** @internal */\n    constructor(connectionId, duration, failure) {\n        this.connectionId = connectionId;\n        this.duration = duration;\n        this.failure = failure;\n    }\n}\nexports.ServerHeartbeatFailedEvent = ServerHeartbeatFailedEvent;\n//# sourceMappingURL=events.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vZXZlbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtDQUFrQyxHQUFHLHFDQUFxQyxHQUFHLG1DQUFtQyxHQUFHLDJCQUEyQixHQUFHLDRCQUE0QixHQUFHLHVDQUF1QyxHQUFHLHlCQUF5QixHQUFHLDBCQUEwQixHQUFHLHFDQUFxQztBQUN4VDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vZXZlbnRzLmpzPzAwODgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcnZlckhlYXJ0YmVhdEZhaWxlZEV2ZW50ID0gZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWRFdmVudCA9IGV4cG9ydHMuU2VydmVySGVhcnRiZWF0U3RhcnRlZEV2ZW50ID0gZXhwb3J0cy5Ub3BvbG9neUNsb3NlZEV2ZW50ID0gZXhwb3J0cy5Ub3BvbG9neU9wZW5pbmdFdmVudCA9IGV4cG9ydHMuVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCA9IGV4cG9ydHMuU2VydmVyQ2xvc2VkRXZlbnQgPSBleHBvcnRzLlNlcnZlck9wZW5pbmdFdmVudCA9IGV4cG9ydHMuU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQgPSB2b2lkIDA7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBzZXJ2ZXIgZGVzY3JpcHRpb24gY2hhbmdlcywgYnV0IGRvZXMgTk9UIGluY2x1ZGUgY2hhbmdlcyB0byB0aGUgUlRULlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckRlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCwgYWRkcmVzcywgcHJldmlvdXNEZXNjcmlwdGlvbiwgbmV3RGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy50b3BvbG9neUlkID0gdG9wb2xvZ3lJZDtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgdGhpcy5wcmV2aW91c0Rlc2NyaXB0aW9uID0gcHJldmlvdXNEZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5uZXdEZXNjcmlwdGlvbiA9IG5ld0Rlc2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyRGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQgPSBTZXJ2ZXJEZXNjcmlwdGlvbkNoYW5nZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHNlcnZlciBpcyBpbml0aWFsaXplZC5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJPcGVuaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkLCBhZGRyZXNzKSB7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJPcGVuaW5nRXZlbnQgPSBTZXJ2ZXJPcGVuaW5nRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiBzZXJ2ZXIgaXMgY2xvc2VkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNlcnZlckNsb3NlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IodG9wb2xvZ3lJZCwgYWRkcmVzcykge1xuICAgICAgICB0aGlzLnRvcG9sb2d5SWQgPSB0b3BvbG9neUlkO1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhZGRyZXNzO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVyQ2xvc2VkRXZlbnQgPSBTZXJ2ZXJDbG9zZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRvcG9sb2d5IGRlc2NyaXB0aW9uIGNoYW5nZXMuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgVG9wb2xvZ3lEZXNjcmlwdGlvbkNoYW5nZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKHRvcG9sb2d5SWQsIHByZXZpb3VzRGVzY3JpcHRpb24sIG5ld0Rlc2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgICAgIHRoaXMucHJldmlvdXNEZXNjcmlwdGlvbiA9IHByZXZpb3VzRGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMubmV3RGVzY3JpcHRpb24gPSBuZXdEZXNjcmlwdGlvbjtcbiAgICB9XG59XG5leHBvcnRzLlRvcG9sb2d5RGVzY3JpcHRpb25DaGFuZ2VkRXZlbnQgPSBUb3BvbG9neURlc2NyaXB0aW9uQ2hhbmdlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdG9wb2xvZ3kgaXMgaW5pdGlhbGl6ZWQuXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgVG9wb2xvZ3lPcGVuaW5nRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkKSB7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ub3BvbG9neU9wZW5pbmdFdmVudCA9IFRvcG9sb2d5T3BlbmluZ0V2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdG9wb2xvZ3kgaXMgY2xvc2VkLlxuICogQHB1YmxpY1xuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFRvcG9sb2d5Q2xvc2VkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neUlkKSB7XG4gICAgICAgIHRoaXMudG9wb2xvZ3lJZCA9IHRvcG9sb2d5SWQ7XG4gICAgfVxufVxuZXhwb3J0cy5Ub3BvbG9neUNsb3NlZEV2ZW50ID0gVG9wb2xvZ3lDbG9zZWRFdmVudDtcbi8qKlxuICogRW1pdHRlZCB3aGVuIHRoZSBzZXJ2ZXIgbW9uaXRvcuKAmXMgaGVsbG8gY29tbWFuZCBpcyBzdGFydGVkIC0gaW1tZWRpYXRlbHkgYmVmb3JlXG4gKiB0aGUgaGVsbG8gY29tbWFuZCBpcyBzZXJpYWxpemVkIGludG8gcmF3IEJTT04gYW5kIHdyaXR0ZW4gdG8gdGhlIHNvY2tldC5cbiAqXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVySGVhcnRiZWF0U3RhcnRlZEV2ZW50IHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbklkKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VydmVySGVhcnRiZWF0U3RhcnRlZEV2ZW50ID0gU2VydmVySGVhcnRiZWF0U3RhcnRlZEV2ZW50O1xuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIHNlcnZlciBtb25pdG9y4oCZcyBoZWxsbyBzdWNjZWVkcy5cbiAqIEBwdWJsaWNcbiAqIEBjYXRlZ29yeSBFdmVudFxuICovXG5jbGFzcyBTZXJ2ZXJIZWFydGJlYXRTdWNjZWVkZWRFdmVudCB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25JZCwgZHVyYXRpb24sIHJlcGx5KSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMucmVwbHkgPSByZXBseSA/PyB7fTtcbiAgICB9XG59XG5leHBvcnRzLlNlcnZlckhlYXJ0YmVhdFN1Y2NlZWRlZEV2ZW50ID0gU2VydmVySGVhcnRiZWF0U3VjY2VlZGVkRXZlbnQ7XG4vKipcbiAqIEVtaXR0ZWQgd2hlbiB0aGUgc2VydmVyIG1vbml0b3LigJlzIGhlbGxvIGZhaWxzLCBlaXRoZXIgd2l0aCBhbiDigJxvazogMOKAnSBvciBhIHNvY2tldCBleGNlcHRpb24uXG4gKiBAcHVibGljXG4gKiBAY2F0ZWdvcnkgRXZlbnRcbiAqL1xuY2xhc3MgU2VydmVySGVhcnRiZWF0RmFpbGVkRXZlbnQge1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uSWQsIGR1cmF0aW9uLCBmYWlsdXJlKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkID0gY29ubmVjdGlvbklkO1xuICAgICAgICB0aGlzLmR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgICAgIHRoaXMuZmFpbHVyZSA9IGZhaWx1cmU7XG4gICAgfVxufVxuZXhwb3J0cy5TZXJ2ZXJIZWFydGJlYXRGYWlsZWRFdmVudCA9IFNlcnZlckhlYXJ0YmVhdEZhaWxlZEV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/events.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/monitor.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/monitor.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MonitorInterval = exports.RTTPinger = exports.Monitor = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst connect_1 = __webpack_require__(/*! ../cmap/connect */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connect.js\");\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server.js\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n    [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n    [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n    return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n    get connection() {\n        return this[kConnection];\n    }\n    constructor(server, options) {\n        super();\n        this[kServer] = server;\n        this[kConnection] = undefined;\n        this[kCancellationToken] = new mongo_types_1.CancellationToken();\n        this[kCancellationToken].setMaxListeners(Infinity);\n        this[kMonitorId] = undefined;\n        this.s = {\n            state: common_1.STATE_CLOSED\n        };\n        this.address = server.description.address;\n        this.options = Object.freeze({\n            connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n        });\n        const cancellationToken = this[kCancellationToken];\n        // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n        const connectOptions = Object.assign({\n            id: '<monitor>',\n            generation: server.pool.generation,\n            connectionType: connection_1.Connection,\n            cancellationToken,\n            hostAddress: server.description.hostAddress\n        }, options, \n        // force BSON serialization options\n        {\n            raw: false,\n            useBigInt64: false,\n            promoteLongs: true,\n            promoteValues: true,\n            promoteBuffers: true\n        });\n        // ensure no authentication is used for monitoring\n        delete connectOptions.credentials;\n        if (connectOptions.autoEncrypter) {\n            delete connectOptions.autoEncrypter;\n        }\n        this.connectOptions = Object.freeze(connectOptions);\n    }\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        // start\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS,\n            immediate: true\n        });\n    }\n    requestCheck() {\n        if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n            return;\n        }\n        this[kMonitorId]?.wake();\n    }\n    reset() {\n        const topologyVersion = this[kServer].description.topologyVersion;\n        if (isInCloseState(this) || topologyVersion == null) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // restart monitor\n        stateTransition(this, STATE_IDLE);\n        // restart monitoring\n        const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n        const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n        this[kMonitorId] = new MonitorInterval(monitorServer(this), {\n            heartbeatFrequencyMS: heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: minHeartbeatFrequencyMS\n        });\n    }\n    close() {\n        if (isInCloseState(this)) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        resetMonitorState(this);\n        // close monitor\n        this.emit('close');\n        stateTransition(this, common_1.STATE_CLOSED);\n    }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n    monitor[kMonitorId]?.stop();\n    monitor[kMonitorId] = undefined;\n    monitor[kRTTPinger]?.close();\n    monitor[kRTTPinger] = undefined;\n    monitor[kCancellationToken].emit('cancel');\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n}\nfunction checkServer(monitor, callback) {\n    let start = (0, utils_1.now)();\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n    function failureHandler(err) {\n        monitor[kConnection]?.destroy({ force: true });\n        monitor[kConnection] = undefined;\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err));\n        const error = !(err instanceof error_1.MongoError)\n            ? new error_1.MongoError(error_1.MongoError.buildErrorMessage(err), { cause: err })\n            : err;\n        error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n        if (error instanceof error_1.MongoNetworkTimeoutError) {\n            error.addErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        }\n        monitor.emit('resetServer', error);\n        callback(err);\n    }\n    const connection = monitor[kConnection];\n    if (connection && !connection.closed) {\n        const { serverApi, helloOk } = connection;\n        const connectTimeoutMS = monitor.options.connectTimeoutMS;\n        const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n        const topologyVersion = monitor[kServer].description.topologyVersion;\n        const isAwaitable = topologyVersion != null;\n        const cmd = {\n            [serverApi?.version || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: 1,\n            ...(isAwaitable && topologyVersion\n                ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n                : {})\n        };\n        const options = isAwaitable\n            ? {\n                socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n                exhaustAllowed: true\n            }\n            : { socketTimeoutMS: connectTimeoutMS };\n        if (isAwaitable && monitor[kRTTPinger] == null) {\n            monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({ heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS }, monitor.connectOptions));\n        }\n        connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, (err, hello) => {\n            if (err) {\n                return failureHandler(err);\n            }\n            if (!('isWritablePrimary' in hello)) {\n                // Provide hello-style response document.\n                hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n            }\n            const rttPinger = monitor[kRTTPinger];\n            const duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n            monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello));\n            // if we are using the streaming protocol then we immediately issue another `started`\n            // event, otherwise the \"check\" is complete and return to the main monitor loop\n            if (isAwaitable && hello.topologyVersion) {\n                monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n                start = (0, utils_1.now)();\n            }\n            else {\n                monitor[kRTTPinger]?.close();\n                monitor[kRTTPinger] = undefined;\n                callback(undefined, hello);\n            }\n        });\n        return;\n    }\n    // connecting does an implicit `hello`\n    (0, connect_1.connect)(monitor.connectOptions, (err, conn) => {\n        if (err) {\n            monitor[kConnection] = undefined;\n            failureHandler(err);\n            return;\n        }\n        if (conn) {\n            // Tell the connection that we are using the streaming protocol so that the\n            // connection's message stream will only read the last hello on the buffer.\n            conn.isMonitoringConnection = true;\n            if (isInCloseState(monitor)) {\n                conn.destroy({ force: true });\n                return;\n            }\n            monitor[kConnection] = conn;\n            monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello));\n            callback(undefined, conn.hello);\n        }\n    });\n}\nfunction monitorServer(monitor) {\n    return (callback) => {\n        if (monitor.s.state === STATE_MONITORING) {\n            process.nextTick(callback);\n            return;\n        }\n        stateTransition(monitor, STATE_MONITORING);\n        function done() {\n            if (!isInCloseState(monitor)) {\n                stateTransition(monitor, STATE_IDLE);\n            }\n            callback();\n        }\n        checkServer(monitor, (err, hello) => {\n            if (err) {\n                // otherwise an error occurred on initial discovery, also bail\n                if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n                    return done();\n                }\n            }\n            // if the check indicates streaming is supported, immediately reschedule monitoring\n            if (hello && hello.topologyVersion) {\n                (0, timers_1.setTimeout)(() => {\n                    if (!isInCloseState(monitor)) {\n                        monitor[kMonitorId]?.wake();\n                    }\n                }, 0);\n            }\n            done();\n        });\n    };\n}\nfunction makeTopologyVersion(tv) {\n    return {\n        processId: tv.processId,\n        // tests mock counter as just number, but in a real situation counter should always be a Long\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n    };\n}\n/** @internal */\nclass RTTPinger {\n    constructor(cancellationToken, options) {\n        this[kConnection] = undefined;\n        this[kCancellationToken] = cancellationToken;\n        this[kRoundTripTime] = 0;\n        this.closed = false;\n        const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n        this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n    }\n    get roundTripTime() {\n        return this[kRoundTripTime];\n    }\n    close() {\n        this.closed = true;\n        (0, timers_1.clearTimeout)(this[kMonitorId]);\n        this[kConnection]?.destroy({ force: true });\n        this[kConnection] = undefined;\n    }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n    const start = (0, utils_1.now)();\n    options.cancellationToken = rttPinger[kCancellationToken];\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    if (rttPinger.closed) {\n        return;\n    }\n    function measureAndReschedule(conn) {\n        if (rttPinger.closed) {\n            conn?.destroy({ force: true });\n            return;\n        }\n        if (rttPinger[kConnection] == null) {\n            rttPinger[kConnection] = conn;\n        }\n        rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n        rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n    }\n    const connection = rttPinger[kConnection];\n    if (connection == null) {\n        (0, connect_1.connect)(options, (err, conn) => {\n            if (err) {\n                rttPinger[kConnection] = undefined;\n                rttPinger[kRoundTripTime] = 0;\n                return;\n            }\n            measureAndReschedule(conn);\n        });\n        return;\n    }\n    connection.command((0, utils_1.ns)('admin.$cmd'), { [constants_1.LEGACY_HELLO_COMMAND]: 1 }, undefined, err => {\n        if (err) {\n            rttPinger[kConnection] = undefined;\n            rttPinger[kRoundTripTime] = 0;\n            return;\n        }\n        measureAndReschedule();\n    });\n}\n/**\n * @internal\n */\nclass MonitorInterval {\n    constructor(fn, options = {}) {\n        this.isExpeditedCallToFnScheduled = false;\n        this.stopped = false;\n        this.isExecutionInProgress = false;\n        this.hasExecutedOnce = false;\n        this._executeAndReschedule = () => {\n            if (this.stopped)\n                return;\n            if (this.timerId) {\n                (0, timers_1.clearTimeout)(this.timerId);\n            }\n            this.isExpeditedCallToFnScheduled = false;\n            this.isExecutionInProgress = true;\n            this.fn(() => {\n                this.lastExecutionEnded = (0, utils_1.now)();\n                this.isExecutionInProgress = false;\n                this._reschedule(this.heartbeatFrequencyMS);\n            });\n        };\n        this.fn = fn;\n        this.lastExecutionEnded = -Infinity;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 1000;\n        this.minHeartbeatFrequencyMS = options.minHeartbeatFrequencyMS ?? 500;\n        if (options.immediate) {\n            this._executeAndReschedule();\n        }\n        else {\n            this._reschedule(undefined);\n        }\n    }\n    wake() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        // TODO(NODE-4674): Add error handling and logging to the monitor\n        if (timeSinceLastCall < 0) {\n            return this._executeAndReschedule();\n        }\n        if (this.isExecutionInProgress) {\n            return;\n        }\n        // debounce multiple calls to wake within the `minInterval`\n        if (this.isExpeditedCallToFnScheduled) {\n            return;\n        }\n        // reschedule a call as soon as possible, ensuring the call never happens\n        // faster than the `minInterval`\n        if (timeSinceLastCall < this.minHeartbeatFrequencyMS) {\n            this.isExpeditedCallToFnScheduled = true;\n            this._reschedule(this.minHeartbeatFrequencyMS - timeSinceLastCall);\n            return;\n        }\n        this._executeAndReschedule();\n    }\n    stop() {\n        this.stopped = true;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n            this.timerId = undefined;\n        }\n        this.lastExecutionEnded = -Infinity;\n        this.isExpeditedCallToFnScheduled = false;\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n    toJSON() {\n        const currentTime = (0, utils_1.now)();\n        const timeSinceLastCall = currentTime - this.lastExecutionEnded;\n        return {\n            timerId: this.timerId != null ? 'set' : 'cleared',\n            lastCallTime: this.lastExecutionEnded,\n            isExpeditedCheckScheduled: this.isExpeditedCallToFnScheduled,\n            stopped: this.stopped,\n            heartbeatFrequencyMS: this.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: this.minHeartbeatFrequencyMS,\n            currentTime,\n            timeSinceLastCall\n        };\n    }\n    _reschedule(ms) {\n        if (this.stopped)\n            return;\n        if (this.timerId) {\n            (0, timers_1.clearTimeout)(this.timerId);\n        }\n        this.timerId = (0, timers_1.setTimeout)(this._executeAndReschedule, ms || this.heartbeatFrequencyMS);\n    }\n}\nexports.MonitorInterval = MonitorInterval;\n//# sourceMappingURL=monitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/monitor.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/server.js":
/*!**************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/server.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Server = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst connection_1 = __webpack_require__(/*! ../cmap/connection */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection.js\");\nconst connection_pool_1 = __webpack_require__(/*! ../cmap/connection_pool */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/connection_pool.js\");\nconst errors_1 = __webpack_require__(/*! ../cmap/errors */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/errors.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst transactions_1 = __webpack_require__(/*! ../transactions */ \"(ssr)/../../../../../node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst monitor_1 = __webpack_require__(/*! ./monitor */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/monitor.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_description.js\");\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kMonitor = Symbol('monitor');\n/** @internal */\nclass Server extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a server\n     */\n    constructor(topology, description, options) {\n        super();\n        this.commandAsync = (0, util_1.promisify)((ns, cmd, options, \n        // callback type defines Document result because result is never nullish when it succeeds, otherwise promise rejects\n        callback) => this.command(ns, cmd, options, callback));\n        this.serverApi = options.serverApi;\n        const poolOptions = { hostAddress: description.hostAddress, ...options };\n        this.topology = topology;\n        this.pool = new connection_pool_1.ConnectionPool(this, poolOptions);\n        this.s = {\n            description,\n            options,\n            state: common_1.STATE_CLOSED,\n            operationCount: 0\n        };\n        for (const event of [...constants_1.CMAP_EVENTS, ...constants_1.APM_EVENTS]) {\n            this.pool.on(event, (e) => this.emit(event, e));\n        }\n        this.pool.on(connection_1.Connection.CLUSTER_TIME_RECEIVED, (clusterTime) => {\n            this.clusterTime = clusterTime;\n        });\n        if (this.loadBalanced) {\n            this[kMonitor] = null;\n            // monitoring is disabled in load balancing mode\n            return;\n        }\n        // create the monitor\n        // TODO(NODE-4144): Remove new variable for type narrowing\n        const monitor = new monitor_1.Monitor(this, this.s.options);\n        this[kMonitor] = monitor;\n        for (const event of constants_1.HEARTBEAT_EVENTS) {\n            monitor.on(event, (e) => this.emit(event, e));\n        }\n        monitor.on('resetServer', (error) => markServerUnknown(this, error));\n        monitor.on(Server.SERVER_HEARTBEAT_SUCCEEDED, (event) => {\n            this.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(this.description.hostAddress, event.reply, {\n                roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n            }));\n            if (this.s.state === common_1.STATE_CONNECTING) {\n                stateTransition(this, common_1.STATE_CONNECTED);\n                this.emit(Server.CONNECT, this);\n            }\n        });\n    }\n    get clusterTime() {\n        return this.topology.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.topology.clusterTime = clusterTime;\n    }\n    get description() {\n        return this.s.description;\n    }\n    get name() {\n        return this.s.description.address;\n    }\n    get autoEncrypter() {\n        if (this.s.options && this.s.options.autoEncrypter) {\n            return this.s.options.autoEncrypter;\n        }\n        return;\n    }\n    get loadBalanced() {\n        return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /**\n     * Initiate server connect\n     */\n    connect() {\n        if (this.s.state !== common_1.STATE_CLOSED) {\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // If in load balancer mode we automatically set the server to\n        // a load balancer. It never transitions out of this state and\n        // has no monitor.\n        if (!this.loadBalanced) {\n            this[kMonitor]?.connect();\n        }\n        else {\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Server.CONNECT, this);\n        }\n    }\n    /** Destroy the server connection */\n    destroy(options, callback) {\n        if (typeof options === 'function') {\n            callback = options;\n            options = { force: false };\n        }\n        options = Object.assign({}, { force: false }, options);\n        if (this.s.state === common_1.STATE_CLOSED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CLOSING);\n        if (!this.loadBalanced) {\n            this[kMonitor]?.close();\n        }\n        this.pool.close(options, err => {\n            stateTransition(this, common_1.STATE_CLOSED);\n            this.emit('closed');\n            if (typeof callback === 'function') {\n                callback(err);\n            }\n        });\n    }\n    /**\n     * Immediately schedule monitoring of this server. If there already an attempt being made\n     * this will be a no-op.\n     */\n    requestCheck() {\n        if (!this.loadBalanced) {\n            this[kMonitor]?.requestCheck();\n        }\n    }\n    /**\n     * Execute a command\n     * @internal\n     */\n    command(ns, cmd, options, callback) {\n        if (callback == null) {\n            throw new error_1.MongoInvalidArgumentError('Callback must be provided');\n        }\n        if (ns.db == null || typeof ns === 'string') {\n            throw new error_1.MongoInvalidArgumentError('Namespace must not be a string');\n        }\n        if (this.s.state === common_1.STATE_CLOSING || this.s.state === common_1.STATE_CLOSED) {\n            callback(new error_1.MongoServerClosedError());\n            return;\n        }\n        // Clone the options\n        const finalOptions = Object.assign({}, options, { wireProtocolCommand: false });\n        // There are cases where we need to flag the read preference not to get sent in\n        // the command, such as pre-5.0 servers attempting to perform an aggregate write\n        // with a non-primary read preference. In this case the effective read preference\n        // (primary) is not the same as the provided and must be removed completely.\n        if (finalOptions.omitReadPreference) {\n            delete finalOptions.readPreference;\n        }\n        const session = finalOptions.session;\n        const conn = session?.pinnedConnection;\n        // NOTE: This is a hack! We can't retrieve the connections used for executing an operation\n        //       (and prevent them from being checked back in) at the point of operation execution.\n        //       This should be considered as part of the work for NODE-2882\n        // NOTE:\n        //       When incrementing operation count, it's important that we increment it before we\n        //       attempt to check out a connection from the pool.  This ensures that operations that\n        //       are waiting for a connection are included in the operation count.  Load balanced\n        //       mode will only ever have a single server, so the operation count doesn't matter.\n        //       Incrementing the operation count above the logic to handle load balanced mode would\n        //       require special logic to decrement it again, or would double increment (the load\n        //       balanced code makes a recursive call).  Instead, we increment the count after this\n        //       check.\n        if (this.loadBalanced && session && conn == null && isPinnableCommand(cmd, session)) {\n            this.pool.checkOut((err, checkedOut) => {\n                if (err || checkedOut == null) {\n                    if (callback)\n                        return callback(err);\n                    return;\n                }\n                session.pin(checkedOut);\n                this.command(ns, cmd, finalOptions, callback);\n            });\n            return;\n        }\n        this.incrementOperationCount();\n        this.pool.withConnection(conn, (err, conn, cb) => {\n            if (err || !conn) {\n                this.decrementOperationCount();\n                if (!err) {\n                    return cb(new error_1.MongoRuntimeError('Failed to create connection without error'));\n                }\n                if (!(err instanceof errors_1.PoolClearedError)) {\n                    this.handleError(err);\n                }\n                return cb(err);\n            }\n            conn.command(ns, cmd, finalOptions, makeOperationHandler(this, conn, cmd, finalOptions, (error, response) => {\n                this.decrementOperationCount();\n                cb(error, response);\n            }));\n        }, callback);\n    }\n    /**\n     * Handle SDAM error\n     * @internal\n     */\n    handleError(error, connection) {\n        if (!(error instanceof error_1.MongoError)) {\n            return;\n        }\n        const isStaleError = error.connectionGeneration && error.connectionGeneration < this.pool.generation;\n        if (isStaleError) {\n            return;\n        }\n        const isNetworkNonTimeoutError = error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError);\n        const isNetworkTimeoutBeforeHandshakeError = (0, error_1.isNetworkErrorBeforeHandshake)(error);\n        const isAuthHandshakeError = error.hasErrorLabel(error_1.MongoErrorLabel.HandshakeError);\n        if (isNetworkNonTimeoutError || isNetworkTimeoutBeforeHandshakeError || isAuthHandshakeError) {\n            // In load balanced mode we never mark the server as unknown and always\n            // clear for the specific service id.\n            if (!this.loadBalanced) {\n                error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                markServerUnknown(this, error);\n            }\n            else if (connection) {\n                this.pool.clear({ serviceId: connection.serviceId });\n            }\n        }\n        else {\n            if ((0, error_1.isSDAMUnrecoverableError)(error)) {\n                if (shouldHandleStateChangeError(this, error)) {\n                    const shouldClearPool = (0, utils_1.maxWireVersion)(this) <= 7 || (0, error_1.isNodeShuttingDownError)(error);\n                    if (this.loadBalanced && connection && shouldClearPool) {\n                        this.pool.clear({ serviceId: connection.serviceId });\n                    }\n                    if (!this.loadBalanced) {\n                        if (shouldClearPool) {\n                            error.addErrorLabel(error_1.MongoErrorLabel.ResetPool);\n                        }\n                        markServerUnknown(this, error);\n                        process.nextTick(() => this.requestCheck());\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Decrement the operation count, returning the new count.\n     */\n    decrementOperationCount() {\n        return (this.s.operationCount -= 1);\n    }\n    /**\n     * Increment the operation count, returning the new count.\n     */\n    incrementOperationCount() {\n        return (this.s.operationCount += 1);\n    }\n}\n/** @event */\nServer.SERVER_HEARTBEAT_STARTED = constants_1.SERVER_HEARTBEAT_STARTED;\n/** @event */\nServer.SERVER_HEARTBEAT_SUCCEEDED = constants_1.SERVER_HEARTBEAT_SUCCEEDED;\n/** @event */\nServer.SERVER_HEARTBEAT_FAILED = constants_1.SERVER_HEARTBEAT_FAILED;\n/** @event */\nServer.CONNECT = constants_1.CONNECT;\n/** @event */\nServer.DESCRIPTION_RECEIVED = constants_1.DESCRIPTION_RECEIVED;\n/** @event */\nServer.CLOSED = constants_1.CLOSED;\n/** @event */\nServer.ENDED = constants_1.ENDED;\nexports.Server = Server;\nfunction calculateRoundTripTime(oldRtt, duration) {\n    if (oldRtt === -1) {\n        return duration;\n    }\n    const alpha = 0.2;\n    return alpha * duration + (1 - alpha) * oldRtt;\n}\nfunction markServerUnknown(server, error) {\n    // Load balancer servers can never be marked unknown.\n    if (server.loadBalanced) {\n        return;\n    }\n    if (error instanceof error_1.MongoNetworkError && !(error instanceof error_1.MongoNetworkTimeoutError)) {\n        server[kMonitor]?.reset();\n    }\n    server.emit(Server.DESCRIPTION_RECEIVED, new server_description_1.ServerDescription(server.description.hostAddress, undefined, { error }));\n}\nfunction isPinnableCommand(cmd, session) {\n    if (session) {\n        return (session.inTransaction() ||\n            'aggregate' in cmd ||\n            'find' in cmd ||\n            'getMore' in cmd ||\n            'listCollections' in cmd ||\n            'listIndexes' in cmd);\n    }\n    return false;\n}\nfunction connectionIsStale(pool, connection) {\n    if (connection.serviceId) {\n        return (connection.generation !== pool.serviceGenerations.get(connection.serviceId.toHexString()));\n    }\n    return connection.generation !== pool.generation;\n}\nfunction shouldHandleStateChangeError(server, err) {\n    const etv = err.topologyVersion;\n    const stv = server.description.topologyVersion;\n    return (0, server_description_1.compareTopologyVersion)(stv, etv) < 0;\n}\nfunction inActiveTransaction(session, cmd) {\n    return session && session.inTransaction() && !(0, transactions_1.isTransactionCommand)(cmd);\n}\n/** this checks the retryWrites option passed down from the client options, it\n * does not check if the server supports retryable writes */\nfunction isRetryableWritesEnabled(topology) {\n    return topology.s.options.retryWrites !== false;\n}\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n    const session = options?.session;\n    return function handleOperationResult(error, result) {\n        // We should not swallow an error if it is present.\n        if (error == null && result != null) {\n            return callback(undefined, result);\n        }\n        if (options != null && 'noResponse' in options && options.noResponse === true) {\n            return callback(undefined, null);\n        }\n        if (!error) {\n            return callback(new error_1.MongoUnexpectedServerResponseError('Empty response with no error'));\n        }\n        if (!(error instanceof error_1.MongoError)) {\n            // Node.js or some other error we have not special handling for\n            return callback(error);\n        }\n        if (connectionIsStale(server.pool, connection)) {\n            return callback(error);\n        }\n        if (error instanceof error_1.MongoNetworkError) {\n            if (session && !session.hasEnded && session.serverSession) {\n                session.serverSession.isDirty = true;\n            }\n            // inActiveTransaction check handles commit and abort.\n            if (inActiveTransaction(session, cmd) &&\n                !error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.TransientTransactionError);\n            }\n            if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, utils_1.supportsRetryableWrites)(server) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        else {\n            if ((isRetryableWritesEnabled(server.topology) || (0, transactions_1.isTransactionCommand)(cmd)) &&\n                (0, error_1.needsRetryableWriteLabel)(error, (0, utils_1.maxWireVersion)(server)) &&\n                !inActiveTransaction(session, cmd)) {\n                error.addErrorLabel(error_1.MongoErrorLabel.RetryableWriteError);\n            }\n        }\n        if (session &&\n            session.isPinned &&\n            error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n            session.unpin({ force: true });\n        }\n        server.handleError(error, connection);\n        return callback(error);\n    };\n}\n//# sourceMappingURL=server.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vc2VydmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZCxlQUFlLG1CQUFPLENBQUMsa0JBQU07QUFDN0IscUJBQXFCLG1CQUFPLENBQUMsNEZBQW9CO0FBQ2pELDBCQUEwQixtQkFBTyxDQUFDLHNHQUF5QjtBQUMzRCxpQkFBaUIsbUJBQU8sQ0FBQyxvRkFBZ0I7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsZ0ZBQWM7QUFDMUMsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEMsc0JBQXNCLG1CQUFPLENBQUMsb0ZBQWdCO0FBQzlDLHVCQUF1QixtQkFBTyxDQUFDLHNGQUFpQjtBQUNoRCxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyw4RUFBVTtBQUNuQyxrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBVztBQUNyQyw2QkFBNkIsbUJBQU8sQ0FBQyxzR0FBc0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxrQ0FBa0MsSUFBSSxjQUFjO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsYUFBYSw0QkFBNEI7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxpQ0FBaUM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsaUNBQWlDO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxSUFBcUksT0FBTztBQUM1STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixhQUFhO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ByZWRpc18yLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tb25nb2RiL2xpYi9zZGFtL3NlcnZlci5qcz82MDNkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TZXJ2ZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9jbWFwL2Nvbm5lY3Rpb25cIik7XG5jb25zdCBjb25uZWN0aW9uX3Bvb2xfMSA9IHJlcXVpcmUoXCIuLi9jbWFwL2Nvbm5lY3Rpb25fcG9vbFwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2NtYXAvZXJyb3JzXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuLi9lcnJvclwiKTtcbmNvbnN0IG1vbmdvX3R5cGVzXzEgPSByZXF1aXJlKFwiLi4vbW9uZ29fdHlwZXNcIik7XG5jb25zdCB0cmFuc2FjdGlvbnNfMSA9IHJlcXVpcmUoXCIuLi90cmFuc2FjdGlvbnNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4uL3V0aWxzXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5jb25zdCBtb25pdG9yXzEgPSByZXF1aXJlKFwiLi9tb25pdG9yXCIpO1xuY29uc3Qgc2VydmVyX2Rlc2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9zZXJ2ZXJfZGVzY3JpcHRpb25cIik7XG5jb25zdCBzdGF0ZVRyYW5zaXRpb24gPSAoMCwgdXRpbHNfMS5tYWtlU3RhdGVNYWNoaW5lKSh7XG4gICAgW2NvbW1vbl8xLlNUQVRFX0NMT1NFRF06IFtjb21tb25fMS5TVEFURV9DTE9TRUQsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RJTkddLFxuICAgIFtjb21tb25fMS5TVEFURV9DT05ORUNUSU5HXTogW2NvbW1vbl8xLlNUQVRFX0NPTk5FQ1RJTkcsIGNvbW1vbl8xLlNUQVRFX0NMT1NJTkcsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCwgY29tbW9uXzEuU1RBVEVfQ0xPU0VEXSxcbiAgICBbY29tbW9uXzEuU1RBVEVfQ09OTkVDVEVEXTogW2NvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCwgY29tbW9uXzEuU1RBVEVfQ0xPU0lORywgY29tbW9uXzEuU1RBVEVfQ0xPU0VEXSxcbiAgICBbY29tbW9uXzEuU1RBVEVfQ0xPU0lOR106IFtjb21tb25fMS5TVEFURV9DTE9TSU5HLCBjb21tb25fMS5TVEFURV9DTE9TRURdXG59KTtcbi8qKiBAaW50ZXJuYWwgKi9cbmNvbnN0IGtNb25pdG9yID0gU3ltYm9sKCdtb25pdG9yJyk7XG4vKiogQGludGVybmFsICovXG5jbGFzcyBTZXJ2ZXIgZXh0ZW5kcyBtb25nb190eXBlc18xLlR5cGVkRXZlbnRFbWl0dGVyIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzZXJ2ZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0b3BvbG9neSwgZGVzY3JpcHRpb24sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5jb21tYW5kQXN5bmMgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoKG5zLCBjbWQsIG9wdGlvbnMsIFxuICAgICAgICAvLyBjYWxsYmFjayB0eXBlIGRlZmluZXMgRG9jdW1lbnQgcmVzdWx0IGJlY2F1c2UgcmVzdWx0IGlzIG5ldmVyIG51bGxpc2ggd2hlbiBpdCBzdWNjZWVkcywgb3RoZXJ3aXNlIHByb21pc2UgcmVqZWN0c1xuICAgICAgICBjYWxsYmFjaykgPT4gdGhpcy5jb21tYW5kKG5zLCBjbWQsIG9wdGlvbnMsIGNhbGxiYWNrKSk7XG4gICAgICAgIHRoaXMuc2VydmVyQXBpID0gb3B0aW9ucy5zZXJ2ZXJBcGk7XG4gICAgICAgIGNvbnN0IHBvb2xPcHRpb25zID0geyBob3N0QWRkcmVzczogZGVzY3JpcHRpb24uaG9zdEFkZHJlc3MsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgdGhpcy50b3BvbG9neSA9IHRvcG9sb2d5O1xuICAgICAgICB0aGlzLnBvb2wgPSBuZXcgY29ubmVjdGlvbl9wb29sXzEuQ29ubmVjdGlvblBvb2wodGhpcywgcG9vbE9wdGlvbnMpO1xuICAgICAgICB0aGlzLnMgPSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICBzdGF0ZTogY29tbW9uXzEuU1RBVEVfQ0xPU0VELFxuICAgICAgICAgICAgb3BlcmF0aW9uQ291bnQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBbLi4uY29uc3RhbnRzXzEuQ01BUF9FVkVOVFMsIC4uLmNvbnN0YW50c18xLkFQTV9FVkVOVFNdKSB7XG4gICAgICAgICAgICB0aGlzLnBvb2wub24oZXZlbnQsIChlKSA9PiB0aGlzLmVtaXQoZXZlbnQsIGUpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvb2wub24oY29ubmVjdGlvbl8xLkNvbm5lY3Rpb24uQ0xVU1RFUl9USU1FX1JFQ0VJVkVELCAoY2x1c3RlclRpbWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2x1c3RlclRpbWUgPSBjbHVzdGVyVGltZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmxvYWRCYWxhbmNlZCkge1xuICAgICAgICAgICAgdGhpc1trTW9uaXRvcl0gPSBudWxsO1xuICAgICAgICAgICAgLy8gbW9uaXRvcmluZyBpcyBkaXNhYmxlZCBpbiBsb2FkIGJhbGFuY2luZyBtb2RlXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBtb25pdG9yXG4gICAgICAgIC8vIFRPRE8oTk9ERS00MTQ0KTogUmVtb3ZlIG5ldyB2YXJpYWJsZSBmb3IgdHlwZSBuYXJyb3dpbmdcbiAgICAgICAgY29uc3QgbW9uaXRvciA9IG5ldyBtb25pdG9yXzEuTW9uaXRvcih0aGlzLCB0aGlzLnMub3B0aW9ucyk7XG4gICAgICAgIHRoaXNba01vbml0b3JdID0gbW9uaXRvcjtcbiAgICAgICAgZm9yIChjb25zdCBldmVudCBvZiBjb25zdGFudHNfMS5IRUFSVEJFQVRfRVZFTlRTKSB7XG4gICAgICAgICAgICBtb25pdG9yLm9uKGV2ZW50LCAoZSkgPT4gdGhpcy5lbWl0KGV2ZW50LCBlKSk7XG4gICAgICAgIH1cbiAgICAgICAgbW9uaXRvci5vbigncmVzZXRTZXJ2ZXInLCAoZXJyb3IpID0+IG1hcmtTZXJ2ZXJVbmtub3duKHRoaXMsIGVycm9yKSk7XG4gICAgICAgIG1vbml0b3Iub24oU2VydmVyLlNFUlZFUl9IRUFSVEJFQVRfU1VDQ0VFREVELCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdChTZXJ2ZXIuREVTQ1JJUFRJT05fUkVDRUlWRUQsIG5ldyBzZXJ2ZXJfZGVzY3JpcHRpb25fMS5TZXJ2ZXJEZXNjcmlwdGlvbih0aGlzLmRlc2NyaXB0aW9uLmhvc3RBZGRyZXNzLCBldmVudC5yZXBseSwge1xuICAgICAgICAgICAgICAgIHJvdW5kVHJpcFRpbWU6IGNhbGN1bGF0ZVJvdW5kVHJpcFRpbWUodGhpcy5kZXNjcmlwdGlvbi5yb3VuZFRyaXBUaW1lLCBldmVudC5kdXJhdGlvbilcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnMuc3RhdGUgPT09IGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RJTkcpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZVRyYW5zaXRpb24odGhpcywgY29tbW9uXzEuU1RBVEVfQ09OTkVDVEVEKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoU2VydmVyLkNPTk5FQ1QsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2V0IGNsdXN0ZXJUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b3BvbG9neS5jbHVzdGVyVGltZTtcbiAgICB9XG4gICAgc2V0IGNsdXN0ZXJUaW1lKGNsdXN0ZXJUaW1lKSB7XG4gICAgICAgIHRoaXMudG9wb2xvZ3kuY2x1c3RlclRpbWUgPSBjbHVzdGVyVGltZTtcbiAgICB9XG4gICAgZ2V0IGRlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zLmRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucy5kZXNjcmlwdGlvbi5hZGRyZXNzO1xuICAgIH1cbiAgICBnZXQgYXV0b0VuY3J5cHRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucy5vcHRpb25zICYmIHRoaXMucy5vcHRpb25zLmF1dG9FbmNyeXB0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnMub3B0aW9ucy5hdXRvRW5jcnlwdGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ2V0IGxvYWRCYWxhbmNlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9wb2xvZ3kuZGVzY3JpcHRpb24udHlwZSA9PT0gY29tbW9uXzEuVG9wb2xvZ3lUeXBlLkxvYWRCYWxhbmNlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhdGUgc2VydmVyIGNvbm5lY3RcbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5zLnN0YXRlICE9PSBjb21tb25fMS5TVEFURV9DTE9TRUQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZVRyYW5zaXRpb24odGhpcywgY29tbW9uXzEuU1RBVEVfQ09OTkVDVElORyk7XG4gICAgICAgIC8vIElmIGluIGxvYWQgYmFsYW5jZXIgbW9kZSB3ZSBhdXRvbWF0aWNhbGx5IHNldCB0aGUgc2VydmVyIHRvXG4gICAgICAgIC8vIGEgbG9hZCBiYWxhbmNlci4gSXQgbmV2ZXIgdHJhbnNpdGlvbnMgb3V0IG9mIHRoaXMgc3RhdGUgYW5kXG4gICAgICAgIC8vIGhhcyBubyBtb25pdG9yLlxuICAgICAgICBpZiAoIXRoaXMubG9hZEJhbGFuY2VkKSB7XG4gICAgICAgICAgICB0aGlzW2tNb25pdG9yXT8uY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NPTk5FQ1RFRCk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoU2VydmVyLkNPTk5FQ1QsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBEZXN0cm95IHRoZSBzZXJ2ZXIgY29ubmVjdGlvbiAqL1xuICAgIGRlc3Ryb3kob3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0geyBmb3JjZTogZmFsc2UgfTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgeyBmb3JjZTogZmFsc2UgfSwgb3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLnMuc3RhdGUgPT09IGNvbW1vbl8xLlNUQVRFX0NMT1NFRCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGVUcmFuc2l0aW9uKHRoaXMsIGNvbW1vbl8xLlNUQVRFX0NMT1NJTkcpO1xuICAgICAgICBpZiAoIXRoaXMubG9hZEJhbGFuY2VkKSB7XG4gICAgICAgICAgICB0aGlzW2tNb25pdG9yXT8uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvb2wuY2xvc2Uob3B0aW9ucywgZXJyID0+IHtcbiAgICAgICAgICAgIHN0YXRlVHJhbnNpdGlvbih0aGlzLCBjb21tb25fMS5TVEFURV9DTE9TRUQpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjbG9zZWQnKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1tZWRpYXRlbHkgc2NoZWR1bGUgbW9uaXRvcmluZyBvZiB0aGlzIHNlcnZlci4gSWYgdGhlcmUgYWxyZWFkeSBhbiBhdHRlbXB0IGJlaW5nIG1hZGVcbiAgICAgKiB0aGlzIHdpbGwgYmUgYSBuby1vcC5cbiAgICAgKi9cbiAgICByZXF1ZXN0Q2hlY2soKSB7XG4gICAgICAgIGlmICghdGhpcy5sb2FkQmFsYW5jZWQpIHtcbiAgICAgICAgICAgIHRoaXNba01vbml0b3JdPy5yZXF1ZXN0Q2hlY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgY29tbWFuZFxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIGNvbW1hbmQobnMsIGNtZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0NhbGxiYWNrIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnMuZGIgPT0gbnVsbCB8fCB0eXBlb2YgbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JfMS5Nb25nb0ludmFsaWRBcmd1bWVudEVycm9yKCdOYW1lc3BhY2UgbXVzdCBub3QgYmUgYSBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zLnN0YXRlID09PSBjb21tb25fMS5TVEFURV9DTE9TSU5HIHx8IHRoaXMucy5zdGF0ZSA9PT0gY29tbW9uXzEuU1RBVEVfQ0xPU0VEKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhuZXcgZXJyb3JfMS5Nb25nb1NlcnZlckNsb3NlZEVycm9yKCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIENsb25lIHRoZSBvcHRpb25zXG4gICAgICAgIGNvbnN0IGZpbmFsT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgd2lyZVByb3RvY29sQ29tbWFuZDogZmFsc2UgfSk7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBjYXNlcyB3aGVyZSB3ZSBuZWVkIHRvIGZsYWcgdGhlIHJlYWQgcHJlZmVyZW5jZSBub3QgdG8gZ2V0IHNlbnQgaW5cbiAgICAgICAgLy8gdGhlIGNvbW1hbmQsIHN1Y2ggYXMgcHJlLTUuMCBzZXJ2ZXJzIGF0dGVtcHRpbmcgdG8gcGVyZm9ybSBhbiBhZ2dyZWdhdGUgd3JpdGVcbiAgICAgICAgLy8gd2l0aCBhIG5vbi1wcmltYXJ5IHJlYWQgcHJlZmVyZW5jZS4gSW4gdGhpcyBjYXNlIHRoZSBlZmZlY3RpdmUgcmVhZCBwcmVmZXJlbmNlXG4gICAgICAgIC8vIChwcmltYXJ5KSBpcyBub3QgdGhlIHNhbWUgYXMgdGhlIHByb3ZpZGVkIGFuZCBtdXN0IGJlIHJlbW92ZWQgY29tcGxldGVseS5cbiAgICAgICAgaWYgKGZpbmFsT3B0aW9ucy5vbWl0UmVhZFByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBmaW5hbE9wdGlvbnMucmVhZFByZWZlcmVuY2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IGZpbmFsT3B0aW9ucy5zZXNzaW9uO1xuICAgICAgICBjb25zdCBjb25uID0gc2Vzc2lvbj8ucGlubmVkQ29ubmVjdGlvbjtcbiAgICAgICAgLy8gTk9URTogVGhpcyBpcyBhIGhhY2shIFdlIGNhbid0IHJldHJpZXZlIHRoZSBjb25uZWN0aW9ucyB1c2VkIGZvciBleGVjdXRpbmcgYW4gb3BlcmF0aW9uXG4gICAgICAgIC8vICAgICAgIChhbmQgcHJldmVudCB0aGVtIGZyb20gYmVpbmcgY2hlY2tlZCBiYWNrIGluKSBhdCB0aGUgcG9pbnQgb2Ygb3BlcmF0aW9uIGV4ZWN1dGlvbi5cbiAgICAgICAgLy8gICAgICAgVGhpcyBzaG91bGQgYmUgY29uc2lkZXJlZCBhcyBwYXJ0IG9mIHRoZSB3b3JrIGZvciBOT0RFLTI4ODJcbiAgICAgICAgLy8gTk9URTpcbiAgICAgICAgLy8gICAgICAgV2hlbiBpbmNyZW1lbnRpbmcgb3BlcmF0aW9uIGNvdW50LCBpdCdzIGltcG9ydGFudCB0aGF0IHdlIGluY3JlbWVudCBpdCBiZWZvcmUgd2VcbiAgICAgICAgLy8gICAgICAgYXR0ZW1wdCB0byBjaGVjayBvdXQgYSBjb25uZWN0aW9uIGZyb20gdGhlIHBvb2wuICBUaGlzIGVuc3VyZXMgdGhhdCBvcGVyYXRpb25zIHRoYXRcbiAgICAgICAgLy8gICAgICAgYXJlIHdhaXRpbmcgZm9yIGEgY29ubmVjdGlvbiBhcmUgaW5jbHVkZWQgaW4gdGhlIG9wZXJhdGlvbiBjb3VudC4gIExvYWQgYmFsYW5jZWRcbiAgICAgICAgLy8gICAgICAgbW9kZSB3aWxsIG9ubHkgZXZlciBoYXZlIGEgc2luZ2xlIHNlcnZlciwgc28gdGhlIG9wZXJhdGlvbiBjb3VudCBkb2Vzbid0IG1hdHRlci5cbiAgICAgICAgLy8gICAgICAgSW5jcmVtZW50aW5nIHRoZSBvcGVyYXRpb24gY291bnQgYWJvdmUgdGhlIGxvZ2ljIHRvIGhhbmRsZSBsb2FkIGJhbGFuY2VkIG1vZGUgd291bGRcbiAgICAgICAgLy8gICAgICAgcmVxdWlyZSBzcGVjaWFsIGxvZ2ljIHRvIGRlY3JlbWVudCBpdCBhZ2Fpbiwgb3Igd291bGQgZG91YmxlIGluY3JlbWVudCAodGhlIGxvYWRcbiAgICAgICAgLy8gICAgICAgYmFsYW5jZWQgY29kZSBtYWtlcyBhIHJlY3Vyc2l2ZSBjYWxsKS4gIEluc3RlYWQsIHdlIGluY3JlbWVudCB0aGUgY291bnQgYWZ0ZXIgdGhpc1xuICAgICAgICAvLyAgICAgICBjaGVjay5cbiAgICAgICAgaWYgKHRoaXMubG9hZEJhbGFuY2VkICYmIHNlc3Npb24gJiYgY29ubiA9PSBudWxsICYmIGlzUGlubmFibGVDb21tYW5kKGNtZCwgc2Vzc2lvbikpIHtcbiAgICAgICAgICAgIHRoaXMucG9vbC5jaGVja091dCgoZXJyLCBjaGVja2VkT3V0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVyciB8fCBjaGVja2VkT3V0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5waW4oY2hlY2tlZE91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kKG5zLCBjbWQsIGZpbmFsT3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmNyZW1lbnRPcGVyYXRpb25Db3VudCgpO1xuICAgICAgICB0aGlzLnBvb2wud2l0aENvbm5lY3Rpb24oY29ubiwgKGVyciwgY29ubiwgY2IpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIgfHwgIWNvbm4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY3JlbWVudE9wZXJhdGlvbkNvdW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNiKG5ldyBlcnJvcl8xLk1vbmdvUnVudGltZUVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGNvbm5lY3Rpb24gd2l0aG91dCBlcnJvcicpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgZXJyb3JzXzEuUG9vbENsZWFyZWRFcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbm4uY29tbWFuZChucywgY21kLCBmaW5hbE9wdGlvbnMsIG1ha2VPcGVyYXRpb25IYW5kbGVyKHRoaXMsIGNvbm4sIGNtZCwgZmluYWxPcHRpb25zLCAoZXJyb3IsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNyZW1lbnRPcGVyYXRpb25Db3VudCgpO1xuICAgICAgICAgICAgICAgIGNiKGVycm9yLCByZXNwb25zZSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0sIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlIFNEQU0gZXJyb3JcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBoYW5kbGVFcnJvcihlcnJvciwgY29ubmVjdGlvbikge1xuICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29FcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc1N0YWxlRXJyb3IgPSBlcnJvci5jb25uZWN0aW9uR2VuZXJhdGlvbiAmJiBlcnJvci5jb25uZWN0aW9uR2VuZXJhdGlvbiA8IHRoaXMucG9vbC5nZW5lcmF0aW9uO1xuICAgICAgICBpZiAoaXNTdGFsZUVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXNOZXR3b3JrTm9uVGltZW91dEVycm9yID0gZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya0Vycm9yICYmICEoZXJyb3IgaW5zdGFuY2VvZiBlcnJvcl8xLk1vbmdvTmV0d29ya1RpbWVvdXRFcnJvcik7XG4gICAgICAgIGNvbnN0IGlzTmV0d29ya1RpbWVvdXRCZWZvcmVIYW5kc2hha2VFcnJvciA9ICgwLCBlcnJvcl8xLmlzTmV0d29ya0Vycm9yQmVmb3JlSGFuZHNoYWtlKShlcnJvcik7XG4gICAgICAgIGNvbnN0IGlzQXV0aEhhbmRzaGFrZUVycm9yID0gZXJyb3IuaGFzRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5IYW5kc2hha2VFcnJvcik7XG4gICAgICAgIGlmIChpc05ldHdvcmtOb25UaW1lb3V0RXJyb3IgfHwgaXNOZXR3b3JrVGltZW91dEJlZm9yZUhhbmRzaGFrZUVycm9yIHx8IGlzQXV0aEhhbmRzaGFrZUVycm9yKSB7XG4gICAgICAgICAgICAvLyBJbiBsb2FkIGJhbGFuY2VkIG1vZGUgd2UgbmV2ZXIgbWFyayB0aGUgc2VydmVyIGFzIHVua25vd24gYW5kIGFsd2F5c1xuICAgICAgICAgICAgLy8gY2xlYXIgZm9yIHRoZSBzcGVjaWZpYyBzZXJ2aWNlIGlkLlxuICAgICAgICAgICAgaWYgKCF0aGlzLmxvYWRCYWxhbmNlZCkge1xuICAgICAgICAgICAgICAgIGVycm9yLmFkZEVycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuUmVzZXRQb29sKTtcbiAgICAgICAgICAgICAgICBtYXJrU2VydmVyVW5rbm93bih0aGlzLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb29sLmNsZWFyKHsgc2VydmljZUlkOiBjb25uZWN0aW9uLnNlcnZpY2VJZCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgoMCwgZXJyb3JfMS5pc1NEQU1VbnJlY292ZXJhYmxlRXJyb3IpKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZUVycm9yKHRoaXMsIGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaG91bGRDbGVhclBvb2wgPSAoMCwgdXRpbHNfMS5tYXhXaXJlVmVyc2lvbikodGhpcykgPD0gNyB8fCAoMCwgZXJyb3JfMS5pc05vZGVTaHV0dGluZ0Rvd25FcnJvcikoZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sb2FkQmFsYW5jZWQgJiYgY29ubmVjdGlvbiAmJiBzaG91bGRDbGVhclBvb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9vbC5jbGVhcih7IHNlcnZpY2VJZDogY29ubmVjdGlvbi5zZXJ2aWNlSWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmxvYWRCYWxhbmNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZENsZWFyUG9vbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLmFkZEVycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuUmVzZXRQb29sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtTZXJ2ZXJVbmtub3duKHRoaXMsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gdGhpcy5yZXF1ZXN0Q2hlY2soKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjcmVtZW50IHRoZSBvcGVyYXRpb24gY291bnQsIHJldHVybmluZyB0aGUgbmV3IGNvdW50LlxuICAgICAqL1xuICAgIGRlY3JlbWVudE9wZXJhdGlvbkNvdW50KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucy5vcGVyYXRpb25Db3VudCAtPSAxKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVtZW50IHRoZSBvcGVyYXRpb24gY291bnQsIHJldHVybmluZyB0aGUgbmV3IGNvdW50LlxuICAgICAqL1xuICAgIGluY3JlbWVudE9wZXJhdGlvbkNvdW50KCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucy5vcGVyYXRpb25Db3VudCArPSAxKTtcbiAgICB9XG59XG4vKiogQGV2ZW50ICovXG5TZXJ2ZXIuU0VSVkVSX0hFQVJUQkVBVF9TVEFSVEVEID0gY29uc3RhbnRzXzEuU0VSVkVSX0hFQVJUQkVBVF9TVEFSVEVEO1xuLyoqIEBldmVudCAqL1xuU2VydmVyLlNFUlZFUl9IRUFSVEJFQVRfU1VDQ0VFREVEID0gY29uc3RhbnRzXzEuU0VSVkVSX0hFQVJUQkVBVF9TVUNDRUVERUQ7XG4vKiogQGV2ZW50ICovXG5TZXJ2ZXIuU0VSVkVSX0hFQVJUQkVBVF9GQUlMRUQgPSBjb25zdGFudHNfMS5TRVJWRVJfSEVBUlRCRUFUX0ZBSUxFRDtcbi8qKiBAZXZlbnQgKi9cblNlcnZlci5DT05ORUNUID0gY29uc3RhbnRzXzEuQ09OTkVDVDtcbi8qKiBAZXZlbnQgKi9cblNlcnZlci5ERVNDUklQVElPTl9SRUNFSVZFRCA9IGNvbnN0YW50c18xLkRFU0NSSVBUSU9OX1JFQ0VJVkVEO1xuLyoqIEBldmVudCAqL1xuU2VydmVyLkNMT1NFRCA9IGNvbnN0YW50c18xLkNMT1NFRDtcbi8qKiBAZXZlbnQgKi9cblNlcnZlci5FTkRFRCA9IGNvbnN0YW50c18xLkVOREVEO1xuZXhwb3J0cy5TZXJ2ZXIgPSBTZXJ2ZXI7XG5mdW5jdGlvbiBjYWxjdWxhdGVSb3VuZFRyaXBUaW1lKG9sZFJ0dCwgZHVyYXRpb24pIHtcbiAgICBpZiAob2xkUnR0ID09PSAtMSkge1xuICAgICAgICByZXR1cm4gZHVyYXRpb247XG4gICAgfVxuICAgIGNvbnN0IGFscGhhID0gMC4yO1xuICAgIHJldHVybiBhbHBoYSAqIGR1cmF0aW9uICsgKDEgLSBhbHBoYSkgKiBvbGRSdHQ7XG59XG5mdW5jdGlvbiBtYXJrU2VydmVyVW5rbm93bihzZXJ2ZXIsIGVycm9yKSB7XG4gICAgLy8gTG9hZCBiYWxhbmNlciBzZXJ2ZXJzIGNhbiBuZXZlciBiZSBtYXJrZWQgdW5rbm93bi5cbiAgICBpZiAoc2VydmVyLmxvYWRCYWxhbmNlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29OZXR3b3JrRXJyb3IgJiYgIShlcnJvciBpbnN0YW5jZW9mIGVycm9yXzEuTW9uZ29OZXR3b3JrVGltZW91dEVycm9yKSkge1xuICAgICAgICBzZXJ2ZXJba01vbml0b3JdPy5yZXNldCgpO1xuICAgIH1cbiAgICBzZXJ2ZXIuZW1pdChTZXJ2ZXIuREVTQ1JJUFRJT05fUkVDRUlWRUQsIG5ldyBzZXJ2ZXJfZGVzY3JpcHRpb25fMS5TZXJ2ZXJEZXNjcmlwdGlvbihzZXJ2ZXIuZGVzY3JpcHRpb24uaG9zdEFkZHJlc3MsIHVuZGVmaW5lZCwgeyBlcnJvciB9KSk7XG59XG5mdW5jdGlvbiBpc1Bpbm5hYmxlQ29tbWFuZChjbWQsIHNlc3Npb24pIHtcbiAgICBpZiAoc2Vzc2lvbikge1xuICAgICAgICByZXR1cm4gKHNlc3Npb24uaW5UcmFuc2FjdGlvbigpIHx8XG4gICAgICAgICAgICAnYWdncmVnYXRlJyBpbiBjbWQgfHxcbiAgICAgICAgICAgICdmaW5kJyBpbiBjbWQgfHxcbiAgICAgICAgICAgICdnZXRNb3JlJyBpbiBjbWQgfHxcbiAgICAgICAgICAgICdsaXN0Q29sbGVjdGlvbnMnIGluIGNtZCB8fFxuICAgICAgICAgICAgJ2xpc3RJbmRleGVzJyBpbiBjbWQpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb25uZWN0aW9uSXNTdGFsZShwb29sLCBjb25uZWN0aW9uKSB7XG4gICAgaWYgKGNvbm5lY3Rpb24uc2VydmljZUlkKSB7XG4gICAgICAgIHJldHVybiAoY29ubmVjdGlvbi5nZW5lcmF0aW9uICE9PSBwb29sLnNlcnZpY2VHZW5lcmF0aW9ucy5nZXQoY29ubmVjdGlvbi5zZXJ2aWNlSWQudG9IZXhTdHJpbmcoKSkpO1xuICAgIH1cbiAgICByZXR1cm4gY29ubmVjdGlvbi5nZW5lcmF0aW9uICE9PSBwb29sLmdlbmVyYXRpb247XG59XG5mdW5jdGlvbiBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZUVycm9yKHNlcnZlciwgZXJyKSB7XG4gICAgY29uc3QgZXR2ID0gZXJyLnRvcG9sb2d5VmVyc2lvbjtcbiAgICBjb25zdCBzdHYgPSBzZXJ2ZXIuZGVzY3JpcHRpb24udG9wb2xvZ3lWZXJzaW9uO1xuICAgIHJldHVybiAoMCwgc2VydmVyX2Rlc2NyaXB0aW9uXzEuY29tcGFyZVRvcG9sb2d5VmVyc2lvbikoc3R2LCBldHYpIDwgMDtcbn1cbmZ1bmN0aW9uIGluQWN0aXZlVHJhbnNhY3Rpb24oc2Vzc2lvbiwgY21kKSB7XG4gICAgcmV0dXJuIHNlc3Npb24gJiYgc2Vzc2lvbi5pblRyYW5zYWN0aW9uKCkgJiYgISgwLCB0cmFuc2FjdGlvbnNfMS5pc1RyYW5zYWN0aW9uQ29tbWFuZCkoY21kKTtcbn1cbi8qKiB0aGlzIGNoZWNrcyB0aGUgcmV0cnlXcml0ZXMgb3B0aW9uIHBhc3NlZCBkb3duIGZyb20gdGhlIGNsaWVudCBvcHRpb25zLCBpdFxuICogZG9lcyBub3QgY2hlY2sgaWYgdGhlIHNlcnZlciBzdXBwb3J0cyByZXRyeWFibGUgd3JpdGVzICovXG5mdW5jdGlvbiBpc1JldHJ5YWJsZVdyaXRlc0VuYWJsZWQodG9wb2xvZ3kpIHtcbiAgICByZXR1cm4gdG9wb2xvZ3kucy5vcHRpb25zLnJldHJ5V3JpdGVzICE9PSBmYWxzZTtcbn1cbmZ1bmN0aW9uIG1ha2VPcGVyYXRpb25IYW5kbGVyKHNlcnZlciwgY29ubmVjdGlvbiwgY21kLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHNlc3Npb24gPSBvcHRpb25zPy5zZXNzaW9uO1xuICAgIHJldHVybiBmdW5jdGlvbiBoYW5kbGVPcGVyYXRpb25SZXN1bHQoZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAvLyBXZSBzaG91bGQgbm90IHN3YWxsb3cgYW4gZXJyb3IgaWYgaXQgaXMgcHJlc2VudC5cbiAgICAgICAgaWYgKGVycm9yID09IG51bGwgJiYgcmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh1bmRlZmluZWQsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMgIT0gbnVsbCAmJiAnbm9SZXNwb25zZScgaW4gb3B0aW9ucyAmJiBvcHRpb25zLm5vUmVzcG9uc2UgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh1bmRlZmluZWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgZXJyb3JfMS5Nb25nb1VuZXhwZWN0ZWRTZXJ2ZXJSZXNwb25zZUVycm9yKCdFbXB0eSByZXNwb25zZSB3aXRoIG5vIGVycm9yJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghKGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb0Vycm9yKSkge1xuICAgICAgICAgICAgLy8gTm9kZS5qcyBvciBzb21lIG90aGVyIGVycm9yIHdlIGhhdmUgbm90IHNwZWNpYWwgaGFuZGxpbmcgZm9yXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25uZWN0aW9uSXNTdGFsZShzZXJ2ZXIucG9vbCwgY29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZXJyb3JfMS5Nb25nb05ldHdvcmtFcnJvcikge1xuICAgICAgICAgICAgaWYgKHNlc3Npb24gJiYgIXNlc3Npb24uaGFzRW5kZWQgJiYgc2Vzc2lvbi5zZXJ2ZXJTZXNzaW9uKSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5zZXJ2ZXJTZXNzaW9uLmlzRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaW5BY3RpdmVUcmFuc2FjdGlvbiBjaGVjayBoYW5kbGVzIGNvbW1pdCBhbmQgYWJvcnQuXG4gICAgICAgICAgICBpZiAoaW5BY3RpdmVUcmFuc2FjdGlvbihzZXNzaW9uLCBjbWQpICYmXG4gICAgICAgICAgICAgICAgIWVycm9yLmhhc0Vycm9yTGFiZWwoZXJyb3JfMS5Nb25nb0Vycm9yTGFiZWwuVHJhbnNpZW50VHJhbnNhY3Rpb25FcnJvcikpIHtcbiAgICAgICAgICAgICAgICBlcnJvci5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlRyYW5zaWVudFRyYW5zYWN0aW9uRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChpc1JldHJ5YWJsZVdyaXRlc0VuYWJsZWQoc2VydmVyLnRvcG9sb2d5KSB8fCAoMCwgdHJhbnNhY3Rpb25zXzEuaXNUcmFuc2FjdGlvbkNvbW1hbmQpKGNtZCkpICYmXG4gICAgICAgICAgICAgICAgKDAsIHV0aWxzXzEuc3VwcG9ydHNSZXRyeWFibGVXcml0ZXMpKHNlcnZlcikgJiZcbiAgICAgICAgICAgICAgICAhaW5BY3RpdmVUcmFuc2FjdGlvbihzZXNzaW9uLCBjbWQpKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IuYWRkRXJyb3JMYWJlbChlcnJvcl8xLk1vbmdvRXJyb3JMYWJlbC5SZXRyeWFibGVXcml0ZUVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICgoaXNSZXRyeWFibGVXcml0ZXNFbmFibGVkKHNlcnZlci50b3BvbG9neSkgfHwgKDAsIHRyYW5zYWN0aW9uc18xLmlzVHJhbnNhY3Rpb25Db21tYW5kKShjbWQpKSAmJlxuICAgICAgICAgICAgICAgICgwLCBlcnJvcl8xLm5lZWRzUmV0cnlhYmxlV3JpdGVMYWJlbCkoZXJyb3IsICgwLCB1dGlsc18xLm1heFdpcmVWZXJzaW9uKShzZXJ2ZXIpKSAmJlxuICAgICAgICAgICAgICAgICFpbkFjdGl2ZVRyYW5zYWN0aW9uKHNlc3Npb24sIGNtZCkpIHtcbiAgICAgICAgICAgICAgICBlcnJvci5hZGRFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlJldHJ5YWJsZVdyaXRlRXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzZXNzaW9uICYmXG4gICAgICAgICAgICBzZXNzaW9uLmlzUGlubmVkICYmXG4gICAgICAgICAgICBlcnJvci5oYXNFcnJvckxhYmVsKGVycm9yXzEuTW9uZ29FcnJvckxhYmVsLlRyYW5zaWVudFRyYW5zYWN0aW9uRXJyb3IpKSB7XG4gICAgICAgICAgICBzZXNzaW9uLnVucGluKHsgZm9yY2U6IHRydWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VydmVyLmhhbmRsZUVycm9yKGVycm9yLCBjb25uZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VydmVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/server.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_description.js":
/*!**************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/server_description.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.compareTopologyVersion = exports.parseServerType = exports.ServerDescription = void 0;\nconst bson_1 = __webpack_require__(/*! ../bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst WRITABLE_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.LoadBalancer\n]);\nconst DATA_BEARING_SERVER_TYPES = new Set([\n    common_1.ServerType.RSPrimary,\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.Mongos,\n    common_1.ServerType.Standalone,\n    common_1.ServerType.LoadBalancer\n]);\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nclass ServerDescription {\n    /**\n     * Create a ServerDescription\n     * @internal\n     *\n     * @param address - The address of the server\n     * @param hello - An optional hello response for this server\n     */\n    constructor(address, hello, options = {}) {\n        if (address == null || address === '') {\n            throw new error_1.MongoRuntimeError('ServerDescription must be provided with a non-empty address');\n        }\n        this.address =\n            typeof address === 'string'\n                ? utils_1.HostAddress.fromString(address).toString() // Use HostAddress to normalize\n                : address.toString();\n        this.type = parseServerType(hello, options);\n        this.hosts = hello?.hosts?.map((host) => host.toLowerCase()) ?? [];\n        this.passives = hello?.passives?.map((host) => host.toLowerCase()) ?? [];\n        this.arbiters = hello?.arbiters?.map((host) => host.toLowerCase()) ?? [];\n        this.tags = hello?.tags ?? {};\n        this.minWireVersion = hello?.minWireVersion ?? 0;\n        this.maxWireVersion = hello?.maxWireVersion ?? 0;\n        this.roundTripTime = options?.roundTripTime ?? -1;\n        this.lastUpdateTime = (0, utils_1.now)();\n        this.lastWriteDate = hello?.lastWrite?.lastWriteDate ?? 0;\n        this.error = options.error ?? null;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        this.topologyVersion = this.error?.topologyVersion ?? hello?.topologyVersion ?? null;\n        this.setName = hello?.setName ?? null;\n        this.setVersion = hello?.setVersion ?? null;\n        this.electionId = hello?.electionId ?? null;\n        this.logicalSessionTimeoutMinutes = hello?.logicalSessionTimeoutMinutes ?? null;\n        this.primary = hello?.primary ?? null;\n        this.me = hello?.me?.toLowerCase() ?? null;\n        this.$clusterTime = hello?.$clusterTime ?? null;\n    }\n    get hostAddress() {\n        return utils_1.HostAddress.fromString(this.address);\n    }\n    get allHosts() {\n        return this.hosts.concat(this.arbiters).concat(this.passives);\n    }\n    /** Is this server available for reads*/\n    get isReadable() {\n        return this.type === common_1.ServerType.RSSecondary || this.isWritable;\n    }\n    /** Is this server data bearing */\n    get isDataBearing() {\n        return DATA_BEARING_SERVER_TYPES.has(this.type);\n    }\n    /** Is this server available for writes */\n    get isWritable() {\n        return WRITABLE_SERVER_TYPES.has(this.type);\n    }\n    get host() {\n        const chopLength = `:${this.port}`.length;\n        return this.address.slice(0, -chopLength);\n    }\n    get port() {\n        const port = this.address.split(':').pop();\n        return port ? Number.parseInt(port, 10) : 27017;\n    }\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined\n     * in the {@link https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#serverdescription|SDAM spec}\n     */\n    equals(other) {\n        // Despite using the comparator that would determine a nullish topologyVersion as greater than\n        // for equality we should only always perform direct equality comparison\n        const topologyVersionsEqual = this.topologyVersion === other?.topologyVersion ||\n            compareTopologyVersion(this.topologyVersion, other?.topologyVersion) === 0;\n        const electionIdsEqual = this.electionId != null && other?.electionId != null\n            ? (0, utils_1.compareObjectId)(this.electionId, other.electionId) === 0\n            : this.electionId === other?.electionId;\n        return (other != null &&\n            (0, utils_1.errorStrictEqual)(this.error, other.error) &&\n            this.type === other.type &&\n            this.minWireVersion === other.minWireVersion &&\n            (0, utils_1.arrayStrictEqual)(this.hosts, other.hosts) &&\n            tagsStrictEqual(this.tags, other.tags) &&\n            this.setName === other.setName &&\n            this.setVersion === other.setVersion &&\n            electionIdsEqual &&\n            this.primary === other.primary &&\n            this.logicalSessionTimeoutMinutes === other.logicalSessionTimeoutMinutes &&\n            topologyVersionsEqual);\n    }\n}\nexports.ServerDescription = ServerDescription;\n// Parses a `hello` message and determines the server type\nfunction parseServerType(hello, options) {\n    if (options?.loadBalanced) {\n        return common_1.ServerType.LoadBalancer;\n    }\n    if (!hello || !hello.ok) {\n        return common_1.ServerType.Unknown;\n    }\n    if (hello.isreplicaset) {\n        return common_1.ServerType.RSGhost;\n    }\n    if (hello.msg && hello.msg === 'isdbgrid') {\n        return common_1.ServerType.Mongos;\n    }\n    if (hello.setName) {\n        if (hello.hidden) {\n            return common_1.ServerType.RSOther;\n        }\n        else if (hello.isWritablePrimary) {\n            return common_1.ServerType.RSPrimary;\n        }\n        else if (hello.secondary) {\n            return common_1.ServerType.RSSecondary;\n        }\n        else if (hello.arbiterOnly) {\n            return common_1.ServerType.RSArbiter;\n        }\n        else {\n            return common_1.ServerType.RSOther;\n        }\n    }\n    return common_1.ServerType.Standalone;\n}\nexports.parseServerType = parseServerType;\nfunction tagsStrictEqual(tags, tags2) {\n    const tagsKeys = Object.keys(tags);\n    const tags2Keys = Object.keys(tags2);\n    return (tagsKeys.length === tags2Keys.length &&\n        tagsKeys.every((key) => tags2[key] === tags[key]));\n}\n/**\n * Compares two topology versions.\n *\n * 1. If the response topologyVersion is unset or the ServerDescription's\n *    topologyVersion is null, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is not equal to the\n *    ServerDescription's, the client MUST assume the response is more recent.\n * 1. If the response's topologyVersion.processId is equal to the\n *    ServerDescription's, the client MUST use the counter field to determine\n *    which topologyVersion is more recent.\n *\n * ```ts\n * currentTv <   newTv === -1\n * currentTv === newTv === 0\n * currentTv >   newTv === 1\n * ```\n */\nfunction compareTopologyVersion(currentTv, newTv) {\n    if (currentTv == null || newTv == null) {\n        return -1;\n    }\n    if (!currentTv.processId.equals(newTv.processId)) {\n        return -1;\n    }\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    const currentCounter = bson_1.Long.isLong(currentTv.counter)\n        ? currentTv.counter\n        : bson_1.Long.fromNumber(currentTv.counter);\n    const newCounter = bson_1.Long.isLong(newTv.counter) ? newTv.counter : bson_1.Long.fromNumber(newTv.counter);\n    return currentCounter.compare(newCounter);\n}\nexports.compareTopologyVersion = compareTopologyVersion;\n//# sourceMappingURL=server_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_description.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_selection.js":
/*!************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/server_selection.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.readPreferenceServerSelector = exports.secondaryWritableServerSelector = exports.sameServerSelector = exports.writableServerSelector = exports.MIN_SECONDARY_WRITE_WIRE_VERSION = void 0;\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\n// max staleness constants\nconst IDLE_WRITE_PERIOD = 10000;\nconst SMALLEST_MAX_STALENESS_SECONDS = 90;\n//  Minimum version to try writes on secondaries.\nexports.MIN_SECONDARY_WRITE_WIRE_VERSION = 13;\n/**\n * Returns a server selector that selects for writable servers\n */\nfunction writableServerSelector() {\n    return (topologyDescription, servers) => latencyWindowReducer(topologyDescription, servers.filter((s) => s.isWritable));\n}\nexports.writableServerSelector = writableServerSelector;\n/**\n * The purpose of this selector is to select the same server, only\n * if it is in a state that it can have commands sent to it.\n */\nfunction sameServerSelector(description) {\n    return (topologyDescription, servers) => {\n        if (!description)\n            return [];\n        // Filter the servers to match the provided description only if\n        // the type is not unknown.\n        return servers.filter(sd => {\n            return sd.address === description.address && sd.type !== common_1.ServerType.Unknown;\n        });\n    };\n}\nexports.sameServerSelector = sameServerSelector;\n/**\n * Returns a server selector that uses a read preference to select a\n * server potentially for a write on a secondary.\n */\nfunction secondaryWritableServerSelector(wireVersion, readPreference) {\n    // If server version < 5.0, read preference always primary.\n    // If server version >= 5.0...\n    // - If read preference is supplied, use that.\n    // - If no read preference is supplied, use primary.\n    if (!readPreference ||\n        !wireVersion ||\n        (wireVersion && wireVersion < exports.MIN_SECONDARY_WRITE_WIRE_VERSION)) {\n        return readPreferenceServerSelector(read_preference_1.ReadPreference.primary);\n    }\n    return readPreferenceServerSelector(readPreference);\n}\nexports.secondaryWritableServerSelector = secondaryWritableServerSelector;\n/**\n * Reduces the passed in array of servers by the rules of the \"Max Staleness\" specification\n * found here: https://github.com/mongodb/specifications/blob/master/source/max-staleness/max-staleness.rst\n *\n * @param readPreference - The read preference providing max staleness guidance\n * @param topologyDescription - The topology description\n * @param servers - The list of server descriptions to be reduced\n * @returns The list of servers that satisfy the requirements of max staleness\n */\nfunction maxStalenessReducer(readPreference, topologyDescription, servers) {\n    if (readPreference.maxStalenessSeconds == null || readPreference.maxStalenessSeconds < 0) {\n        return servers;\n    }\n    const maxStaleness = readPreference.maxStalenessSeconds;\n    const maxStalenessVariance = (topologyDescription.heartbeatFrequencyMS + IDLE_WRITE_PERIOD) / 1000;\n    if (maxStaleness < maxStalenessVariance) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${maxStalenessVariance} seconds`);\n    }\n    if (maxStaleness < SMALLEST_MAX_STALENESS_SECONDS) {\n        throw new error_1.MongoInvalidArgumentError(`Option \"maxStalenessSeconds\" must be at least ${SMALLEST_MAX_STALENESS_SECONDS} seconds`);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetWithPrimary) {\n        const primary = Array.from(topologyDescription.servers.values()).filter(primaryFilter)[0];\n        return servers.reduce((result, server) => {\n            const stalenessMS = server.lastUpdateTime -\n                server.lastWriteDate -\n                (primary.lastUpdateTime - primary.lastWriteDate) +\n                topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    if (topologyDescription.type === common_1.TopologyType.ReplicaSetNoPrimary) {\n        if (servers.length === 0) {\n            return servers;\n        }\n        const sMax = servers.reduce((max, s) => s.lastWriteDate > max.lastWriteDate ? s : max);\n        return servers.reduce((result, server) => {\n            const stalenessMS = sMax.lastWriteDate - server.lastWriteDate + topologyDescription.heartbeatFrequencyMS;\n            const staleness = stalenessMS / 1000;\n            const maxStalenessSeconds = readPreference.maxStalenessSeconds ?? 0;\n            if (staleness <= maxStalenessSeconds) {\n                result.push(server);\n            }\n            return result;\n        }, []);\n    }\n    return servers;\n}\n/**\n * Determines whether a server's tags match a given set of tags\n *\n * @param tagSet - The requested tag set to match\n * @param serverTags - The server's tags\n */\nfunction tagSetMatch(tagSet, serverTags) {\n    const keys = Object.keys(tagSet);\n    const serverTagKeys = Object.keys(serverTags);\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        if (serverTagKeys.indexOf(key) === -1 || serverTags[key] !== tagSet[key]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Reduces a set of server descriptions based on tags requested by the read preference\n *\n * @param readPreference - The read preference providing the requested tags\n * @param servers - The list of server descriptions to reduce\n * @returns The list of servers matching the requested tags\n */\nfunction tagSetReducer(readPreference, servers) {\n    if (readPreference.tags == null ||\n        (Array.isArray(readPreference.tags) && readPreference.tags.length === 0)) {\n        return servers;\n    }\n    for (let i = 0; i < readPreference.tags.length; ++i) {\n        const tagSet = readPreference.tags[i];\n        const serversMatchingTagset = servers.reduce((matched, server) => {\n            if (tagSetMatch(tagSet, server.tags))\n                matched.push(server);\n            return matched;\n        }, []);\n        if (serversMatchingTagset.length) {\n            return serversMatchingTagset;\n        }\n    }\n    return [];\n}\n/**\n * Reduces a list of servers to ensure they fall within an acceptable latency window. This is\n * further specified in the \"Server Selection\" specification, found here:\n * https://github.com/mongodb/specifications/blob/master/source/server-selection/server-selection.rst\n *\n * @param topologyDescription - The topology description\n * @param servers - The list of servers to reduce\n * @returns The servers which fall within an acceptable latency window\n */\nfunction latencyWindowReducer(topologyDescription, servers) {\n    const low = servers.reduce((min, server) => min === -1 ? server.roundTripTime : Math.min(server.roundTripTime, min), -1);\n    const high = low + topologyDescription.localThresholdMS;\n    return servers.reduce((result, server) => {\n        if (server.roundTripTime <= high && server.roundTripTime >= low)\n            result.push(server);\n        return result;\n    }, []);\n}\n// filters\nfunction primaryFilter(server) {\n    return server.type === common_1.ServerType.RSPrimary;\n}\nfunction secondaryFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary;\n}\nfunction nearestFilter(server) {\n    return server.type === common_1.ServerType.RSSecondary || server.type === common_1.ServerType.RSPrimary;\n}\nfunction knownFilter(server) {\n    return server.type !== common_1.ServerType.Unknown;\n}\nfunction loadBalancerFilter(server) {\n    return server.type === common_1.ServerType.LoadBalancer;\n}\n/**\n * Returns a function which selects servers based on a provided read preference\n *\n * @param readPreference - The read preference to select with\n */\nfunction readPreferenceServerSelector(readPreference) {\n    if (!readPreference.isValid()) {\n        throw new error_1.MongoInvalidArgumentError('Invalid read preference specified');\n    }\n    return (topologyDescription, servers) => {\n        const commonWireVersion = topologyDescription.commonWireVersion;\n        if (commonWireVersion &&\n            readPreference.minWireVersion &&\n            readPreference.minWireVersion > commonWireVersion) {\n            throw new error_1.MongoCompatibilityError(`Minimum wire version '${readPreference.minWireVersion}' required, but found '${commonWireVersion}'`);\n        }\n        if (topologyDescription.type === common_1.TopologyType.LoadBalanced) {\n            return servers.filter(loadBalancerFilter);\n        }\n        if (topologyDescription.type === common_1.TopologyType.Unknown) {\n            return [];\n        }\n        if (topologyDescription.type === common_1.TopologyType.Single ||\n            topologyDescription.type === common_1.TopologyType.Sharded) {\n            return latencyWindowReducer(topologyDescription, servers.filter(knownFilter));\n        }\n        const mode = readPreference.mode;\n        if (mode === read_preference_1.ReadPreference.PRIMARY) {\n            return servers.filter(primaryFilter);\n        }\n        if (mode === read_preference_1.ReadPreference.PRIMARY_PREFERRED) {\n            const result = servers.filter(primaryFilter);\n            if (result.length) {\n                return result;\n            }\n        }\n        const filter = mode === read_preference_1.ReadPreference.NEAREST ? nearestFilter : secondaryFilter;\n        const selectedServers = latencyWindowReducer(topologyDescription, tagSetReducer(readPreference, maxStalenessReducer(readPreference, topologyDescription, servers.filter(filter))));\n        if (mode === read_preference_1.ReadPreference.SECONDARY_PREFERRED && selectedServers.length === 0) {\n            return servers.filter(primaryFilter);\n        }\n        return selectedServers;\n    };\n}\nexports.readPreferenceServerSelector = readPreferenceServerSelector;\n//# sourceMappingURL=server_selection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_selection.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/srv_polling.js":
/*!*******************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/srv_polling.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SrvPoller = exports.SrvPollingEvent = void 0;\nconst dns = __webpack_require__(/*! dns */ \"dns\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\n/**\n * @internal\n * @category Event\n */\nclass SrvPollingEvent {\n    constructor(srvRecords) {\n        this.srvRecords = srvRecords;\n    }\n    hostnames() {\n        return new Set(this.srvRecords.map(r => utils_1.HostAddress.fromSrvRecord(r).toString()));\n    }\n}\nexports.SrvPollingEvent = SrvPollingEvent;\n/** @internal */\nclass SrvPoller extends mongo_types_1.TypedEventEmitter {\n    constructor(options) {\n        super();\n        if (!options || !options.srvHost) {\n            throw new error_1.MongoRuntimeError('Options for SrvPoller must exist and include srvHost');\n        }\n        this.srvHost = options.srvHost;\n        this.srvMaxHosts = options.srvMaxHosts ?? 0;\n        this.srvServiceName = options.srvServiceName ?? 'mongodb';\n        this.rescanSrvIntervalMS = 60000;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 10000;\n        this.haMode = false;\n        this.generation = 0;\n        this._timeout = undefined;\n    }\n    get srvAddress() {\n        return `_${this.srvServiceName}._tcp.${this.srvHost}`;\n    }\n    get intervalMS() {\n        return this.haMode ? this.heartbeatFrequencyMS : this.rescanSrvIntervalMS;\n    }\n    start() {\n        if (!this._timeout) {\n            this.schedule();\n        }\n    }\n    stop() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n            this.generation += 1;\n            this._timeout = undefined;\n        }\n    }\n    // TODO(NODE-4994): implement new logging logic for SrvPoller failures\n    schedule() {\n        if (this._timeout) {\n            (0, timers_1.clearTimeout)(this._timeout);\n        }\n        this._timeout = (0, timers_1.setTimeout)(() => {\n            this._poll().catch(() => null);\n        }, this.intervalMS);\n    }\n    success(srvRecords) {\n        this.haMode = false;\n        this.schedule();\n        this.emit(SrvPoller.SRV_RECORD_DISCOVERY, new SrvPollingEvent(srvRecords));\n    }\n    failure() {\n        this.haMode = true;\n        this.schedule();\n    }\n    async _poll() {\n        const generation = this.generation;\n        let srvRecords;\n        try {\n            srvRecords = await dns.promises.resolveSrv(this.srvAddress);\n        }\n        catch (dnsError) {\n            this.failure();\n            return;\n        }\n        if (generation !== this.generation) {\n            return;\n        }\n        const finalAddresses = [];\n        for (const record of srvRecords) {\n            if ((0, utils_1.matchesParentDomain)(record.name, this.srvHost)) {\n                finalAddresses.push(record);\n            }\n        }\n        if (!finalAddresses.length) {\n            this.failure();\n            return;\n        }\n        this.success(finalAddresses);\n    }\n}\n/** @event */\nSrvPoller.SRV_RECORD_DISCOVERY = 'srvRecordDiscovery';\nexports.SrvPoller = SrvPoller;\n//# sourceMappingURL=srv_polling.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NkYW0vc3J2X3BvbGxpbmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsdUJBQXVCO0FBQzNDLFlBQVksbUJBQU8sQ0FBQyxnQkFBSztBQUN6QixpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQyxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBVTtBQUNsQyxzQkFBc0IsbUJBQU8sQ0FBQyxvRkFBZ0I7QUFDOUMsZ0JBQWdCLG1CQUFPLENBQUMsd0VBQVU7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CLFFBQVEsYUFBYTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvc2RhbS9zcnZfcG9sbGluZy5qcz9mODJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TcnZQb2xsZXIgPSBleHBvcnRzLlNydlBvbGxpbmdFdmVudCA9IHZvaWQgMDtcbmNvbnN0IGRucyA9IHJlcXVpcmUoXCJkbnNcIik7XG5jb25zdCB0aW1lcnNfMSA9IHJlcXVpcmUoXCJ0aW1lcnNcIik7XG5jb25zdCBlcnJvcl8xID0gcmVxdWlyZShcIi4uL2Vycm9yXCIpO1xuY29uc3QgbW9uZ29fdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9tb25nb190eXBlc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQGNhdGVnb3J5IEV2ZW50XG4gKi9cbmNsYXNzIFNydlBvbGxpbmdFdmVudCB7XG4gICAgY29uc3RydWN0b3Ioc3J2UmVjb3Jkcykge1xuICAgICAgICB0aGlzLnNydlJlY29yZHMgPSBzcnZSZWNvcmRzO1xuICAgIH1cbiAgICBob3N0bmFtZXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0KHRoaXMuc3J2UmVjb3Jkcy5tYXAociA9PiB1dGlsc18xLkhvc3RBZGRyZXNzLmZyb21TcnZSZWNvcmQocikudG9TdHJpbmcoKSkpO1xuICAgIH1cbn1cbmV4cG9ydHMuU3J2UG9sbGluZ0V2ZW50ID0gU3J2UG9sbGluZ0V2ZW50O1xuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgU3J2UG9sbGVyIGV4dGVuZHMgbW9uZ29fdHlwZXNfMS5UeXBlZEV2ZW50RW1pdHRlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuc3J2SG9zdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29SdW50aW1lRXJyb3IoJ09wdGlvbnMgZm9yIFNydlBvbGxlciBtdXN0IGV4aXN0IGFuZCBpbmNsdWRlIHNydkhvc3QnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNydkhvc3QgPSBvcHRpb25zLnNydkhvc3Q7XG4gICAgICAgIHRoaXMuc3J2TWF4SG9zdHMgPSBvcHRpb25zLnNydk1heEhvc3RzID8/IDA7XG4gICAgICAgIHRoaXMuc3J2U2VydmljZU5hbWUgPSBvcHRpb25zLnNydlNlcnZpY2VOYW1lID8/ICdtb25nb2RiJztcbiAgICAgICAgdGhpcy5yZXNjYW5TcnZJbnRlcnZhbE1TID0gNjAwMDA7XG4gICAgICAgIHRoaXMuaGVhcnRiZWF0RnJlcXVlbmN5TVMgPSBvcHRpb25zLmhlYXJ0YmVhdEZyZXF1ZW5jeU1TID8/IDEwMDAwO1xuICAgICAgICB0aGlzLmhhTW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdlbmVyYXRpb24gPSAwO1xuICAgICAgICB0aGlzLl90aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXQgc3J2QWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIGBfJHt0aGlzLnNydlNlcnZpY2VOYW1lfS5fdGNwLiR7dGhpcy5zcnZIb3N0fWA7XG4gICAgfVxuICAgIGdldCBpbnRlcnZhbE1TKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oYU1vZGUgPyB0aGlzLmhlYXJ0YmVhdEZyZXF1ZW5jeU1TIDogdGhpcy5yZXNjYW5TcnZJbnRlcnZhbE1TO1xuICAgIH1cbiAgICBzdGFydCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXQpIHtcbiAgICAgICAgICAgICgwLCB0aW1lcnNfMS5jbGVhclRpbWVvdXQpKHRoaXMuX3RpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0aW9uICs9IDE7XG4gICAgICAgICAgICB0aGlzLl90aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRPRE8oTk9ERS00OTk0KTogaW1wbGVtZW50IG5ldyBsb2dnaW5nIGxvZ2ljIGZvciBTcnZQb2xsZXIgZmFpbHVyZXNcbiAgICBzY2hlZHVsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXQpIHtcbiAgICAgICAgICAgICgwLCB0aW1lcnNfMS5jbGVhclRpbWVvdXQpKHRoaXMuX3RpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSAoMCwgdGltZXJzXzEuc2V0VGltZW91dCkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcG9sbCgpLmNhdGNoKCgpID0+IG51bGwpO1xuICAgICAgICB9LCB0aGlzLmludGVydmFsTVMpO1xuICAgIH1cbiAgICBzdWNjZXNzKHNydlJlY29yZHMpIHtcbiAgICAgICAgdGhpcy5oYU1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZSgpO1xuICAgICAgICB0aGlzLmVtaXQoU3J2UG9sbGVyLlNSVl9SRUNPUkRfRElTQ09WRVJZLCBuZXcgU3J2UG9sbGluZ0V2ZW50KHNydlJlY29yZHMpKTtcbiAgICB9XG4gICAgZmFpbHVyZSgpIHtcbiAgICAgICAgdGhpcy5oYU1vZGUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgfVxuICAgIGFzeW5jIF9wb2xsKCkge1xuICAgICAgICBjb25zdCBnZW5lcmF0aW9uID0gdGhpcy5nZW5lcmF0aW9uO1xuICAgICAgICBsZXQgc3J2UmVjb3JkcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNydlJlY29yZHMgPSBhd2FpdCBkbnMucHJvbWlzZXMucmVzb2x2ZVNydih0aGlzLnNydkFkZHJlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChkbnNFcnJvcikge1xuICAgICAgICAgICAgdGhpcy5mYWlsdXJlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdlbmVyYXRpb24gIT09IHRoaXMuZ2VuZXJhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpbmFsQWRkcmVzc2VzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcmVjb3JkIG9mIHNydlJlY29yZHMpIHtcbiAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfMS5tYXRjaGVzUGFyZW50RG9tYWluKShyZWNvcmQubmFtZSwgdGhpcy5zcnZIb3N0KSkge1xuICAgICAgICAgICAgICAgIGZpbmFsQWRkcmVzc2VzLnB1c2gocmVjb3JkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZpbmFsQWRkcmVzc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5mYWlsdXJlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWNjZXNzKGZpbmFsQWRkcmVzc2VzKTtcbiAgICB9XG59XG4vKiogQGV2ZW50ICovXG5TcnZQb2xsZXIuU1JWX1JFQ09SRF9ESVNDT1ZFUlkgPSAnc3J2UmVjb3JkRGlzY292ZXJ5JztcbmV4cG9ydHMuU3J2UG9sbGVyID0gU3J2UG9sbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3J2X3BvbGxpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/srv_polling.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/topology.js":
/*!****************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/topology.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerCapabilities = exports.Topology = void 0;\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst connection_string_1 = __webpack_require__(/*! ../connection_string */ \"(ssr)/../../../../../node_modules/mongodb/lib/connection_string.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ../mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst read_preference_1 = __webpack_require__(/*! ../read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst events_1 = __webpack_require__(/*! ./events */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/events.js\");\nconst server_1 = __webpack_require__(/*! ./server */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_description.js\");\nconst server_selection_1 = __webpack_require__(/*! ./server_selection */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_selection.js\");\nconst srv_polling_1 = __webpack_require__(/*! ./srv_polling */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/srv_polling.js\");\nconst topology_description_1 = __webpack_require__(/*! ./topology_description */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/topology_description.js\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n    [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n    [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n    [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n    [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n    /**\n     * @param seedlist - a list of HostAddress instances to connect to\n     */\n    constructor(client, seeds, options) {\n        super();\n        this.client = client;\n        this.selectServerAsync = (0, util_1.promisify)((selector, options, callback) => this.selectServer(selector, options, callback));\n        // Options should only be undefined in tests, MongoClient will always have defined options\n        options = options ?? {\n            hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n            ...Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()),\n            ...Object.fromEntries(connection_string_1.FEATURE_FLAGS.entries())\n        };\n        if (typeof seeds === 'string') {\n            seeds = [utils_1.HostAddress.fromString(seeds)];\n        }\n        else if (!Array.isArray(seeds)) {\n            seeds = [seeds];\n        }\n        const seedlist = [];\n        for (const seed of seeds) {\n            if (typeof seed === 'string') {\n                seedlist.push(utils_1.HostAddress.fromString(seed));\n            }\n            else if (seed instanceof utils_1.HostAddress) {\n                seedlist.push(seed);\n            }\n            else {\n                // FIXME(NODE-3483): May need to be a MongoParseError\n                throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n            }\n        }\n        const topologyType = topologyTypeFromOptions(options);\n        const topologyId = globalTopologyCounter++;\n        const selectedHosts = options.srvMaxHosts == null ||\n            options.srvMaxHosts === 0 ||\n            options.srvMaxHosts >= seedlist.length\n            ? seedlist\n            : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n        const serverDescriptions = new Map();\n        for (const hostAddress of selectedHosts) {\n            serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n        }\n        this[kWaitQueue] = new utils_1.List();\n        this.s = {\n            // the id of this topology\n            id: topologyId,\n            // passed in options\n            options,\n            // initial seedlist of servers to connect to\n            seedlist,\n            // initial state\n            state: common_1.STATE_CLOSED,\n            // the topology description\n            description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n            serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n            heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n            minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n            // a map of server instances to normalized addresses\n            servers: new Map(),\n            credentials: options?.credentials,\n            clusterTime: undefined,\n            // timer management\n            connectionTimers: new Set(),\n            detectShardedTopology: ev => this.detectShardedTopology(ev),\n            detectSrvRecords: ev => this.detectSrvRecords(ev)\n        };\n        if (options.srvHost && !options.loadBalanced) {\n            this.s.srvPoller =\n                options.srvPoller ??\n                    new srv_polling_1.SrvPoller({\n                        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n                        srvHost: options.srvHost,\n                        srvMaxHosts: options.srvMaxHosts,\n                        srvServiceName: options.srvServiceName\n                    });\n            this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n        }\n    }\n    detectShardedTopology(event) {\n        const previousType = event.previousDescription.type;\n        const newType = event.newDescription.type;\n        const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n        const srvListeners = this.s.srvPoller?.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n        const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n        if (transitionToSharded && !listeningToSrvPolling) {\n            this.s.srvPoller?.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            this.s.srvPoller?.start();\n        }\n    }\n    detectSrvRecords(ev) {\n        const previousTopologyDescription = this.s.description;\n        this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n        if (this.s.description === previousTopologyDescription) {\n            // Nothing changed, so return\n            return;\n        }\n        updateServers(this);\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n    /**\n     * @returns A `TopologyDescription` for this topology\n     */\n    get description() {\n        return this.s.description;\n    }\n    get loadBalanced() {\n        return this.s.options.loadBalanced;\n    }\n    get capabilities() {\n        return new ServerCapabilities(this.lastHello());\n    }\n    connect(options, callback) {\n        if (typeof options === 'function')\n            (callback = options), (options = {});\n        options = options ?? {};\n        if (this.s.state === common_1.STATE_CONNECTED) {\n            if (typeof callback === 'function') {\n                callback();\n            }\n            return;\n        }\n        stateTransition(this, common_1.STATE_CONNECTING);\n        // emit SDAM monitoring events\n        this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n        // emit an event for the topology change\n        this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown), // initial is always Unknown\n        this.s.description));\n        // connect all known servers, then attempt server selection to connect\n        const serverDescriptions = Array.from(this.s.description.servers.values());\n        this.s.servers = new Map(serverDescriptions.map(serverDescription => [\n            serverDescription.address,\n            createAndConnectServer(this, serverDescription)\n        ]));\n        // In load balancer mode we need to fake a server description getting\n        // emitted from the monitor, since the monitor doesn't exist.\n        if (this.s.options.loadBalanced) {\n            for (const description of serverDescriptions) {\n                const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n                    loadBalanced: this.s.options.loadBalanced\n                });\n                this.serverUpdateHandler(newDescription);\n            }\n        }\n        const exitWithError = (error) => callback ? callback(error) : this.emit(Topology.ERROR, error);\n        const readPreference = options.readPreference ?? read_preference_1.ReadPreference.primary;\n        this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n            if (err) {\n                return this.close({ force: false }, () => exitWithError(err));\n            }\n            // TODO: NODE-2471\n            const skipPingOnConnect = this.s.options[Symbol.for('@@mdb.skipPingOnConnect')] === true;\n            if (!skipPingOnConnect && server && this.s.credentials) {\n                server.command((0, utils_1.ns)('admin.$cmd'), { ping: 1 }, {}, err => {\n                    if (err) {\n                        return exitWithError(err);\n                    }\n                    stateTransition(this, common_1.STATE_CONNECTED);\n                    this.emit(Topology.OPEN, this);\n                    this.emit(Topology.CONNECT, this);\n                    callback?.(undefined, this);\n                });\n                return;\n            }\n            stateTransition(this, common_1.STATE_CONNECTED);\n            this.emit(Topology.OPEN, this);\n            this.emit(Topology.CONNECT, this);\n            callback?.(undefined, this);\n        });\n    }\n    close(options, callback) {\n        options = options ?? { force: false };\n        if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n            return callback?.();\n        }\n        const destroyedServers = Array.from(this.s.servers.values(), server => {\n            return (0, util_1.promisify)(destroyServer)(server, this, { force: !!options?.force });\n        });\n        Promise.all(destroyedServers)\n            .then(() => {\n            this.s.servers.clear();\n            stateTransition(this, common_1.STATE_CLOSING);\n            drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n            (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n            if (this.s.srvPoller) {\n                this.s.srvPoller.stop();\n                this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n            }\n            this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n            stateTransition(this, common_1.STATE_CLOSED);\n            // emit an event for close\n            this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n        })\n            .finally(() => callback?.());\n    }\n    /**\n     * Selects a server according to the selection predicate provided\n     *\n     * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n     * @param options - Optional settings related to server selection\n     * @param callback - The callback used to indicate success or failure\n     * @returns An instance of a `Server` meeting the criteria of the predicate provided\n     */\n    selectServer(selector, options, callback) {\n        let serverSelector;\n        if (typeof selector !== 'function') {\n            if (typeof selector === 'string') {\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n            }\n            else {\n                let readPreference;\n                if (selector instanceof read_preference_1.ReadPreference) {\n                    readPreference = selector;\n                }\n                else {\n                    read_preference_1.ReadPreference.translate(options);\n                    readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n                }\n                serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n            }\n        }\n        else {\n            serverSelector = selector;\n        }\n        options = Object.assign({}, { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS }, options);\n        const isSharded = this.description.type === common_1.TopologyType.Sharded;\n        const session = options.session;\n        const transaction = session && session.transaction;\n        if (isSharded && transaction && transaction.server) {\n            callback(undefined, transaction.server);\n            return;\n        }\n        const waitQueueMember = {\n            serverSelector,\n            transaction,\n            callback\n        };\n        const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n        if (serverSelectionTimeoutMS) {\n            waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n                waitQueueMember[kCancelled] = true;\n                waitQueueMember.timer = undefined;\n                const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n                waitQueueMember.callback(timeoutError);\n            }, serverSelectionTimeoutMS);\n        }\n        this[kWaitQueue].push(waitQueueMember);\n        processWaitQueue(this);\n    }\n    /**\n     * Update the internal TopologyDescription with a ServerDescription\n     *\n     * @param serverDescription - The server to update in the internal list of server descriptions\n     */\n    serverUpdateHandler(serverDescription) {\n        if (!this.s.description.hasServer(serverDescription.address)) {\n            return;\n        }\n        // ignore this server update if its from an outdated topologyVersion\n        if (isStaleServerDescription(this.s.description, serverDescription)) {\n            return;\n        }\n        // these will be used for monitoring events later\n        const previousTopologyDescription = this.s.description;\n        const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n        if (!previousServerDescription) {\n            return;\n        }\n        // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n        // a server it MUST compare it to the current highest seen cluster time\n        // for the deployment. If the new cluster time is higher than the\n        // highest seen cluster time it MUST become the new highest seen cluster\n        // time. Two cluster times are compared using only the BsonTimestamp\n        // value of the clusterTime embedded field.\"\n        const clusterTime = serverDescription.$clusterTime;\n        if (clusterTime) {\n            (0, common_1._advanceClusterTime)(this, clusterTime);\n        }\n        // If we already know all the information contained in this updated description, then\n        // we don't need to emit SDAM events, but still need to update the description, in order\n        // to keep client-tracked attributes like last update time and round trip time up to date\n        const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n        // first update the TopologyDescription\n        this.s.description = this.s.description.update(serverDescription);\n        if (this.s.description.compatibilityError) {\n            this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n            return;\n        }\n        // emit monitoring events for this change\n        if (!equalDescriptions) {\n            const newDescription = this.s.description.servers.get(serverDescription.address);\n            if (newDescription) {\n                this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n            }\n        }\n        // update server list from updated descriptions\n        updateServers(this, serverDescription);\n        // attempt to resolve any outstanding server selection attempts\n        if (this[kWaitQueue].length > 0) {\n            processWaitQueue(this);\n        }\n        if (!equalDescriptions) {\n            this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n        }\n    }\n    auth(credentials, callback) {\n        if (typeof credentials === 'function')\n            (callback = credentials), (credentials = undefined);\n        if (typeof callback === 'function')\n            callback(undefined, true);\n    }\n    get clientMetadata() {\n        return this.s.options.metadata;\n    }\n    isConnected() {\n        return this.s.state === common_1.STATE_CONNECTED;\n    }\n    isDestroyed() {\n        return this.s.state === common_1.STATE_CLOSED;\n    }\n    // NOTE: There are many places in code where we explicitly check the last hello\n    //       to do feature support detection. This should be done any other way, but for\n    //       now we will just return the first hello seen, which should suffice.\n    lastHello() {\n        const serverDescriptions = Array.from(this.description.servers.values());\n        if (serverDescriptions.length === 0)\n            return {};\n        const sd = serverDescriptions.filter((sd) => sd.type !== common_1.ServerType.Unknown)[0];\n        const result = sd || { maxWireVersion: this.description.commonWireVersion };\n        return result;\n    }\n    get commonWireVersion() {\n        return this.description.commonWireVersion;\n    }\n    get logicalSessionTimeoutMinutes() {\n        return this.description.logicalSessionTimeoutMinutes;\n    }\n    get clusterTime() {\n        return this.s.clusterTime;\n    }\n    set clusterTime(clusterTime) {\n        this.s.clusterTime = clusterTime;\n    }\n}\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\nexports.Topology = Topology;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n    options = options ?? { force: false };\n    for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n        server.removeAllListeners(event);\n    }\n    server.destroy(options, () => {\n        topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n        for (const event of constants_1.SERVER_RELAY_EVENTS) {\n            server.removeAllListeners(event);\n        }\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n    if (options?.directConnection) {\n        return common_1.TopologyType.Single;\n    }\n    if (options?.replicaSet) {\n        return common_1.TopologyType.ReplicaSetNoPrimary;\n    }\n    if (options?.loadBalanced) {\n        return common_1.TopologyType.LoadBalanced;\n    }\n    return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n    topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n    const server = new server_1.Server(topology, serverDescription, topology.s.options);\n    for (const event of constants_1.SERVER_RELAY_EVENTS) {\n        server.on(event, (e) => topology.emit(event, e));\n    }\n    server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n    server.connect();\n    return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n    // update the internal server's description\n    if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n        const server = topology.s.servers.get(incomingServerDescription.address);\n        if (server) {\n            server.s.description = incomingServerDescription;\n            if (incomingServerDescription.error instanceof error_1.MongoError &&\n                incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n                const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n                server.pool.clear({ interruptInUseConnections });\n            }\n            else if (incomingServerDescription.error == null) {\n                const newTopologyType = topology.s.description.type;\n                const shouldMarkPoolReady = incomingServerDescription.isDataBearing ||\n                    (incomingServerDescription.type !== common_1.ServerType.Unknown &&\n                        newTopologyType === common_1.TopologyType.Single);\n                if (shouldMarkPoolReady) {\n                    server.pool.ready();\n                }\n            }\n        }\n    }\n    // add new servers for all descriptions we currently don't know about locally\n    for (const serverDescription of topology.description.servers.values()) {\n        if (!topology.s.servers.has(serverDescription.address)) {\n            const server = createAndConnectServer(topology, serverDescription);\n            topology.s.servers.set(serverDescription.address, server);\n        }\n    }\n    // for all servers no longer known, remove their descriptions and destroy their instances\n    for (const entry of topology.s.servers) {\n        const serverAddress = entry[0];\n        if (topology.description.hasServer(serverAddress)) {\n            continue;\n        }\n        if (!topology.s.servers.has(serverAddress)) {\n            continue;\n        }\n        const server = topology.s.servers.get(serverAddress);\n        topology.s.servers.delete(serverAddress);\n        // prepare server for garbage collection\n        if (server) {\n            destroyServer(server, topology);\n        }\n    }\n}\nfunction drainWaitQueue(queue, err) {\n    while (queue.length) {\n        const waitQueueMember = queue.shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n            waitQueueMember.callback(err);\n        }\n    }\n}\nfunction processWaitQueue(topology) {\n    if (topology.s.state === common_1.STATE_CLOSED) {\n        drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n        return;\n    }\n    const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n    const serverDescriptions = Array.from(topology.description.servers.values());\n    const membersToProcess = topology[kWaitQueue].length;\n    for (let i = 0; i < membersToProcess; ++i) {\n        const waitQueueMember = topology[kWaitQueue].shift();\n        if (!waitQueueMember) {\n            continue;\n        }\n        if (waitQueueMember[kCancelled]) {\n            continue;\n        }\n        let selectedDescriptions;\n        try {\n            const serverSelector = waitQueueMember.serverSelector;\n            selectedDescriptions = serverSelector\n                ? serverSelector(topology.description, serverDescriptions)\n                : serverDescriptions;\n        }\n        catch (e) {\n            if (waitQueueMember.timer) {\n                (0, timers_1.clearTimeout)(waitQueueMember.timer);\n            }\n            waitQueueMember.callback(e);\n            continue;\n        }\n        let selectedServer;\n        if (selectedDescriptions.length === 0) {\n            topology[kWaitQueue].push(waitQueueMember);\n            continue;\n        }\n        else if (selectedDescriptions.length === 1) {\n            selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n        }\n        else {\n            const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n            const server1 = topology.s.servers.get(descriptions[0].address);\n            const server2 = topology.s.servers.get(descriptions[1].address);\n            selectedServer =\n                server1 && server2 && server1.s.operationCount < server2.s.operationCount\n                    ? server1\n                    : server2;\n        }\n        if (!selectedServer) {\n            waitQueueMember.callback(new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description));\n            return;\n        }\n        const transaction = waitQueueMember.transaction;\n        if (isSharded && transaction && transaction.isActive && selectedServer) {\n            transaction.pinServer(selectedServer);\n        }\n        if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n        waitQueueMember.callback(undefined, selectedServer);\n    }\n    if (topology[kWaitQueue].length > 0) {\n        // ensure all server monitors attempt monitoring soon\n        for (const [, server] of topology.s.servers) {\n            process.nextTick(function scheduleServerCheck() {\n                return server.requestCheck();\n            });\n        }\n    }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n    const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n    const currentTopologyVersion = currentServerDescription?.topologyVersion;\n    return ((0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0);\n}\n/** @public */\nclass ServerCapabilities {\n    constructor(hello) {\n        this.minWireVersion = hello.minWireVersion || 0;\n        this.maxWireVersion = hello.maxWireVersion || 0;\n    }\n    get hasAggregationCursor() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasWriteCommands() {\n        return this.maxWireVersion >= 2;\n    }\n    get hasTextSearch() {\n        return this.minWireVersion >= 0;\n    }\n    get hasAuthCommands() {\n        return this.maxWireVersion >= 1;\n    }\n    get hasListCollectionsCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get hasListIndexesCommand() {\n        return this.maxWireVersion >= 3;\n    }\n    get supportsSnapshotReads() {\n        return this.maxWireVersion >= 13;\n    }\n    get commandsTakeWriteConcern() {\n        return this.maxWireVersion >= 5;\n    }\n    get commandsTakeCollation() {\n        return this.maxWireVersion >= 5;\n    }\n}\nexports.ServerCapabilities = ServerCapabilities;\n//# sourceMappingURL=topology.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/topology.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sdam/topology_description.js":
/*!****************************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sdam/topology_description.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TopologyDescription = void 0;\nconst WIRE_CONSTANTS = __webpack_require__(/*! ../cmap/wire_protocol/constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst error_1 = __webpack_require__(/*! ../error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst common_1 = __webpack_require__(/*! ./common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst server_description_1 = __webpack_require__(/*! ./server_description */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/server_description.js\");\n// constants related to compatibility checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\nconst MONGOS_OR_UNKNOWN = new Set([common_1.ServerType.Mongos, common_1.ServerType.Unknown]);\nconst MONGOS_OR_STANDALONE = new Set([common_1.ServerType.Mongos, common_1.ServerType.Standalone]);\nconst NON_PRIMARY_RS_MEMBERS = new Set([\n    common_1.ServerType.RSSecondary,\n    common_1.ServerType.RSArbiter,\n    common_1.ServerType.RSOther\n]);\n/**\n * Representation of a deployment of servers\n * @public\n */\nclass TopologyDescription {\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(topologyType, serverDescriptions = null, setName = null, maxSetVersion = null, maxElectionId = null, commonWireVersion = null, options = null) {\n        options = options ?? {};\n        this.type = topologyType ?? common_1.TopologyType.Unknown;\n        this.servers = serverDescriptions ?? new Map();\n        this.stale = false;\n        this.compatible = true;\n        this.heartbeatFrequencyMS = options.heartbeatFrequencyMS ?? 0;\n        this.localThresholdMS = options.localThresholdMS ?? 15;\n        this.setName = setName ?? null;\n        this.maxElectionId = maxElectionId ?? null;\n        this.maxSetVersion = maxSetVersion ?? null;\n        this.commonWireVersion = commonWireVersion ?? 0;\n        // determine server compatibility\n        for (const serverDescription of this.servers.values()) {\n            // Load balancer mode is always compatible.\n            if (serverDescription.type === common_1.ServerType.Unknown ||\n                serverDescription.type === common_1.ServerType.LoadBalancer) {\n                continue;\n            }\n            if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n            }\n            if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n                this.compatible = false;\n                this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n                break;\n            }\n        }\n        // Whenever a client updates the TopologyDescription from a hello response, it MUST set\n        // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n        // value among ServerDescriptions of all data-bearing server types. If any have a null\n        // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n        // set to null.\n        this.logicalSessionTimeoutMinutes = null;\n        for (const [, server] of this.servers) {\n            if (server.isReadable) {\n                if (server.logicalSessionTimeoutMinutes == null) {\n                    // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n                    this.logicalSessionTimeoutMinutes = null;\n                    break;\n                }\n                if (this.logicalSessionTimeoutMinutes == null) {\n                    // First server with a non null logicalSessionsTimeout\n                    this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n                    continue;\n                }\n                // Always select the smaller of the:\n                // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n                this.logicalSessionTimeoutMinutes = Math.min(this.logicalSessionTimeoutMinutes, server.logicalSessionTimeoutMinutes);\n            }\n        }\n    }\n    /**\n     * Returns a new TopologyDescription based on the SrvPollingEvent\n     * @internal\n     */\n    updateFromSrvPollingEvent(ev, srvMaxHosts = 0) {\n        /** The SRV addresses defines the set of addresses we should be using */\n        const incomingHostnames = ev.hostnames();\n        const currentHostnames = new Set(this.servers.keys());\n        const hostnamesToAdd = new Set(incomingHostnames);\n        const hostnamesToRemove = new Set();\n        for (const hostname of currentHostnames) {\n            // filter hostnamesToAdd (made from incomingHostnames) down to what is *not* present in currentHostnames\n            hostnamesToAdd.delete(hostname);\n            if (!incomingHostnames.has(hostname)) {\n                // If the SRV Records no longer include this hostname\n                // we have to stop using it\n                hostnamesToRemove.add(hostname);\n            }\n        }\n        if (hostnamesToAdd.size === 0 && hostnamesToRemove.size === 0) {\n            // No new hosts to add and none to remove\n            return this;\n        }\n        const serverDescriptions = new Map(this.servers);\n        for (const removedHost of hostnamesToRemove) {\n            serverDescriptions.delete(removedHost);\n        }\n        if (hostnamesToAdd.size > 0) {\n            if (srvMaxHosts === 0) {\n                // Add all!\n                for (const hostToAdd of hostnamesToAdd) {\n                    serverDescriptions.set(hostToAdd, new server_description_1.ServerDescription(hostToAdd));\n                }\n            }\n            else if (serverDescriptions.size < srvMaxHosts) {\n                // Add only the amount needed to get us back to srvMaxHosts\n                const selectedHosts = (0, utils_1.shuffle)(hostnamesToAdd, srvMaxHosts - serverDescriptions.size);\n                for (const selectedHostToAdd of selectedHosts) {\n                    serverDescriptions.set(selectedHostToAdd, new server_description_1.ServerDescription(selectedHostToAdd));\n                }\n            }\n        }\n        return new TopologyDescription(this.type, serverDescriptions, this.setName, this.maxSetVersion, this.maxElectionId, this.commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    /**\n     * Returns a copy of this description updated with a given ServerDescription\n     * @internal\n     */\n    update(serverDescription) {\n        const address = serverDescription.address;\n        // potentially mutated values\n        let { type: topologyType, setName, maxSetVersion, maxElectionId, commonWireVersion } = this;\n        const serverType = serverDescription.type;\n        const serverDescriptions = new Map(this.servers);\n        // update common wire version\n        if (serverDescription.maxWireVersion !== 0) {\n            if (commonWireVersion == null) {\n                commonWireVersion = serverDescription.maxWireVersion;\n            }\n            else {\n                commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n            }\n        }\n        if (typeof serverDescription.setName === 'string' &&\n            typeof setName === 'string' &&\n            serverDescription.setName !== setName) {\n            if (topologyType === common_1.TopologyType.Single) {\n                // \"Single\" Topology with setName mismatch is direct connection usage, mark unknown do not remove\n                serverDescription = new server_description_1.ServerDescription(address);\n            }\n            else {\n                serverDescriptions.delete(address);\n            }\n        }\n        // update the actual server description\n        serverDescriptions.set(address, serverDescription);\n        if (topologyType === common_1.TopologyType.Single) {\n            // once we are defined as single, that never changes\n            return new TopologyDescription(common_1.TopologyType.Single, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n        }\n        if (topologyType === common_1.TopologyType.Unknown) {\n            if (serverType === common_1.ServerType.Standalone && this.servers.size !== 1) {\n                serverDescriptions.delete(address);\n            }\n            else {\n                topologyType = topologyTypeForServerType(serverType);\n            }\n        }\n        if (topologyType === common_1.TopologyType.Sharded) {\n            if (!MONGOS_OR_UNKNOWN.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetNoPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n            }\n            if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                const result = updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName);\n                topologyType = result[0];\n                setName = result[1];\n            }\n        }\n        if (topologyType === common_1.TopologyType.ReplicaSetWithPrimary) {\n            if (MONGOS_OR_STANDALONE.has(serverType)) {\n                serverDescriptions.delete(address);\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n            else if (serverType === common_1.ServerType.RSPrimary) {\n                const result = updateRsFromPrimary(serverDescriptions, serverDescription, setName, maxSetVersion, maxElectionId);\n                topologyType = result[0];\n                setName = result[1];\n                maxSetVersion = result[2];\n                maxElectionId = result[3];\n            }\n            else if (NON_PRIMARY_RS_MEMBERS.has(serverType)) {\n                topologyType = updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName);\n            }\n            else {\n                topologyType = checkHasPrimary(serverDescriptions);\n            }\n        }\n        return new TopologyDescription(topologyType, serverDescriptions, setName, maxSetVersion, maxElectionId, commonWireVersion, { heartbeatFrequencyMS: this.heartbeatFrequencyMS, localThresholdMS: this.localThresholdMS });\n    }\n    get error() {\n        const descriptionsWithError = Array.from(this.servers.values()).filter((sd) => sd.error);\n        if (descriptionsWithError.length > 0) {\n            return descriptionsWithError[0].error;\n        }\n        return null;\n    }\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.type !== common_1.ServerType.Unknown);\n    }\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers() {\n        return Array.from(this.servers.values()).some((sd) => sd.isDataBearing);\n    }\n    /**\n     * Determines if the topology has a definition for the provided address\n     * @internal\n     */\n    hasServer(address) {\n        return this.servers.has(address);\n    }\n}\nexports.TopologyDescription = TopologyDescription;\nfunction topologyTypeForServerType(serverType) {\n    switch (serverType) {\n        case common_1.ServerType.Standalone:\n            return common_1.TopologyType.Single;\n        case common_1.ServerType.Mongos:\n            return common_1.TopologyType.Sharded;\n        case common_1.ServerType.RSPrimary:\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        case common_1.ServerType.RSOther:\n        case common_1.ServerType.RSSecondary:\n            return common_1.TopologyType.ReplicaSetNoPrimary;\n        default:\n            return common_1.TopologyType.Unknown;\n    }\n}\nfunction updateRsFromPrimary(serverDescriptions, serverDescription, setName = null, maxSetVersion = null, maxElectionId = null) {\n    setName = setName || serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n    }\n    if (serverDescription.maxWireVersion >= 17) {\n        const electionIdComparison = (0, utils_1.compareObjectId)(maxElectionId, serverDescription.electionId);\n        const maxElectionIdIsEqual = electionIdComparison === 0;\n        const maxElectionIdIsLess = electionIdComparison === -1;\n        const maxSetVersionIsLessOrEqual = (maxSetVersion ?? -1) <= (serverDescription.setVersion ?? -1);\n        if (maxElectionIdIsLess || (maxElectionIdIsEqual && maxSetVersionIsLessOrEqual)) {\n            // The reported electionId was greater\n            // or the electionId was equal and reported setVersion was greater\n            // Always update both values, they are a tuple\n            maxElectionId = serverDescription.electionId;\n            maxSetVersion = serverDescription.setVersion;\n        }\n        else {\n            // Stale primary\n            // replace serverDescription with a default ServerDescription of type \"Unknown\"\n            serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n            return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n        }\n    }\n    else {\n        const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n        if (serverDescription.setVersion && electionId) {\n            if (maxSetVersion && maxElectionId) {\n                if (maxSetVersion > serverDescription.setVersion ||\n                    (0, utils_1.compareObjectId)(maxElectionId, electionId) > 0) {\n                    // this primary is stale, we must remove it\n                    serverDescriptions.set(serverDescription.address, new server_description_1.ServerDescription(serverDescription.address));\n                    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n                }\n            }\n            maxElectionId = serverDescription.electionId;\n        }\n        if (serverDescription.setVersion != null &&\n            (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)) {\n            maxSetVersion = serverDescription.setVersion;\n        }\n    }\n    // We've heard from the primary. Is it the same primary as before?\n    for (const [address, server] of serverDescriptions) {\n        if (server.type === common_1.ServerType.RSPrimary && server.address !== serverDescription.address) {\n            // Reset old primary's type to Unknown.\n            serverDescriptions.set(address, new server_description_1.ServerDescription(server.address));\n            // There can only be one primary\n            break;\n        }\n    }\n    // Discover new hosts from this primary's response.\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    // Remove hosts not in the response.\n    const currentAddresses = Array.from(serverDescriptions.keys());\n    const responseAddresses = serverDescription.allHosts;\n    currentAddresses\n        .filter((addr) => responseAddresses.indexOf(addr) === -1)\n        .forEach((address) => {\n        serverDescriptions.delete(address);\n    });\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\nfunction updateRsWithPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    if (setName == null) {\n        // TODO(NODE-3483): should be an appropriate runtime error\n        throw new error_1.MongoRuntimeError('Argument \"setName\" is required if connected to a replica set');\n    }\n    if (setName !== serverDescription.setName ||\n        (serverDescription.me && serverDescription.address !== serverDescription.me)) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return checkHasPrimary(serverDescriptions);\n}\nfunction updateRsNoPrimaryFromMember(serverDescriptions, serverDescription, setName = null) {\n    const topologyType = common_1.TopologyType.ReplicaSetNoPrimary;\n    setName = setName ?? serverDescription.setName;\n    if (setName !== serverDescription.setName) {\n        serverDescriptions.delete(serverDescription.address);\n        return [topologyType, setName];\n    }\n    serverDescription.allHosts.forEach((address) => {\n        if (!serverDescriptions.has(address)) {\n            serverDescriptions.set(address, new server_description_1.ServerDescription(address));\n        }\n    });\n    if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n        serverDescriptions.delete(serverDescription.address);\n    }\n    return [topologyType, setName];\n}\nfunction checkHasPrimary(serverDescriptions) {\n    for (const serverDescription of serverDescriptions.values()) {\n        if (serverDescription.type === common_1.ServerType.RSPrimary) {\n            return common_1.TopologyType.ReplicaSetWithPrimary;\n        }\n    }\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n}\n//# sourceMappingURL=topology_description.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sdam/topology_description.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sessions.js":
/*!***********************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sessions.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst metrics_1 = __webpack_require__(/*! ./cmap/metrics */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/metrics.js\");\nconst shared_1 = __webpack_require__(/*! ./cmap/wire_protocol/shared */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/shared.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst mongo_types_1 = __webpack_require__(/*! ./mongo_types */ \"(ssr)/../../../../../node_modules/mongodb/lib/mongo_types.js\");\nconst execute_operation_1 = __webpack_require__(/*! ./operations/execute_operation */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/execute_operation.js\");\nconst run_command_1 = __webpack_require__(/*! ./operations/run_command */ \"(ssr)/../../../../../node_modules/mongodb/lib/operations/run_command.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst transactions_1 = __webpack_require__(/*! ./transactions */ \"(ssr)/../../../../../node_modules/mongodb/lib/transactions.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(ssr)/../../../../../node_modules/mongodb/lib/utils.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n    /**\n     * Create a client session.\n     * @internal\n     * @param client - The current client\n     * @param sessionPool - The server session pool (Internal Class)\n     * @param options - Optional settings\n     * @param clientOptions - Optional settings provided when creating a MongoClient\n     */\n    constructor(client, sessionPool, options, clientOptions) {\n        super();\n        /** @internal */\n        this[_a] = false;\n        if (client == null) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n        }\n        if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n            // TODO(NODE-3483)\n            throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n        }\n        options = options ?? {};\n        if (options.snapshot === true) {\n            this[kSnapshotEnabled] = true;\n            if (options.causalConsistency === true) {\n                throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n            }\n        }\n        this.client = client;\n        this.sessionPool = sessionPool;\n        this.hasEnded = false;\n        this.clientOptions = clientOptions;\n        this.explicit = !!options.explicit;\n        this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n        this[kTxnNumberIncrement] = 0;\n        const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n        this.supports = {\n            // if we can enable causal consistency, do so by default\n            causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n        };\n        this.clusterTime = options.initialClusterTime;\n        this.operationTime = undefined;\n        this.owner = options.owner;\n        this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n        this.transaction = new transactions_1.Transaction();\n    }\n    /** The server id associated with this session */\n    get id() {\n        return this[kServerSession]?.id;\n    }\n    get serverSession() {\n        let serverSession = this[kServerSession];\n        if (serverSession == null) {\n            if (this.explicit) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n            }\n            if (this.hasEnded) {\n                throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n            }\n            serverSession = this.sessionPool.acquire();\n            this[kServerSession] = serverSession;\n        }\n        return serverSession;\n    }\n    /** Whether or not this session is configured for snapshot reads */\n    get snapshotEnabled() {\n        return this[kSnapshotEnabled];\n    }\n    get loadBalanced() {\n        return this.client.topology?.description.type === common_1.TopologyType.LoadBalanced;\n    }\n    /** @internal */\n    get pinnedConnection() {\n        return this[kPinnedConnection];\n    }\n    /** @internal */\n    pin(conn) {\n        if (this[kPinnedConnection]) {\n            throw TypeError('Cannot pin multiple connections to the same session');\n        }\n        this[kPinnedConnection] = conn;\n        conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n    }\n    /** @internal */\n    unpin(options) {\n        if (this.loadBalanced) {\n            return maybeClearPinnedConnection(this, options);\n        }\n        this.transaction.unpinServer();\n    }\n    get isPinned() {\n        return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n    }\n    /**\n     * Ends this session on the server\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    async endSession(options) {\n        try {\n            if (this.inTransaction()) {\n                await this.abortTransaction();\n            }\n            if (!this.hasEnded) {\n                const serverSession = this[kServerSession];\n                if (serverSession != null) {\n                    // release the server session back to the pool\n                    this.sessionPool.release(serverSession);\n                    // Make sure a new serverSession never makes it onto this ClientSession\n                    Object.defineProperty(this, kServerSession, {\n                        value: ServerSession.clone(serverSession),\n                        writable: false\n                    });\n                }\n                // mark the session as ended, and emit a signal\n                this.hasEnded = true;\n                this.emit('ended', this);\n            }\n        }\n        catch {\n            // spec indicates that we should ignore all errors for `endSessions`\n        }\n        finally {\n            maybeClearPinnedConnection(this, { force: true, ...options });\n        }\n    }\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime) {\n        if (this.operationTime == null) {\n            this.operationTime = operationTime;\n            return;\n        }\n        if (operationTime.greaterThan(this.operationTime)) {\n            this.operationTime = operationTime;\n        }\n    }\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime) {\n        if (!clusterTime || typeof clusterTime !== 'object') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n        }\n        if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n            throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n        }\n        if (!clusterTime.signature ||\n            clusterTime.signature.hash?._bsontype !== 'Binary' ||\n            (typeof clusterTime.signature.keyId !== 'bigint' &&\n                typeof clusterTime.signature.keyId !== 'number' &&\n                clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n        ) {\n            throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n        }\n        (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session) {\n        if (!(session instanceof ClientSession)) {\n            return false;\n        }\n        if (this.id == null || session.id == null) {\n            return false;\n        }\n        return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n    }\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber() {\n        this[kTxnNumberIncrement] += 1;\n    }\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction() {\n        return this.transaction.isActive;\n    }\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options) {\n        if (this[kSnapshotEnabled]) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n        }\n        if (this.inTransaction()) {\n            throw new error_1.MongoTransactionError('Transaction already in progress');\n        }\n        if (this.isPinned && this.transaction.isCommitted) {\n            this.unpin();\n        }\n        const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n        if ((0, shared_1.isSharded)(this.client.topology) &&\n            topologyMaxWireVersion != null &&\n            topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n            throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n        }\n        // increment txnNumber\n        this.incrementTransactionNumber();\n        // create transaction state\n        this.transaction = new transactions_1.Transaction({\n            readConcern: options?.readConcern ??\n                this.defaultTransactionOptions.readConcern ??\n                this.clientOptions?.readConcern,\n            writeConcern: options?.writeConcern ??\n                this.defaultTransactionOptions.writeConcern ??\n                this.clientOptions?.writeConcern,\n            readPreference: options?.readPreference ??\n                this.defaultTransactionOptions.readPreference ??\n                this.clientOptions?.readPreference,\n            maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n        });\n        this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n    }\n    /**\n     * Commits the currently active transaction in this session.\n     */\n    async commitTransaction() {\n        return endTransactionAsync(this, 'commitTransaction');\n    }\n    /**\n     * Aborts the currently active transaction in this session.\n     */\n    async abortTransaction() {\n        return endTransactionAsync(this, 'abortTransaction');\n    }\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON() {\n        throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n    }\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n     *\n     * @remarks\n     * This function:\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then this function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then this function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - May be called multiple times if the driver needs to attempt to retry the operations.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    async withTransaction(fn, options) {\n        const startTime = (0, utils_1.now)();\n        return attemptTransaction(this, startTime, fn, options);\n    }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n    'CannotSatisfyWriteConcern',\n    'UnknownReplWriteConcern',\n    'UnsatisfiableWriteConcern'\n]);\nfunction hasNotTimedOut(startTime, max) {\n    return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n    const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError &&\n        err.codeName &&\n        NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n    return (isMaxTimeMSExpiredError(err) ||\n        (!isNonDeterministicWriteConcernError &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n            err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern));\n}\nfunction maybeClearPinnedConnection(session, options) {\n    // unpin a connection if it has been pinned\n    const conn = session[kPinnedConnection];\n    const error = options?.error;\n    if (session.inTransaction() &&\n        error &&\n        error instanceof error_1.MongoError &&\n        error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return;\n    }\n    const topology = session.client.topology;\n    // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n    //       to validate that we don't unpin on _all_ errors?\n    if (conn && topology != null) {\n        const servers = Array.from(topology.s.servers.values());\n        const loadBalancer = servers[0];\n        if (options?.error == null || options?.force) {\n            loadBalancer.pool.checkIn(conn);\n            conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION\n                ? metrics_1.ConnectionPoolMetrics.TXN\n                : metrics_1.ConnectionPoolMetrics.CURSOR);\n            if (options?.forceClear) {\n                loadBalancer.pool.clear({ serviceId: conn.serviceId });\n            }\n        }\n        session[kPinnedConnection] = undefined;\n    }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n    if (err == null || !(err instanceof error_1.MongoServerError)) {\n        return false;\n    }\n    return (err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n        (err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired));\n}\nfunction attemptTransactionCommit(session, startTime, fn, result, options) {\n    return session.commitTransaction().then(() => result, (err) => {\n        if (err instanceof error_1.MongoError &&\n            hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n            !isMaxTimeMSExpiredError(err)) {\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n                return attemptTransactionCommit(session, startTime, fn, result, options);\n            }\n            if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n        }\n        throw err;\n    });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n    transactions_1.TxnState.NO_TRANSACTION,\n    transactions_1.TxnState.TRANSACTION_COMMITTED,\n    transactions_1.TxnState.TRANSACTION_ABORTED\n]);\nfunction userExplicitlyEndedTransaction(session) {\n    return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options = {}) {\n    session.startTransaction(options);\n    let promise;\n    try {\n        promise = fn(session);\n    }\n    catch (err) {\n        promise = Promise.reject(err);\n    }\n    if (!(0, utils_1.isPromiseLike)(promise)) {\n        session.abortTransaction().catch(() => null);\n        return Promise.reject(new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise'));\n    }\n    return promise.then(result => {\n        if (userExplicitlyEndedTransaction(session)) {\n            return result;\n        }\n        return attemptTransactionCommit(session, startTime, fn, result, options);\n    }, err => {\n        function maybeRetryOrThrow(err) {\n            if (err instanceof error_1.MongoError &&\n                err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) &&\n                hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n                return attemptTransaction(session, startTime, fn, options);\n            }\n            if (isMaxTimeMSExpiredError(err)) {\n                err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n            }\n            throw err;\n        }\n        if (session.inTransaction()) {\n            return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n        }\n        return maybeRetryOrThrow(err);\n    });\n}\nconst endTransactionAsync = (0, util_1.promisify)(endTransaction);\nfunction endTransaction(session, commandName, callback) {\n    // handle any initial problematic cases\n    const txnState = session.transaction.state;\n    if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n        callback(new error_1.MongoTransactionError('No transaction started'));\n        return;\n    }\n    if (commandName === 'commitTransaction') {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n            return;\n        }\n    }\n    else {\n        if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n            // the transaction was never started, we can safely exit here\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            callback();\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n            return;\n        }\n        if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED ||\n            txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n            callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n            return;\n        }\n    }\n    // construct and send the command\n    const command = { [commandName]: 1 };\n    // apply a writeConcern if specified\n    let writeConcern;\n    if (session.transaction.options.writeConcern) {\n        writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n    }\n    else if (session.clientOptions && session.clientOptions.writeConcern) {\n        writeConcern = { w: session.clientOptions.writeConcern.w };\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n        writeConcern = Object.assign({ wtimeoutMS: 10000 }, writeConcern, { w: 'majority' });\n    }\n    if (writeConcern) {\n        write_concern_1.WriteConcern.apply(command, writeConcern);\n    }\n    if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n        Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n    }\n    function commandHandler(error) {\n        if (commandName !== 'commitTransaction') {\n            session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n            if (session.loadBalanced) {\n                maybeClearPinnedConnection(session, { force: false });\n            }\n            // The spec indicates that we should ignore all errors on `abortTransaction`\n            return callback();\n        }\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n        if (error instanceof error_1.MongoError) {\n            if (error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError) ||\n                error instanceof error_1.MongoWriteConcernError ||\n                isMaxTimeMSExpiredError(error)) {\n                if (isUnknownTransactionCommitResult(error)) {\n                    error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n                    // per txns spec, must unpin session in this case\n                    session.unpin({ error });\n                }\n            }\n            else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n                session.unpin({ error });\n            }\n        }\n        callback(error);\n    }\n    if (session.transaction.recoveryToken) {\n        command.recoveryToken = session.transaction.recoveryToken;\n    }\n    // send the command\n    (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n    }), error => {\n        if (command.abortTransaction) {\n            // always unpin on abort regardless of command outcome\n            session.unpin();\n        }\n        if (error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError)) {\n            // SPEC-1185: apply majority write concern when retrying commitTransaction\n            if (command.commitTransaction) {\n                // per txns spec, must unpin session in this case\n                session.unpin({ force: true });\n                command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n                    w: 'majority'\n                });\n            }\n            return (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(command, {\n                session,\n                readPreference: read_preference_1.ReadPreference.primary,\n                bypassPinningCheck: true\n            }), commandHandler);\n        }\n        commandHandler(error);\n    });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n    /** @internal */\n    constructor() {\n        this.id = { id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID) };\n        this.lastUse = (0, utils_1.now)();\n        this.txnNumber = 0;\n        this.isDirty = false;\n    }\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes) {\n        // Take the difference of the lastUse timestamp and now, which will result in a value in\n        // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n        const idleTimeMinutes = Math.round((((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000) % 3600000) / 60000);\n        return idleTimeMinutes > sessionTimeoutMinutes - 1;\n    }\n    /**\n     * @internal\n     * Cloning meant to keep a readable reference to the server session data\n     * after ClientSession has ended\n     */\n    static clone(serverSession) {\n        const arrayBuffer = new ArrayBuffer(16);\n        const idBytes = Buffer.from(arrayBuffer);\n        idBytes.set(serverSession.id.id.buffer);\n        const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n        // Manual prototype construction to avoid modifying the constructor of this class\n        return Object.setPrototypeOf({\n            id: { id },\n            lastUse: serverSession.lastUse,\n            txnNumber: serverSession.txnNumber,\n            isDirty: serverSession.isDirty\n        }, ServerSession.prototype);\n    }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n    constructor(client) {\n        if (client == null) {\n            throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n        }\n        this.client = client;\n        this.sessions = new utils_1.List();\n    }\n    /**\n     * Acquire a Server Session from the pool.\n     * Iterates through each session in the pool, removing any stale sessions\n     * along the way. The first non-stale session found is removed from the\n     * pool and returned. If no non-stale session is found, a new ServerSession is created.\n     */\n    acquire() {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        let session = null;\n        // Try to obtain from session pool\n        while (this.sessions.length > 0) {\n            const potentialSession = this.sessions.shift();\n            if (potentialSession != null &&\n                (!!this.client.topology?.loadBalanced ||\n                    !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n                session = potentialSession;\n                break;\n            }\n        }\n        // If nothing valid came from the pool make a new one\n        if (session == null) {\n            session = new ServerSession();\n        }\n        return session;\n    }\n    /**\n     * Release a session to the session pool\n     * Adds the session back to the session pool if the session has not timed out yet.\n     * This method also removes any stale sessions from the pool.\n     *\n     * @param session - The session to release to the pool\n     */\n    release(session) {\n        const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n        if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n            this.sessions.unshift(session);\n        }\n        if (!sessionTimeoutMinutes) {\n            return;\n        }\n        this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n        if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n            if (session.isDirty) {\n                return;\n            }\n            // otherwise, readd this session to the session pool\n            this.sessions.unshift(session);\n        }\n    }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n    if (session.hasEnded) {\n        return new error_1.MongoExpiredSessionError();\n    }\n    // May acquire serverSession here\n    const serverSession = session.serverSession;\n    if (serverSession == null) {\n        return new error_1.MongoRuntimeError('Unable to acquire server session');\n    }\n    if (options.writeConcern?.w === 0) {\n        if (session && session.explicit) {\n            // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n            return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n        }\n        return;\n    }\n    // mark the last use of this session, and apply the `lsid`\n    serverSession.lastUse = (0, utils_1.now)();\n    command.lsid = serverSession.id;\n    const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n    const isRetryableWrite = !!options.willRetryWrite;\n    if (isRetryableWrite || inTxnOrTxnCommand) {\n        serverSession.txnNumber += session[kTxnNumberIncrement];\n        session[kTxnNumberIncrement] = 0;\n        // TODO(NODE-2674): Preserve int64 sent from MongoDB\n        command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n    }\n    if (!inTxnOrTxnCommand) {\n        if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n            session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n        }\n        if (session.supports.causalConsistency &&\n            session.operationTime &&\n            (0, utils_1.commandSupportsReadConcern)(command)) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n        else if (session[kSnapshotEnabled]) {\n            command.readConcern = command.readConcern || { level: read_concern_1.ReadConcernLevel.snapshot };\n            if (session[kSnapshotTime] != null) {\n                Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n            }\n        }\n        return;\n    }\n    // now attempt to apply transaction-specific sessions data\n    // `autocommit` must always be false to differentiate from retryable writes\n    command.autocommit = false;\n    if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n        session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n        command.startTransaction = true;\n        const readConcern = session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n        if (readConcern) {\n            command.readConcern = readConcern;\n        }\n        if (session.supports.causalConsistency && session.operationTime) {\n            command.readConcern = command.readConcern || {};\n            Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n        }\n    }\n    return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n    if (document.$clusterTime) {\n        (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n    }\n    if (document.operationTime && session && session.supports.causalConsistency) {\n        session.advanceOperationTime(document.operationTime);\n    }\n    if (document.recoveryToken && session && session.inTransaction()) {\n        session.transaction._recoveryToken = document.recoveryToken;\n    }\n    if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n        // find and aggregate commands return atClusterTime on the cursor\n        // distinct includes it in the response body\n        const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n        if (atClusterTime) {\n            session[kSnapshotTime] = atClusterTime;\n        }\n    }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;\n//# sourceMappingURL=sessions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sessions.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/sort.js":
/*!*******************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/sort.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.formatSort = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\n/** @internal */\nfunction prepareDirection(direction = 1) {\n    const value = `${direction}`.toLowerCase();\n    if (isMeta(direction))\n        return direction;\n    switch (value) {\n        case 'ascending':\n        case 'asc':\n        case '1':\n            return 1;\n        case 'descending':\n        case 'desc':\n        case '-1':\n            return -1;\n        default:\n            throw new error_1.MongoInvalidArgumentError(`Invalid sort direction: ${JSON.stringify(direction)}`);\n    }\n}\n/** @internal */\nfunction isMeta(t) {\n    return typeof t === 'object' && t != null && '$meta' in t && typeof t.$meta === 'string';\n}\n/** @internal */\nfunction isPair(t) {\n    if (Array.isArray(t) && t.length === 2) {\n        try {\n            prepareDirection(t[1]);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    return false;\n}\nfunction isDeep(t) {\n    return Array.isArray(t) && Array.isArray(t[0]);\n}\nfunction isMap(t) {\n    return t instanceof Map && t.size > 0;\n}\n/** @internal */\nfunction pairToMap(v) {\n    return new Map([[`${v[0]}`, prepareDirection([v[1]])]]);\n}\n/** @internal */\nfunction deepToMap(t) {\n    const sortEntries = t.map(([k, v]) => [`${k}`, prepareDirection(v)]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction stringsToMap(t) {\n    const sortEntries = t.map(key => [`${key}`, 1]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction objectToMap(t) {\n    const sortEntries = Object.entries(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** @internal */\nfunction mapToMap(t) {\n    const sortEntries = Array.from(t).map(([k, v]) => [\n        `${k}`,\n        prepareDirection(v)\n    ]);\n    return new Map(sortEntries);\n}\n/** converts a Sort type into a type that is valid for the server (SortForCmd) */\nfunction formatSort(sort, direction) {\n    if (sort == null)\n        return undefined;\n    if (typeof sort === 'string')\n        return new Map([[sort, prepareDirection(direction)]]);\n    if (typeof sort !== 'object') {\n        throw new error_1.MongoInvalidArgumentError(`Invalid sort format: ${JSON.stringify(sort)} Sort must be a valid object`);\n    }\n    if (!Array.isArray(sort)) {\n        return isMap(sort) ? mapToMap(sort) : Object.keys(sort).length ? objectToMap(sort) : undefined;\n    }\n    if (!sort.length)\n        return undefined;\n    if (isDeep(sort))\n        return deepToMap(sort);\n    if (isPair(sort))\n        return pairToMap(sort);\n    return stringsToMap(sort);\n}\nexports.formatSort = formatSort;\n//# sourceMappingURL=sort.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLGdCQUFnQixtQkFBTyxDQUFDLHVFQUFTO0FBQ2pDO0FBQ0E7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsMEJBQTBCO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixLQUFLO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxFQUFFO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLElBQUk7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxzQkFBc0I7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJlZGlzXzIvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3NvcnQuanM/ZTJiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZm9ybWF0U29ydCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIHByZXBhcmVEaXJlY3Rpb24oZGlyZWN0aW9uID0gMSkge1xuICAgIGNvbnN0IHZhbHVlID0gYCR7ZGlyZWN0aW9ufWAudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoaXNNZXRhKGRpcmVjdGlvbikpXG4gICAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlICdhc2NlbmRpbmcnOlxuICAgICAgICBjYXNlICdhc2MnOlxuICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlICdkZXNjZW5kaW5nJzpcbiAgICAgICAgY2FzZSAnZGVzYyc6XG4gICAgICAgIGNhc2UgJy0xJzpcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcl8xLk1vbmdvSW52YWxpZEFyZ3VtZW50RXJyb3IoYEludmFsaWQgc29ydCBkaXJlY3Rpb246ICR7SlNPTi5zdHJpbmdpZnkoZGlyZWN0aW9uKX1gKTtcbiAgICB9XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBpc01ldGEodCkge1xuICAgIHJldHVybiB0eXBlb2YgdCA9PT0gJ29iamVjdCcgJiYgdCAhPSBudWxsICYmICckbWV0YScgaW4gdCAmJiB0eXBlb2YgdC4kbWV0YSA9PT0gJ3N0cmluZyc7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBpc1BhaXIodCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHQpICYmIHQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcmVwYXJlRGlyZWN0aW9uKHRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0RlZXAodCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHQpICYmIEFycmF5LmlzQXJyYXkodFswXSk7XG59XG5mdW5jdGlvbiBpc01hcCh0KSB7XG4gICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBNYXAgJiYgdC5zaXplID4gMDtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIHBhaXJUb01hcCh2KSB7XG4gICAgcmV0dXJuIG5ldyBNYXAoW1tgJHt2WzBdfWAsIHByZXBhcmVEaXJlY3Rpb24oW3ZbMV1dKV1dKTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIGRlZXBUb01hcCh0KSB7XG4gICAgY29uc3Qgc29ydEVudHJpZXMgPSB0Lm1hcCgoW2ssIHZdKSA9PiBbYCR7a31gLCBwcmVwYXJlRGlyZWN0aW9uKHYpXSk7XG4gICAgcmV0dXJuIG5ldyBNYXAoc29ydEVudHJpZXMpO1xufVxuLyoqIEBpbnRlcm5hbCAqL1xuZnVuY3Rpb24gc3RyaW5nc1RvTWFwKHQpIHtcbiAgICBjb25zdCBzb3J0RW50cmllcyA9IHQubWFwKGtleSA9PiBbYCR7a2V5fWAsIDFdKTtcbiAgICByZXR1cm4gbmV3IE1hcChzb3J0RW50cmllcyk7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBvYmplY3RUb01hcCh0KSB7XG4gICAgY29uc3Qgc29ydEVudHJpZXMgPSBPYmplY3QuZW50cmllcyh0KS5tYXAoKFtrLCB2XSkgPT4gW1xuICAgICAgICBgJHtrfWAsXG4gICAgICAgIHByZXBhcmVEaXJlY3Rpb24odilcbiAgICBdKTtcbiAgICByZXR1cm4gbmV3IE1hcChzb3J0RW50cmllcyk7XG59XG4vKiogQGludGVybmFsICovXG5mdW5jdGlvbiBtYXBUb01hcCh0KSB7XG4gICAgY29uc3Qgc29ydEVudHJpZXMgPSBBcnJheS5mcm9tKHQpLm1hcCgoW2ssIHZdKSA9PiBbXG4gICAgICAgIGAke2t9YCxcbiAgICAgICAgcHJlcGFyZURpcmVjdGlvbih2KVxuICAgIF0pO1xuICAgIHJldHVybiBuZXcgTWFwKHNvcnRFbnRyaWVzKTtcbn1cbi8qKiBjb252ZXJ0cyBhIFNvcnQgdHlwZSBpbnRvIGEgdHlwZSB0aGF0IGlzIHZhbGlkIGZvciB0aGUgc2VydmVyIChTb3J0Rm9yQ21kKSAqL1xuZnVuY3Rpb24gZm9ybWF0U29ydChzb3J0LCBkaXJlY3Rpb24pIHtcbiAgICBpZiAoc29ydCA9PSBudWxsKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2Ygc29ydCA9PT0gJ3N0cmluZycpXG4gICAgICAgIHJldHVybiBuZXcgTWFwKFtbc29ydCwgcHJlcGFyZURpcmVjdGlvbihkaXJlY3Rpb24pXV0pO1xuICAgIGlmICh0eXBlb2Ygc29ydCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yXzEuTW9uZ29JbnZhbGlkQXJndW1lbnRFcnJvcihgSW52YWxpZCBzb3J0IGZvcm1hdDogJHtKU09OLnN0cmluZ2lmeShzb3J0KX0gU29ydCBtdXN0IGJlIGEgdmFsaWQgb2JqZWN0YCk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShzb3J0KSkge1xuICAgICAgICByZXR1cm4gaXNNYXAoc29ydCkgPyBtYXBUb01hcChzb3J0KSA6IE9iamVjdC5rZXlzKHNvcnQpLmxlbmd0aCA/IG9iamVjdFRvTWFwKHNvcnQpIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoIXNvcnQubGVuZ3RoKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGlmIChpc0RlZXAoc29ydCkpXG4gICAgICAgIHJldHVybiBkZWVwVG9NYXAoc29ydCk7XG4gICAgaWYgKGlzUGFpcihzb3J0KSlcbiAgICAgICAgcmV0dXJuIHBhaXJUb01hcChzb3J0KTtcbiAgICByZXR1cm4gc3RyaW5nc1RvTWFwKHNvcnQpO1xufVxuZXhwb3J0cy5mb3JtYXRTb3J0ID0gZm9ybWF0U29ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvcnQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/sort.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/transactions.js":
/*!***************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/transactions.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isTransactionCommand = exports.Transaction = exports.TxnState = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\n/** @internal */\nexports.TxnState = Object.freeze({\n    NO_TRANSACTION: 'NO_TRANSACTION',\n    STARTING_TRANSACTION: 'STARTING_TRANSACTION',\n    TRANSACTION_IN_PROGRESS: 'TRANSACTION_IN_PROGRESS',\n    TRANSACTION_COMMITTED: 'TRANSACTION_COMMITTED',\n    TRANSACTION_COMMITTED_EMPTY: 'TRANSACTION_COMMITTED_EMPTY',\n    TRANSACTION_ABORTED: 'TRANSACTION_ABORTED'\n});\nconst stateMachine = {\n    [exports.TxnState.NO_TRANSACTION]: [exports.TxnState.NO_TRANSACTION, exports.TxnState.STARTING_TRANSACTION],\n    [exports.TxnState.STARTING_TRANSACTION]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_IN_PROGRESS]: [\n        exports.TxnState.TRANSACTION_IN_PROGRESS,\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_ABORTED\n    ],\n    [exports.TxnState.TRANSACTION_COMMITTED]: [\n        exports.TxnState.TRANSACTION_COMMITTED,\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.STARTING_TRANSACTION,\n        exports.TxnState.NO_TRANSACTION\n    ],\n    [exports.TxnState.TRANSACTION_ABORTED]: [exports.TxnState.STARTING_TRANSACTION, exports.TxnState.NO_TRANSACTION],\n    [exports.TxnState.TRANSACTION_COMMITTED_EMPTY]: [\n        exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n        exports.TxnState.NO_TRANSACTION\n    ]\n};\nconst ACTIVE_STATES = new Set([\n    exports.TxnState.STARTING_TRANSACTION,\n    exports.TxnState.TRANSACTION_IN_PROGRESS\n]);\nconst COMMITTED_STATES = new Set([\n    exports.TxnState.TRANSACTION_COMMITTED,\n    exports.TxnState.TRANSACTION_COMMITTED_EMPTY,\n    exports.TxnState.TRANSACTION_ABORTED\n]);\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nclass Transaction {\n    /** Create a transaction @internal */\n    constructor(options) {\n        options = options ?? {};\n        this.state = exports.TxnState.NO_TRANSACTION;\n        this.options = {};\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n        if (writeConcern) {\n            if (writeConcern.w === 0) {\n                throw new error_1.MongoTransactionError('Transactions do not support unacknowledged write concern');\n            }\n            this.options.writeConcern = writeConcern;\n        }\n        if (options.readConcern) {\n            this.options.readConcern = read_concern_1.ReadConcern.fromOptions(options);\n        }\n        if (options.readPreference) {\n            this.options.readPreference = read_preference_1.ReadPreference.fromOptions(options);\n        }\n        if (options.maxCommitTimeMS) {\n            this.options.maxTimeMS = options.maxCommitTimeMS;\n        }\n        // TODO: This isn't technically necessary\n        this._pinnedServer = undefined;\n        this._recoveryToken = undefined;\n    }\n    /** @internal */\n    get server() {\n        return this._pinnedServer;\n    }\n    get recoveryToken() {\n        return this._recoveryToken;\n    }\n    get isPinned() {\n        return !!this.server;\n    }\n    /** @returns Whether the transaction has started */\n    get isStarting() {\n        return this.state === exports.TxnState.STARTING_TRANSACTION;\n    }\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive() {\n        return ACTIVE_STATES.has(this.state);\n    }\n    get isCommitted() {\n        return COMMITTED_STATES.has(this.state);\n    }\n    /**\n     * Transition the transaction in the state machine\n     * @internal\n     * @param nextState - The new state to transition to\n     */\n    transition(nextState) {\n        const nextStates = stateMachine[this.state];\n        if (nextStates && nextStates.includes(nextState)) {\n            this.state = nextState;\n            if (this.state === exports.TxnState.NO_TRANSACTION ||\n                this.state === exports.TxnState.STARTING_TRANSACTION ||\n                this.state === exports.TxnState.TRANSACTION_ABORTED) {\n                this.unpinServer();\n            }\n            return;\n        }\n        throw new error_1.MongoRuntimeError(`Attempted illegal state transition from [${this.state}] to [${nextState}]`);\n    }\n    /** @internal */\n    pinServer(server) {\n        if (this.isActive) {\n            this._pinnedServer = server;\n        }\n    }\n    /** @internal */\n    unpinServer() {\n        this._pinnedServer = undefined;\n    }\n}\nexports.Transaction = Transaction;\nfunction isTransactionCommand(command) {\n    return !!(command.commitTransaction || command.abortTransaction);\n}\nexports.isTransactionCommand = isTransactionCommand;\n//# sourceMappingURL=transactions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/transactions.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/utils.js":
/*!********************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/utils.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.request = exports.matchesParentDomain = exports.parseUnsignedInteger = exports.parseInteger = exports.compareObjectId = exports.commandSupportsReadConcern = exports.shuffle = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.calculateDurationInMs = exports.now = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsync = exports.maxWireVersion = exports.uuidV4 = exports.databaseNamespace = exports.maybeCallback = exports.makeCounter = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ns = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.normalizeHintField = exports.checkCollectionName = exports.hostMatchesWildcards = exports.ByteUtils = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst bson_1 = __webpack_require__(/*! ./bson */ \"(ssr)/../../../../../node_modules/mongodb/lib/bson.js\");\nconst constants_1 = __webpack_require__(/*! ./cmap/wire_protocol/constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/cmap/wire_protocol/constants.js\");\nconst constants_2 = __webpack_require__(/*! ./constants */ \"(ssr)/../../../../../node_modules/mongodb/lib/constants.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"(ssr)/../../../../../node_modules/mongodb/lib/error.js\");\nconst read_concern_1 = __webpack_require__(/*! ./read_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_concern.js\");\nconst read_preference_1 = __webpack_require__(/*! ./read_preference */ \"(ssr)/../../../../../node_modules/mongodb/lib/read_preference.js\");\nconst common_1 = __webpack_require__(/*! ./sdam/common */ \"(ssr)/../../../../../node_modules/mongodb/lib/sdam/common.js\");\nconst write_concern_1 = __webpack_require__(/*! ./write_concern */ \"(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\");\nexports.ByteUtils = {\n    toLocalBufferType(buffer) {\n        return Buffer.isBuffer(buffer)\n            ? buffer\n            : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n    },\n    equals(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n    },\n    compare(seqA, seqB) {\n        return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n    },\n    toBase64(uint8array) {\n        return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n    }\n};\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n    for (const wildcard of wildcards) {\n        if (host === wildcard ||\n            (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n            (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.hostMatchesWildcards = hostMatchesWildcards;\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\nfunction checkCollectionName(collectionName) {\n    if ('string' !== typeof collectionName) {\n        throw new error_1.MongoInvalidArgumentError('Collection name must be a String');\n    }\n    if (!collectionName || collectionName.indexOf('..') !== -1) {\n        throw new error_1.MongoInvalidArgumentError('Collection names cannot be empty');\n    }\n    if (collectionName.indexOf('$') !== -1 &&\n        collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null) {\n        // TODO(NODE-3483): Use MongoNamespace static method\n        throw new error_1.MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n    }\n    if (collectionName.match(/^\\.|\\.$/) != null) {\n        // TODO(NODE-3483): Use MongoNamespace static method\n        throw new error_1.MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n    }\n    // Validate that we are not passing 0x00 in the collection name\n    if (collectionName.indexOf('\\x00') !== -1) {\n        // TODO(NODE-3483): Use MongoNamespace static method\n        throw new error_1.MongoInvalidArgumentError('Collection names cannot contain a null character');\n    }\n}\nexports.checkCollectionName = checkCollectionName;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n    let finalHint = undefined;\n    if (typeof hint === 'string') {\n        finalHint = hint;\n    }\n    else if (Array.isArray(hint)) {\n        finalHint = {};\n        hint.forEach(param => {\n            finalHint[param] = 1;\n        });\n    }\n    else if (hint != null && typeof hint === 'object') {\n        finalHint = {};\n        for (const name in hint) {\n            finalHint[name] = hint[name];\n        }\n    }\n    return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\nconst TO_STRING = (object) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n    return '[object Object]' === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */\nfunction mergeOptions(target, source) {\n    return { ...target, ...source };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */\nfunction filterOptions(options, names) {\n    const filterOptions = {};\n    for (const name in options) {\n        if (names.includes(name)) {\n            filterOptions[name] = options[name];\n        }\n    }\n    // Filtered options\n    return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n    if (db && db.s.options?.retryWrites) {\n        target.retryWrites = true;\n    }\n    return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n    return !!value && typeof value.then === 'function';\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n    const capabilities = getTopology(target).capabilities;\n    if (options.collation && typeof options.collation === 'object') {\n        if (capabilities && capabilities.commandsTakeCollation) {\n            command.collation = options.collation;\n        }\n        else {\n            throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n        }\n    }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n    if (options && options.session && options.session.inTransaction()) {\n        return;\n    }\n    const readConcern = Object.assign({}, command.readConcern || {});\n    if (coll.s.readConcern) {\n        Object.assign(readConcern, coll.s.readConcern);\n    }\n    if (Object.keys(readConcern).length > 0) {\n        Object.assign(command, { readConcern: readConcern });\n    }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n    if (command.explain) {\n        return command;\n    }\n    return { explain: command, verbosity: explain.verbosity };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n    // MongoClient or ClientSession or AbstractCursor\n    if ('topology' in provider && provider.topology) {\n        return provider.topology;\n    }\n    else if ('client' in provider && provider.client.topology) {\n        return provider.client.topology;\n    }\n    throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\nexports.getTopology = getTopology;\n/** @internal */\nfunction ns(ns) {\n    return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */\nclass MongoDBNamespace {\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db, collection) {\n        this.db = db;\n        this.collection = collection;\n        this.collection = collection === '' ? undefined : collection;\n    }\n    toString() {\n        return this.collection ? `${this.db}.${this.collection}` : this.db;\n    }\n    withCollection(collection) {\n        return new MongoDBCollectionNamespace(this.db, collection);\n    }\n    static fromString(namespace) {\n        if (typeof namespace !== 'string' || namespace === '') {\n            // TODO(NODE-3483): Replace with MongoNamespaceError\n            throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n        }\n        const [db, ...collectionParts] = namespace.split('.');\n        const collection = collectionParts.join('.');\n        return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n    }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n    constructor(db, collection) {\n        super(db, collection);\n        this.collection = collection;\n    }\n    static fromString(namespace) {\n        return super.fromString(namespace);\n    }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction* makeCounter(seed = 0) {\n    let count = seed;\n    while (true) {\n        const newCount = count;\n        count += 1;\n        yield newCount;\n    }\n}\nexports.makeCounter = makeCounter;\nfunction maybeCallback(promiseFn, callback) {\n    const promise = promiseFn();\n    if (callback == null) {\n        return promise;\n    }\n    promise.then(result => callback(undefined, result), error => callback(error));\n    return;\n}\nexports.maybeCallback = maybeCallback;\n/** @internal */\nfunction databaseNamespace(ns) {\n    return ns.split('.')[0];\n}\nexports.databaseNamespace = databaseNamespace;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n    const result = crypto.randomBytes(16);\n    result[6] = (result[6] & 0x0f) | 0x40;\n    result[8] = (result[8] & 0x3f) | 0x80;\n    return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n    if (topologyOrServer) {\n        if (topologyOrServer.loadBalanced) {\n            // Since we do not have a monitor, we assume the load balanced server is always\n            // pointed at the latest mongodb version. There is a risk that for on-prem\n            // deployments that don't upgrade immediately that this could alert to the\n            // application that a feature is available that is actually not.\n            return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n        }\n        if (topologyOrServer.hello) {\n            return topologyOrServer.hello.maxWireVersion;\n        }\n        if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n            const lastHello = topologyOrServer.lastHello();\n            if (lastHello) {\n                return lastHello.maxWireVersion;\n            }\n        }\n        if (topologyOrServer.description &&\n            'maxWireVersion' in topologyOrServer.description &&\n            topologyOrServer.description.maxWireVersion != null) {\n            return topologyOrServer.description.maxWireVersion;\n        }\n    }\n    return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nfunction eachAsync(arr, eachFn, callback) {\n    arr = arr || [];\n    let idx = 0;\n    let awaiting = 0;\n    for (idx = 0; idx < arr.length; ++idx) {\n        awaiting++;\n        eachFn(arr[idx], eachCallback);\n    }\n    if (awaiting === 0) {\n        callback();\n        return;\n    }\n    function eachCallback(err) {\n        awaiting--;\n        if (err) {\n            callback(err);\n            return;\n        }\n        if (idx === arr.length && awaiting <= 0) {\n            callback();\n        }\n    }\n}\nexports.eachAsync = eachAsync;\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n    if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n        return false;\n    }\n    return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n    if (lhs === rhs) {\n        return true;\n    }\n    if (!lhs || !rhs) {\n        return lhs === rhs;\n    }\n    if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n        return false;\n    }\n    if (lhs.constructor.name !== rhs.constructor.name) {\n        return false;\n    }\n    if (lhs.message !== rhs.message) {\n        return false;\n    }\n    return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\nfunction makeStateMachine(stateTable) {\n    return function stateTransition(target, newState) {\n        const legalStates = stateTable[target.s.state];\n        if (legalStates && legalStates.indexOf(newState) < 0) {\n            throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n        }\n        target.emit('stateChanged', target.s.state, newState);\n        target.s.state = newState;\n    };\n}\nexports.makeStateMachine = makeStateMachine;\n/** @internal */\nfunction now() {\n    const hrtime = process.hrtime();\n    return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */\nfunction calculateDurationInMs(started) {\n    if (typeof started !== 'number') {\n        throw new error_1.MongoInvalidArgumentError('Numeric value required to calculate duration');\n    }\n    const elapsed = now() - started;\n    return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/** @internal */\nfunction hasAtomicOperators(doc) {\n    if (Array.isArray(doc)) {\n        for (const document of doc) {\n            if (hasAtomicOperators(document)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    const keys = Object.keys(doc);\n    return keys.length > 0 && keys[0][0] === '$';\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n    const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n    // Users cannot pass a readConcern/writeConcern to operations in a transaction\n    const session = options?.session;\n    if (!session?.inTransaction()) {\n        const readConcern = read_concern_1.ReadConcern.fromOptions(options) ?? parent?.readConcern;\n        if (readConcern) {\n            result.readConcern = readConcern;\n        }\n        const writeConcern = write_concern_1.WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n        if (writeConcern) {\n            result.writeConcern = writeConcern;\n        }\n    }\n    const readPreference = read_preference_1.ReadPreference.fromOptions(options) ?? parent?.readPreference;\n    if (readPreference) {\n        result.readPreference = readPreference;\n    }\n    return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n    set = Array.isArray(set) ? new Set(set) : set;\n    subset = Array.isArray(subset) ? new Set(subset) : subset;\n    for (const elem of subset) {\n        if (!set.has(elem)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n    return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n    const difference = new Set(setA);\n    for (const elem of setB) {\n        difference.delete(elem);\n    }\n    return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value, requiredKeys = undefined) {\n    if (!isObject(value)) {\n        return false;\n    }\n    const ctor = value.constructor;\n    if (ctor && ctor.prototype) {\n        if (!isObject(ctor.prototype)) {\n            return false;\n        }\n        // Check to see if some method exists from the Object exists\n        if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n            return false;\n        }\n    }\n    if (requiredKeys) {\n        const keys = Object.keys(value);\n        return isSuperset(keys, requiredKeys);\n    }\n    return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n    if (value == null) {\n        return value;\n    }\n    else if (Array.isArray(value)) {\n        return value.map(item => deepCopy(item));\n    }\n    else if (isRecord(value)) {\n        const res = {};\n        for (const key in value) {\n            res[key] = deepCopy(value[key]);\n        }\n        return res;\n    }\n    const ctor = value.constructor;\n    if (ctor) {\n        switch (ctor.name.toLowerCase()) {\n            case 'date':\n                return new ctor(Number(value));\n            case 'map':\n                return new Map(value);\n            case 'set':\n                return new Set(value);\n            case 'buffer':\n                return Buffer.from(value);\n        }\n    }\n    return value;\n}\nexports.deepCopy = deepCopy;\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n    get length() {\n        return this.count;\n    }\n    get [Symbol.toStringTag]() {\n        return 'List';\n    }\n    constructor() {\n        this.count = 0;\n        // this is carefully crafted:\n        // declaring a complete and consistently key ordered\n        // object is beneficial to the runtime optimizations\n        this.head = {\n            next: null,\n            prev: null,\n            value: null\n        };\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    toString() {\n        return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n    }\n    *[Symbol.iterator]() {\n        for (const node of this.nodes()) {\n            yield node.value;\n        }\n    }\n    *nodes() {\n        let ptr = this.head.next;\n        while (ptr !== this.head) {\n            // Save next before yielding so that we make removing within iteration safe\n            const { next } = ptr;\n            yield ptr;\n            ptr = next;\n        }\n    }\n    /** Insert at end of list */\n    push(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head,\n            prev: this.head.prev,\n            value\n        };\n        this.head.prev.next = newNode;\n        this.head.prev = newNode;\n    }\n    /** Inserts every item inside an iterable instead of the iterable itself */\n    pushMany(iterable) {\n        for (const value of iterable) {\n            this.push(value);\n        }\n    }\n    /** Insert at front of list */\n    unshift(value) {\n        this.count += 1;\n        const newNode = {\n            next: this.head.next,\n            prev: this.head,\n            value\n        };\n        this.head.next.prev = newNode;\n        this.head.next = newNode;\n    }\n    remove(node) {\n        if (node === this.head || this.length === 0) {\n            return null;\n        }\n        this.count -= 1;\n        const prevNode = node.prev;\n        const nextNode = node.next;\n        prevNode.next = nextNode;\n        nextNode.prev = prevNode;\n        return node.value;\n    }\n    /** Removes the first node at the front of the list */\n    shift() {\n        return this.remove(this.head.next);\n    }\n    /** Removes the last node at the end of the list */\n    pop() {\n        return this.remove(this.head.prev);\n    }\n    /** Iterates through the list and removes nodes where filter returns true */\n    prune(filter) {\n        for (const node of this.nodes()) {\n            if (filter(node.value)) {\n                this.remove(node);\n            }\n        }\n    }\n    clear() {\n        this.count = 0;\n        this.head.next = this.head;\n        this.head.prev = this.head;\n    }\n    /** Returns the first item in the list, does not remove */\n    first() {\n        // If the list is empty, value will be the head's null\n        return this.head.next.value;\n    }\n    /** Returns the last item in the list, does not remove */\n    last() {\n        // If the list is empty, value will be the head's null\n        return this.head.prev.value;\n    }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n    constructor() {\n        this.buffers = new List();\n        this.totalByteLength = 0;\n    }\n    get length() {\n        return this.totalByteLength;\n    }\n    /** Adds a buffer to the internal buffer pool list */\n    append(buffer) {\n        this.buffers.push(buffer);\n        this.totalByteLength += buffer.length;\n    }\n    /**\n     * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n     * otherwise return null. Size can be negative, caller should error check.\n     */\n    getInt32() {\n        if (this.totalByteLength < 4) {\n            return null;\n        }\n        const firstBuffer = this.buffers.first();\n        if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n            return firstBuffer.readInt32LE(0);\n        }\n        // Unlikely case: an int32 is split across buffers.\n        // Use read and put the returned buffer back on top\n        const top4Bytes = this.read(4);\n        const value = top4Bytes.readInt32LE(0);\n        // Put it back.\n        this.totalByteLength += 4;\n        this.buffers.unshift(top4Bytes);\n        return value;\n    }\n    /** Reads the requested number of bytes, optionally consuming them */\n    read(size) {\n        if (typeof size !== 'number' || size < 0) {\n            throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n        }\n        // oversized request returns empty buffer\n        if (size > this.totalByteLength) {\n            return Buffer.alloc(0);\n        }\n        // We know we have enough, we just don't know how it is spread across chunks\n        // TODO(NODE-4732): alloc API should change based on raw option\n        const result = Buffer.allocUnsafe(size);\n        for (let bytesRead = 0; bytesRead < size;) {\n            const buffer = this.buffers.shift();\n            if (buffer == null) {\n                break;\n            }\n            const bytesRemaining = size - bytesRead;\n            const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n            const bytes = buffer.subarray(0, bytesReadable);\n            result.set(bytes, bytesRead);\n            bytesRead += bytesReadable;\n            this.totalByteLength -= bytesReadable;\n            if (bytesReadable < buffer.byteLength) {\n                this.buffers.unshift(buffer.subarray(bytesReadable));\n            }\n        }\n        return result;\n    }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n    constructor(hostString) {\n        this.host = undefined;\n        this.port = undefined;\n        this.socketPath = undefined;\n        this.isIPv6 = false;\n        const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n        if (escapedHost.endsWith('.sock')) {\n            // heuristically determine if we're working with a domain socket\n            this.socketPath = decodeURIComponent(escapedHost);\n            return;\n        }\n        const urlString = `iLoveJS://${escapedHost}`;\n        let url;\n        try {\n            url = new url_1.URL(urlString);\n        }\n        catch (urlError) {\n            const runtimeError = new error_1.MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n            runtimeError.cause = urlError;\n            throw runtimeError;\n        }\n        const hostname = url.hostname;\n        const port = url.port;\n        let normalized = decodeURIComponent(hostname).toLowerCase();\n        if (normalized.startsWith('[') && normalized.endsWith(']')) {\n            this.isIPv6 = true;\n            normalized = normalized.substring(1, hostname.length - 1);\n        }\n        this.host = normalized.toLowerCase();\n        if (typeof port === 'number') {\n            this.port = port;\n        }\n        else if (typeof port === 'string' && port !== '') {\n            this.port = Number.parseInt(port, 10);\n        }\n        else {\n            this.port = 27017;\n        }\n        if (this.port === 0) {\n            throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n        }\n        Object.freeze(this);\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return this.inspect();\n    }\n    inspect() {\n        return `new HostAddress('${this.toString()}')`;\n    }\n    toString() {\n        if (typeof this.host === 'string') {\n            if (this.isIPv6) {\n                return `[${this.host}]:${this.port}`;\n            }\n            return `${this.host}:${this.port}`;\n        }\n        return `${this.socketPath}`;\n    }\n    static fromString(s) {\n        return new HostAddress(s);\n    }\n    static fromHostPort(host, port) {\n        if (host.includes(':')) {\n            host = `[${host}]`; // IPv6 address\n        }\n        return HostAddress.fromString(`${host}:${port}`);\n    }\n    static fromSrvRecord({ name, port }) {\n        return HostAddress.fromHostPort(name, port);\n    }\n    toHostPort() {\n        if (this.socketPath) {\n            return { host: this.socketPath, port: 0 };\n        }\n        const host = this.host ?? '';\n        const port = this.port ?? 0;\n        return { host, port };\n    }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n    // We prefer not to rely on ObjectId having a createPk method\n    createPk() {\n        return new bson_1.ObjectId();\n    }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n    return process.emitWarning(message, { code: exports.MONGODB_WARNING_CODE });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n    if (!emittedWarnings.has(message)) {\n        emittedWarnings.add(message);\n        return emitWarning(message);\n    }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n    return Object.values(en).join(', ');\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n    if (!server) {\n        return false;\n    }\n    if (server.loadBalanced) {\n        // Loadbalanced topologies will always support retry writes\n        return true;\n    }\n    if (server.description.logicalSessionTimeoutMinutes != null) {\n        // that supports sessions\n        if (server.description.type !== common_1.ServerType.Standalone) {\n            // and that is not a standalone\n            return true;\n        }\n    }\n    return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence, limit = 0) {\n    const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n    if (limit > items.length) {\n        throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n    }\n    let remainingItemsToShuffle = items.length;\n    const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n    while (remainingItemsToShuffle > lowerBound) {\n        // Pick a remaining element\n        const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n        remainingItemsToShuffle -= 1;\n        // And swap it with the current element\n        const swapHold = items[remainingItemsToShuffle];\n        items[remainingItemsToShuffle] = items[randomIndex];\n        items[randomIndex] = swapHold;\n    }\n    return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command) {\n    if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n        return true;\n    }\n    return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n    if (oid1 == null && oid2 == null) {\n        return 0;\n    }\n    if (oid1 == null) {\n        return -1;\n    }\n    if (oid2 == null) {\n        return 1;\n    }\n    return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nexports.compareObjectId = compareObjectId;\nfunction parseInteger(value) {\n    if (typeof value === 'number')\n        return Math.trunc(value);\n    const parsedValue = Number.parseInt(String(value), 10);\n    return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nexports.parseInteger = parseInteger;\nfunction parseUnsignedInteger(value) {\n    const parsedInt = parseInteger(value);\n    return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\nexports.parseUnsignedInteger = parseUnsignedInteger;\n/**\n * Determines whether a provided address matches the provided parent domain.\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(address, srvHost) {\n    // Remove trailing dot if exists on either the resolved address or the srv hostname\n    const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n    const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n    const allCharacterBeforeFirstDot = /^.*?\\./;\n    // Remove all characters before first dot\n    // Add leading dot back to string so\n    //   an srvHostDomain = '.trusted.site'\n    //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n    const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n    const srvHostDomain = `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n    return addressDomain.endsWith(srvHostDomain);\n}\nexports.matchesParentDomain = matchesParentDomain;\nasync function request(uri, options = {}) {\n    return new Promise((resolve, reject) => {\n        const requestOptions = {\n            method: 'GET',\n            timeout: 10000,\n            json: true,\n            ...url.parse(uri),\n            ...options\n        };\n        const req = http.request(requestOptions, res => {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', d => {\n                data += d;\n            });\n            res.once('end', () => {\n                if (options.json === false) {\n                    resolve(data);\n                    return;\n                }\n                try {\n                    const parsed = JSON.parse(data);\n                    resolve(parsed);\n                }\n                catch {\n                    // TODO(NODE-3483)\n                    reject(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n                }\n            });\n        });\n        req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(`Network request to ${uri} timed out after ${options.timeout} ms`)));\n        req.once('error', error => reject(error));\n        req.end();\n    });\n}\nexports.request = request;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js":
/*!****************************************************************!*\
  !*** ../../../../../node_modules/mongodb/lib/write_concern.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WriteConcern = exports.WRITE_CONCERN_KEYS = void 0;\nexports.WRITE_CONCERN_KEYS = ['w', 'wtimeout', 'j', 'journal', 'fsync'];\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nclass WriteConcern {\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */\n    constructor(w, wtimeoutMS, journal, fsync) {\n        if (w != null) {\n            if (!Number.isNaN(Number(w))) {\n                this.w = Number(w);\n            }\n            else {\n                this.w = w;\n            }\n        }\n        if (wtimeoutMS != null) {\n            this.wtimeoutMS = this.wtimeout = wtimeoutMS;\n        }\n        if (journal != null) {\n            this.journal = this.j = journal;\n        }\n        if (fsync != null) {\n            this.journal = this.j = fsync ? true : false;\n        }\n    }\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */\n    static apply(command, writeConcern) {\n        const wc = {};\n        // The write concern document sent to the server has w/wtimeout/j fields.\n        if (writeConcern.w != null)\n            wc.w = writeConcern.w;\n        if (writeConcern.wtimeoutMS != null)\n            wc.wtimeout = writeConcern.wtimeoutMS;\n        if (writeConcern.journal != null)\n            wc.j = writeConcern.j;\n        command.writeConcern = wc;\n        return command;\n    }\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(options, inherit) {\n        if (options == null)\n            return undefined;\n        inherit = inherit ?? {};\n        let opts;\n        if (typeof options === 'string' || typeof options === 'number') {\n            opts = { w: options };\n        }\n        else if (options instanceof WriteConcern) {\n            opts = options;\n        }\n        else {\n            opts = options.writeConcern;\n        }\n        const parentOpts = inherit instanceof WriteConcern ? inherit : inherit.writeConcern;\n        const { w = undefined, wtimeout = undefined, j = undefined, fsync = undefined, journal = undefined, wtimeoutMS = undefined } = {\n            ...parentOpts,\n            ...opts\n        };\n        if (w != null ||\n            wtimeout != null ||\n            wtimeoutMS != null ||\n            j != null ||\n            journal != null ||\n            fsync != null) {\n            return new WriteConcern(w, wtimeout ?? wtimeoutMS, j ?? journal, fsync);\n        }\n        return undefined;\n    }\n}\nexports.WriteConcern = WriteConcern;\n//# sourceMappingURL=write_concern.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21vbmdvZGIvbGliL3dyaXRlX2NvbmNlcm4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CLEdBQUcsMEJBQTBCO0FBQ2pELDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IscUhBQXFIO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmVkaXNfMi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbW9uZ29kYi9saWIvd3JpdGVfY29uY2Vybi5qcz8xNDc1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Xcml0ZUNvbmNlcm4gPSBleHBvcnRzLldSSVRFX0NPTkNFUk5fS0VZUyA9IHZvaWQgMDtcbmV4cG9ydHMuV1JJVEVfQ09OQ0VSTl9LRVlTID0gWyd3JywgJ3d0aW1lb3V0JywgJ2onLCAnam91cm5hbCcsICdmc3luYyddO1xuLyoqXG4gKiBBIE1vbmdvREIgV3JpdGVDb25jZXJuLCB3aGljaCBkZXNjcmliZXMgdGhlIGxldmVsIG9mIGFja25vd2xlZGdlbWVudFxuICogcmVxdWVzdGVkIGZyb20gTW9uZ29EQiBmb3Igd3JpdGUgb3BlcmF0aW9ucy5cbiAqIEBwdWJsaWNcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3Lm1vbmdvZGIuY29tL2RvY3MvbWFudWFsL3JlZmVyZW5jZS93cml0ZS1jb25jZXJuL1xuICovXG5jbGFzcyBXcml0ZUNvbmNlcm4ge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBXcml0ZUNvbmNlcm4gZnJvbSB0aGUgd3JpdGUgY29uY2VybiBwcm9wZXJ0aWVzLlxuICAgICAqIEBwYXJhbSB3IC0gcmVxdWVzdCBhY2tub3dsZWRnbWVudCB0aGF0IHRoZSB3cml0ZSBvcGVyYXRpb24gaGFzIHByb3BhZ2F0ZWQgdG8gYSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1vbmdvZCBpbnN0YW5jZXMgb3IgdG8gbW9uZ29kIGluc3RhbmNlcyB3aXRoIHNwZWNpZmllZCB0YWdzLlxuICAgICAqIEBwYXJhbSB3dGltZW91dE1TIC0gc3BlY2lmeSBhIHRpbWUgbGltaXQgdG8gcHJldmVudCB3cml0ZSBvcGVyYXRpb25zIGZyb20gYmxvY2tpbmcgaW5kZWZpbml0ZWx5XG4gICAgICogQHBhcmFtIGpvdXJuYWwgLSByZXF1ZXN0IGFja25vd2xlZGdtZW50IHRoYXQgdGhlIHdyaXRlIG9wZXJhdGlvbiBoYXMgYmVlbiB3cml0dGVuIHRvIHRoZSBvbi1kaXNrIGpvdXJuYWxcbiAgICAgKiBAcGFyYW0gZnN5bmMgLSBlcXVpdmFsZW50IHRvIHRoZSBqIG9wdGlvbi4gSXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iodywgd3RpbWVvdXRNUywgam91cm5hbCwgZnN5bmMpIHtcbiAgICAgICAgaWYgKHcgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4oTnVtYmVyKHcpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudyA9IE51bWJlcih3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudyA9IHc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHd0aW1lb3V0TVMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy53dGltZW91dE1TID0gdGhpcy53dGltZW91dCA9IHd0aW1lb3V0TVM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGpvdXJuYWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5qb3VybmFsID0gdGhpcy5qID0gam91cm5hbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnN5bmMgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5qb3VybmFsID0gdGhpcy5qID0gZnN5bmMgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbHkgYSB3cml0ZSBjb25jZXJuIHRvIGEgY29tbWFuZCBkb2N1bWVudC4gV2lsbCBtb2RpZnkgYW5kIHJldHVybiB0aGUgY29tbWFuZC5cbiAgICAgKi9cbiAgICBzdGF0aWMgYXBwbHkoY29tbWFuZCwgd3JpdGVDb25jZXJuKSB7XG4gICAgICAgIGNvbnN0IHdjID0ge307XG4gICAgICAgIC8vIFRoZSB3cml0ZSBjb25jZXJuIGRvY3VtZW50IHNlbnQgdG8gdGhlIHNlcnZlciBoYXMgdy93dGltZW91dC9qIGZpZWxkcy5cbiAgICAgICAgaWYgKHdyaXRlQ29uY2Vybi53ICE9IG51bGwpXG4gICAgICAgICAgICB3Yy53ID0gd3JpdGVDb25jZXJuLnc7XG4gICAgICAgIGlmICh3cml0ZUNvbmNlcm4ud3RpbWVvdXRNUyAhPSBudWxsKVxuICAgICAgICAgICAgd2Mud3RpbWVvdXQgPSB3cml0ZUNvbmNlcm4ud3RpbWVvdXRNUztcbiAgICAgICAgaWYgKHdyaXRlQ29uY2Vybi5qb3VybmFsICE9IG51bGwpXG4gICAgICAgICAgICB3Yy5qID0gd3JpdGVDb25jZXJuLmo7XG4gICAgICAgIGNvbW1hbmQud3JpdGVDb25jZXJuID0gd2M7XG4gICAgICAgIHJldHVybiBjb21tYW5kO1xuICAgIH1cbiAgICAvKiogQ29uc3RydWN0IGEgV3JpdGVDb25jZXJuIGdpdmVuIGFuIG9wdGlvbnMgb2JqZWN0LiAqL1xuICAgIHN0YXRpYyBmcm9tT3B0aW9ucyhvcHRpb25zLCBpbmhlcml0KSB7XG4gICAgICAgIGlmIChvcHRpb25zID09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBpbmhlcml0ID0gaW5oZXJpdCA/PyB7fTtcbiAgICAgICAgbGV0IG9wdHM7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBvcHRzID0geyB3OiBvcHRpb25zIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAob3B0aW9ucyBpbnN0YW5jZW9mIFdyaXRlQ29uY2Vybikge1xuICAgICAgICAgICAgb3B0cyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0gb3B0aW9ucy53cml0ZUNvbmNlcm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50T3B0cyA9IGluaGVyaXQgaW5zdGFuY2VvZiBXcml0ZUNvbmNlcm4gPyBpbmhlcml0IDogaW5oZXJpdC53cml0ZUNvbmNlcm47XG4gICAgICAgIGNvbnN0IHsgdyA9IHVuZGVmaW5lZCwgd3RpbWVvdXQgPSB1bmRlZmluZWQsIGogPSB1bmRlZmluZWQsIGZzeW5jID0gdW5kZWZpbmVkLCBqb3VybmFsID0gdW5kZWZpbmVkLCB3dGltZW91dE1TID0gdW5kZWZpbmVkIH0gPSB7XG4gICAgICAgICAgICAuLi5wYXJlbnRPcHRzLFxuICAgICAgICAgICAgLi4ub3B0c1xuICAgICAgICB9O1xuICAgICAgICBpZiAodyAhPSBudWxsIHx8XG4gICAgICAgICAgICB3dGltZW91dCAhPSBudWxsIHx8XG4gICAgICAgICAgICB3dGltZW91dE1TICE9IG51bGwgfHxcbiAgICAgICAgICAgIGogIT0gbnVsbCB8fFxuICAgICAgICAgICAgam91cm5hbCAhPSBudWxsIHx8XG4gICAgICAgICAgICBmc3luYyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFdyaXRlQ29uY2Vybih3LCB3dGltZW91dCA/PyB3dGltZW91dE1TLCBqID8/IGpvdXJuYWwsIGZzeW5jKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuV3JpdGVDb25jZXJuID0gV3JpdGVDb25jZXJuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d3JpdGVfY29uY2Vybi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../../../../node_modules/mongodb/lib/write_concern.js\n");

/***/ }),

/***/ "(ssr)/../../../../../node_modules/mongodb/package.json":
/*!********************************************************!*\
  !*** ../../../../../node_modules/mongodb/package.json ***!
  \********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"mongodb","version":"6.1.0","description":"The official MongoDB driver for Node.js","main":"lib/index.js","files":["lib","src","etc/prepare.js","mongodb.d.ts","tsconfig.json"],"types":"mongodb.d.ts","repository":{"type":"git","url":"git@github.com:mongodb/node-mongodb-native.git"},"keywords":["mongodb","driver","official"],"author":{"name":"The MongoDB NodeJS Team","email":"dbx-node@mongodb.com"},"dependencies":{"@mongodb-js/saslprep":"^1.1.0","bson":"^6.1.0","mongodb-connection-string-url":"^2.6.0"},"peerDependencies":{"@aws-sdk/credential-providers":"^3.188.0","@mongodb-js/zstd":"^1.1.0","gcp-metadata":"^5.2.0","kerberos":"^2.0.1","mongodb-client-encryption":">=6.0.0 <7","snappy":"^7.2.2","socks":"^2.7.1"},"peerDependenciesMeta":{"@aws-sdk/credential-providers":{"optional":true},"@mongodb-js/zstd":{"optional":true},"kerberos":{"optional":true},"snappy":{"optional":true},"mongodb-client-encryption":{"optional":true},"gcp-metadata":{"optional":true},"socks":{"optional":true}},"devDependencies":{"@iarna/toml":"^2.2.5","@istanbuljs/nyc-config-typescript":"^1.0.2","@microsoft/api-extractor":"^7.36.4","@microsoft/tsdoc-config":"^0.16.2","@mongodb-js/zstd":"^1.1.0","@octokit/core":"^4.2.4","@types/chai":"^4.3.5","@types/chai-subset":"^1.3.3","@types/express":"^4.17.17","@types/kerberos":"^1.1.2","@types/mocha":"^10.0.1","@types/node":"^20.5.9","@types/saslprep":"^1.0.1","@types/semver":"^7.5.0","@types/sinon":"^10.0.16","@types/sinon-chai":"^3.2.9","@types/whatwg-url":"^11.0.0","@typescript-eslint/eslint-plugin":"^5.62.0","@typescript-eslint/parser":"^5.62.0","chai":"^4.3.7","chai-subset":"^1.6.0","chalk":"^4.1.2","eslint":"^8.48.0","eslint-config-prettier":"^8.10.0","eslint-plugin-import":"^2.28.1","eslint-plugin-prettier":"^4.2.1","eslint-plugin-simple-import-sort":"^10.0.0","eslint-plugin-tsdoc":"^0.2.17","eslint-plugin-unused-imports":"^2.0.0","express":"^4.18.2","gcp-metadata":"^5.2.0","js-yaml":"^4.1.0","mocha":"^10.2.0","mocha-sinon":"^2.1.2","mongodb-client-encryption":"^6.0.0","mongodb-legacy":"^6.0.0","nyc":"^15.1.0","prettier":"^2.8.8","semver":"^7.5.4","sinon":"^15.2.0","sinon-chai":"^3.7.0","snappy":"^7.2.2","socks":"^2.7.1","source-map-support":"^0.5.21","ts-node":"^10.9.1","tsd":"^0.28.1","typescript":"^5.0.4","typescript-cached-transpile":"^0.0.6","v8-heapsnapshot":"^1.3.1","yargs":"^17.7.2"},"license":"Apache-2.0","engines":{"node":">=16.20.1"},"bugs":{"url":"https://jira.mongodb.org/projects/NODE/issues/"},"homepage":"https://github.com/mongodb/node-mongodb-native","scripts":{"build:evergreen":"node .evergreen/generate_evergreen_tasks.js","build:ts":"node ./node_modules/typescript/bin/tsc","build:dts":"npm run build:ts && api-extractor run && node etc/clean_definition_files.cjs && eslint mongodb.d.ts --fix","build:docs":"./etc/docs/build.ts","build:typedoc":"typedoc","build:nightly":"node ./.github/scripts/nightly.mjs","check:bench":"node test/benchmarks/driverBench","check:coverage":"nyc npm run test:all","check:integration-coverage":"nyc npm run check:test","check:lambda":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/handler.test.js","check:lambda:aws":"mocha --config test/mocha_lambda.json test/integration/node-specific/examples/aws_handler.test.js","check:lint":"npm run build:dts && npm run check:dts && npm run check:eslint && npm run check:tsd","check:eslint":"eslint -v && eslint --max-warnings=0 --ext \'.js,.ts\' src test","check:tsd":"tsd --version && tsd","check:dependencies":"mocha test/action/dependency.test.ts","check:dts":"node ./node_modules/typescript/bin/tsc --noEmit mongodb.d.ts && tsd","check:search-indexes":"nyc mocha --config test/mocha_mongodb.json test/manual/search-index-management.prose.test.ts","check:test":"mocha --config test/mocha_mongodb.json test/integration","check:unit":"mocha test/unit","check:ts":"node ./node_modules/typescript/bin/tsc -v && node ./node_modules/typescript/bin/tsc --noEmit","check:atlas":"mocha --config test/manual/mocharc.json test/manual/atlas_connectivity.test.js","check:drivers-atlas-testing":"mocha --config test/mocha_mongodb.json test/atlas/drivers_atlas_testing.test.ts","check:adl":"mocha --config test/mocha_mongodb.json test/manual/atlas-data-lake-testing","check:aws":"nyc mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_aws.test.ts","check:oidc":"mocha --config test/mocha_mongodb.json test/manual/mongodb_oidc.prose.test.ts","check:oidc-azure":"mocha --config test/mocha_mongodb.json test/integration/auth/mongodb_oidc_azure.prose.test.ts","check:ocsp":"mocha --config test/manual/mocharc.json test/manual/ocsp_support.test.js","check:kerberos":"nyc mocha --config test/manual/mocharc.json test/manual/kerberos.test.ts","check:tls":"mocha --config test/manual/mocharc.json test/manual/tls_support.test.ts","check:ldap":"nyc mocha --config test/manual/mocharc.json test/manual/ldap.test.js","check:socks5":"mocha --config test/manual/mocharc.json test/manual/socks5.test.ts","check:csfle":"mocha --config test/mocha_mongodb.json test/integration/client-side-encryption","check:snappy":"mocha test/unit/assorted/snappy.test.js","fix:eslint":"npm run check:eslint -- --fix","prepare":"node etc/prepare.js","preview:docs":"ts-node etc/docs/preview.ts","test":"npm run check:lint && npm run test:all","test:all":"npm run check:unit && npm run check:test","update:docs":"npm run build:docs -- --yes"},"tsd":{"directory":"test/types","compilerOptions":{"strict":true,"target":"esnext","module":"commonjs","moduleResolution":"node"}}}');

/***/ })

};
;